import {
  require_SetCache,
  require_Stack,
  require_Symbol,
  require_Uint8Array,
  require_arrayLikeKeys,
  require_arrayMap,
  require_arrayPush,
  require_baseAssignValue,
  require_baseFor,
  require_baseGet,
  require_baseGetTag,
  require_baseIsEqual,
  require_baseUnary,
  require_cacheHas,
  require_castPath,
  require_defineProperty,
  require_eq,
  require_get,
  require_hasIn,
  require_identity,
  require_isArguments,
  require_isArray,
  require_isArrayLike,
  require_isBuffer,
  require_isFunction,
  require_isIndex,
  require_isObject,
  require_isObjectLike,
  require_isPrototype,
  require_isTypedArray,
  require_overArg,
  require_root,
  require_toKey
} from "./chunk-L7AM7GUY.js";
import {
  require_prop_types
} from "./chunk-62MWPLVP.js";
import {
  require_jsx_runtime
} from "./chunk-DT77FM6J.js";
import {
  require_react_dom
} from "./chunk-ZW7WJ6XU.js";
import {
  require_react
} from "./chunk-4D5CYJYK.js";
import {
  __commonJS,
  __toESM
} from "./chunk-CEQRFMJQ.js";

// ../node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "../node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// ../node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "../node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// ../node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "../node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// ../node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "../node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// ../node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "../node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array2) {
      var index2 = -1, length = source.length;
      array2 || (array2 = Array(length));
      while (++index2 < length) {
        array2[index2] = source[index2];
      }
      return array2;
    }
    module.exports = copyArray;
  }
});

// ../node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "../node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// ../node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "../node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// ../node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "../node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// ../node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "../node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// ../node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "../node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject;
  }
});

// ../node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "../node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// ../node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "../node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// ../node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "../node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index2 = -1, length = props.length;
      while (++index2 < length) {
        var key = props[index2];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// ../node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "../node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// ../node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "../node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// ../node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "../node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// ../node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "../node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// ../node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "../node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject = require_isObject();
    var isPlainObject = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// ../node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "../node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// ../node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "../node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// ../node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "../node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start3, transform) {
      start3 = nativeMax(start3 === void 0 ? func.length - 1 : start3, 0);
      return function() {
        var args = arguments, index2 = -1, length = nativeMax(args.length - start3, 0), array2 = Array(length);
        while (++index2 < length) {
          array2[index2] = args[start3 + index2];
        }
        index2 = -1;
        var otherArgs = Array(start3 + 1);
        while (++index2 < start3) {
          otherArgs[index2] = args[index2];
        }
        otherArgs[start3] = transform(array2);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// ../node_modules/lodash/constant.js
var require_constant = __commonJS({
  "../node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// ../node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "../node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity5 = require_identity();
    var baseSetToString = !defineProperty ? identity5 : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// ../node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "../node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count2 = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count2 >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count2 = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// ../node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "../node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// ../node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "../node_modules/lodash/_baseRest.js"(exports, module) {
    var identity5 = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start3) {
      return setToString(overRest(func, start3, identity5), func + "");
    }
    module.exports = baseRest;
  }
});

// ../node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "../node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    function isIterateeCall(value, index2, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index2;
      if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
        return eq(object[index2], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// ../node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "../node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index2 < length) {
          var source = sources[index2];
          if (source) {
            assigner(object, source, index2, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// ../node_modules/lodash/merge.js
var require_merge = __commonJS({
  "../node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge2;
  }
});

// ../node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "../node_modules/lodash/_baseSet.js"(exports, module) {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path2, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path2 = castPath(path2, object);
      var index2 = -1, length = path2.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index2 < length) {
        var key = toKey(path2[index2]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index2 != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject(objValue) ? objValue : isIndex(path2[index2 + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  }
});

// ../node_modules/lodash/set.js
var require_set = __commonJS({
  "../node_modules/lodash/set.js"(exports, module) {
    var baseSet = require_baseSet();
    function set2(object, path2, value) {
      return object == null ? object : baseSet(object, path2, value);
    }
    module.exports = set2;
  }
});

// ../node_modules/lodash/isString.js
var require_isString = __commonJS({
  "../node_modules/lodash/isString.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var stringTag = "[object String]";
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    module.exports = isString;
  }
});

// ../node_modules/lodash/last.js
var require_last = __commonJS({
  "../node_modules/lodash/last.js"(exports, module) {
    function last(array2) {
      var length = array2 == null ? 0 : array2.length;
      return length ? array2[length - 1] : void 0;
    }
    module.exports = last;
  }
});

// ../node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "../node_modules/lodash/_baseFindIndex.js"(exports, module) {
    function baseFindIndex(array2, predicate, fromIndex, fromRight) {
      var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return index2;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// ../node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "../node_modules/lodash/_baseIsNaN.js"(exports, module) {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  }
});

// ../node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "../node_modules/lodash/_strictIndexOf.js"(exports, module) {
    function strictIndexOf(array2, value, fromIndex) {
      var index2 = fromIndex - 1, length = array2.length;
      while (++index2 < length) {
        if (array2[index2] === value) {
          return index2;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  }
});

// ../node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "../node_modules/lodash/_baseIndexOf.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array2, value, fromIndex) {
      return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  }
});

// ../node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "../node_modules/lodash/_arrayIncludes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array2, value) {
      var length = array2 == null ? 0 : array2.length;
      return !!length && baseIndexOf(array2, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  }
});

// ../node_modules/lodash/_arrayIncludesWith.js
var require_arrayIncludesWith = __commonJS({
  "../node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
    function arrayIncludesWith(array2, value, comparator) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (comparator(value, array2[index2])) {
          return true;
        }
      }
      return false;
    }
    module.exports = arrayIncludesWith;
  }
});

// ../node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "../node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array2, values, iteratee, comparator) {
      var index2 = -1, includes = arrayIncludes, isCommon = true, length = array2.length, result = [], valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
        while (++index2 < length) {
          var value = array2[index2], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// ../node_modules/lodash/without.js
var require_without = __commonJS({
  "../node_modules/lodash/without.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var without = baseRest(function(array2, values) {
      return isArrayLikeObject(array2) ? baseDifference(array2, values) : [];
    });
    module.exports = without;
  }
});

// ../node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "../node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual3(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual3;
  }
});

// ../node_modules/lodash/_basePickBy.js
var require_basePickBy = __commonJS({
  "../node_modules/lodash/_basePickBy.js"(exports, module) {
    var baseGet = require_baseGet();
    var baseSet = require_baseSet();
    var castPath = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index2 = -1, length = paths.length, result = {};
      while (++index2 < length) {
        var path2 = paths[index2], value = baseGet(object, path2);
        if (predicate(value, path2)) {
          baseSet(result, castPath(path2, object), value);
        }
      }
      return result;
    }
    module.exports = basePickBy;
  }
});

// ../node_modules/lodash/_basePick.js
var require_basePick = __commonJS({
  "../node_modules/lodash/_basePick.js"(exports, module) {
    var basePickBy = require_basePickBy();
    var hasIn = require_hasIn();
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path2) {
        return hasIn(object, path2);
      });
    }
    module.exports = basePick;
  }
});

// ../node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "../node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol2 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// ../node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "../node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array2, depth, predicate, isStrict, result) {
      var index2 = -1, length = array2.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index2 < length) {
        var value = array2[index2];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// ../node_modules/lodash/flatten.js
var require_flatten = __commonJS({
  "../node_modules/lodash/flatten.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    function flatten(array2) {
      var length = array2 == null ? 0 : array2.length;
      return length ? baseFlatten(array2, 1) : [];
    }
    module.exports = flatten;
  }
});

// ../node_modules/lodash/_flatRest.js
var require_flatRest = __commonJS({
  "../node_modules/lodash/_flatRest.js"(exports, module) {
    var flatten = require_flatten();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function flatRest(func) {
      return setToString(overRest(func, void 0, flatten), func + "");
    }
    module.exports = flatRest;
  }
});

// ../node_modules/lodash/pick.js
var require_pick = __commonJS({
  "../node_modules/lodash/pick.js"(exports, module) {
    var basePick = require_basePick();
    var flatRest = require_flatRest();
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    module.exports = pick;
  }
});

// ../node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_react9 = __toESM(require_react());

// ../node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
var updateQueue = makeQueue();
var raf = (fn) => schedule(fn, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn) => schedule(fn, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn) => schedule(fn, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn) => schedule(fn, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn) => schedule(fn, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  let time2 = raf.now() + ms;
  let cancel = () => {
    let i3 = timeouts.findIndex((t6) => t6.cancel == cancel);
    if (~i3)
      timeouts.splice(i3, 1);
    pendingCount -= ~i3 ? 1 : 0;
  };
  let timeout = {
    time: time2,
    handler,
    cancel
  };
  timeouts.splice(findTimeout(time2), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time2) => ~(~timeouts.findIndex((t6) => t6.time > time2) || ~timeouts.length);
raf.cancel = (fn) => {
  onStartQueue.delete(fn);
  onFrameQueue.delete(fn);
  updateQueue.delete(fn);
  writeQueue.delete(fn);
  onFinishQueue.delete(fn);
};
raf.sync = (fn) => {
  sync = true;
  raf.batchedUpdates(fn);
  sync = false;
};
raf.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
};
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn) => fn();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn, queue) {
  if (sync) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  let prevTs = ts;
  ts = raf.now();
  let count2 = findTimeout(ts);
  if (count2) {
    eachSafely(timeouts.splice(0, count2), (t6) => t6.handler());
    pendingCount -= count2;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
  if (!pendingCount) {
    stop();
  }
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn) {
      pendingCount += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      pendingCount -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn) => fn(arg) && next.add(fn));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each3) {
  values.forEach((value) => {
    try {
      each3(value);
    } catch (e4) {
      raf.catch(e4);
    }
  });
}

// ../node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
var React = __toESM(require_react());
var import_react = __toESM(require_react());
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, {
  value,
  writable: true,
  configurable: true
});
var is = {
  arr: Array.isArray,
  obj: (a3) => !!a3 && a3.constructor.name === "Object",
  fun: (a3) => typeof a3 === "function",
  str: (a3) => typeof a3 === "string",
  num: (a3) => typeof a3 === "number",
  und: (a3) => a3 === void 0
};
function isEqual(a3, b3) {
  if (is.arr(a3)) {
    if (!is.arr(b3) || a3.length !== b3.length)
      return false;
    for (let i3 = 0; i3 < a3.length; i3++) {
      if (a3[i3] !== b3[i3])
        return false;
    }
    return true;
  }
  return a3 === b3;
}
var each = (obj, fn) => obj.forEach(fn);
function eachProp(obj, fn, ctx3) {
  if (is.arr(obj)) {
    for (let i3 = 0; i3 < obj.length; i3++) {
      fn.call(ctx3, obj[i3], `${i3}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn.call(ctx3, obj[key], key);
    }
  }
}
var toArray = (a3) => is.und(a3) ? [] : is.arr(a3) ? a3 : [a3];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator$1;
var to;
var colors$1 = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals3) => {
  if (globals3.to)
    to = globals3.to;
  if (globals3.now)
    raf.now = globals3.now;
  if (globals3.colors !== void 0)
    colors$1 = globals3.colors;
  if (globals3.skipAnimation != null)
    skipAnimation = globals3.skipAnimation;
  if (globals3.createStringInterpolator)
    createStringInterpolator$1 = globals3.createStringInterpolator;
  if (globals3.requestAnimationFrame)
    raf.use(globals3.requestAnimationFrame);
  if (globals3.batchedUpdates)
    raf.batchedUpdates = globals3.batchedUpdates;
  if (globals3.willAdvance)
    willAdvance = globals3.willAdvance;
  if (globals3.frameLoop)
    raf.frameLoop = globals3.frameLoop;
};
var globals = Object.freeze({
  __proto__: null,
  get createStringInterpolator() {
    return createStringInterpolator$1;
  },
  get to() {
    return to;
  },
  get colors() {
    return colors$1;
  },
  get skipAnimation() {
    return skipAnimation;
  },
  get willAdvance() {
    return willAdvance;
  },
  assign
});
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  advance,
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i3 = 0; i3 < currentFrame.length; i3++) {
    const animation = currentFrame[i3];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index2 = arr.findIndex(test);
  return index2 < 0 ? arr.length : index2;
}
var colors = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color3) {
  let match;
  if (typeof color3 === "number") {
    return color3 >>> 0 === color3 && color3 >= 0 && color3 <= 4294967295 ? color3 : null;
  }
  if (match = hex6.exec(color3))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors$1 && colors$1[color3] !== void 0) {
    return colors$1[color3];
  }
  if (match = rgb.exec(color3)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
  }
  if (match = rgba.exec(color3)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }
  if (match = hex3.exec(color3)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
  }
  if (match = hex8.exec(color3))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color3)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }
  if (match = hsl.exec(color3)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
  }
  if (match = hsla.exec(color3)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }
  return null;
}
function hue2rgb(p2, q, t6) {
  if (t6 < 0)
    t6 += 1;
  if (t6 > 1)
    t6 -= 1;
  if (t6 < 1 / 6)
    return p2 + (q - p2) * 6 * t6;
  if (t6 < 1 / 2)
    return q;
  if (t6 < 2 / 3)
    return p2 + (q - p2) * (2 / 3 - t6) * 6;
  return p2;
}
function hslToRgb(h2, s3, l3) {
  const q = l3 < 0.5 ? l3 * (1 + s3) : l3 + s3 - l3 * s3;
  const p2 = 2 * l3 - q;
  const r4 = hue2rgb(p2, q, h2 + 1 / 3);
  const g2 = hue2rgb(p2, q, h2);
  const b3 = hue2rgb(p2, q, h2 - 1 / 3);
  return Math.round(r4 * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b3 * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  let r4 = (int32Color & 4278190080) >>> 24;
  let g2 = (int32Color & 16711680) >>> 16;
  let b3 = (int32Color & 65280) >>> 8;
  let a3 = (int32Color & 255) / 255;
  return `rgba(${r4}, ${g2}, ${b3}, ${a3})`;
}
var createInterpolator = (range, output, extrapolate) => {
  if (is.fun(range)) {
    return range;
  }
  if (is.arr(range)) {
    return createInterpolator({
      range,
      output,
      extrapolate
    });
  }
  if (is.str(range.output[0])) {
    return createStringInterpolator$1(range);
  }
  const config3 = range;
  const outputRange = config3.output;
  const inputRange = config3.range || [0, 1];
  const extrapolateLeft = config3.extrapolateLeft || config3.extrapolate || "extend";
  const extrapolateRight = config3.extrapolateRight || config3.extrapolate || "extend";
  const easing = config3.easing || ((t6) => t6);
  return (input) => {
    const range2 = findRange(input, inputRange);
    return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config3.map);
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map4) {
  let result = map4 ? map4(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i3 = 1; i3 < inputRange.length - 1; ++i3)
    if (inputRange[i3] >= input)
      break;
  return i3 - 1;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer, event) {
  if (observer.eventObserved) {
    observer.eventObserved(event);
  } else {
    observer(event);
  }
}
function callFluidObservers(target, event) {
  let observers = target[$observers];
  if (observers) {
    observers.forEach((observer) => {
      callFluidObserver(observer, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    this[$get] = void 0;
    this[$observers] = void 0;
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer)) {
      observers.add(observer);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer);
      }
    }
  }
  return observer;
}
function removeFluidObserver(target, observer) {
  let observers = target[$observers];
  if (observers && observers.has(observer)) {
    const count2 = observers.size - 1;
    if (count2) {
      observers.delete(observer);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count2, observer);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value) {
    return value.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const _value = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (_value) {
      return _value;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
var createStringInterpolator = (config3) => {
  if (!namedColorRegex)
    namedColorRegex = colors$1 ? new RegExp(`(${Object.keys(colors$1).join("|")})(?!\\w)`, "g") : /^\b$/;
  const output = config3.output.map((value) => {
    return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map((_, i3) => keyframes.map((values) => {
    if (!(i3 in values)) {
      throw Error('The arity of each "output" value must be equal');
    }
    return values[i3];
  }));
  const interpolators = outputRanges.map((output2) => createInterpolator(_extends({}, config3, {
    output: output2
  })));
  return (input) => {
    var _output$find;
    const missingUnit = !unitRegex.test(output[0]) && ((_output$find = output.find((value) => unitRegex.test(value))) == null ? void 0 : _output$find.replace(numberRegex, ""));
    let i3 = 0;
    return output[0].replace(numberRegex, () => `${interpolators[i3++](input)}${missingUnit || ""}`).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(`${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`);
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(`${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || !isSSR() && cssVariableRegex.test(value) || value in (colors$1 || {}));
}
var useLayoutEffect2 = typeof window !== "undefined" && window.document && window.document.createElement ? React.useLayoutEffect : React.useEffect;
var useIsMounted = () => {
  const isMounted = (0, import_react.useRef)(false);
  useLayoutEffect2(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update5 = (0, import_react.useState)()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update5(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react.useState)(() => ({
    inputs,
    result: getResult()
  }));
  const committed = (0, import_react.useRef)();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  (0, import_react.useEffect)(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i3 = 0; i3 < next.length; i3++) {
    if (next[i3] !== prev[i3]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect) => (0, import_react.useEffect)(effect, emptyDeps);
var emptyDeps = [];
function usePrev(value) {
  const prevRef = (0, import_react.useRef)();
  (0, import_react.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}

// ../node_modules/@react-spring/core/dist/react-spring-core.esm.js
var React3 = __toESM(require_react());
var import_react3 = __toESM(require_react());

// ../node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
var React2 = __toESM(require_react());
var import_react2 = __toESM(require_react());
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    this.payload = void 0;
    setAnimated(this, this);
  }
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class _AnimatedValue extends Animated {
  constructor(_value) {
    super();
    this.done = true;
    this.elapsedTime = void 0;
    this.lastPosition = void 0;
    this.lastVelocity = void 0;
    this.v0 = void 0;
    this.durationProgress = 0;
    this._value = _value;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  static create(value) {
    return new _AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const {
      done
    } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class _AnimatedString extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = void 0;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  static create(value) {
    return new _AnimatedString(value);
  }
  getValue() {
    let value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = {
  dependencies: null
};
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated3) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated3);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated3) {
        values[key] = source;
      }
    });
    return values;
  }
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class _AnimatedArray extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  static create(source) {
    return new _AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i3) => node.setValue(source[i3])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var withAnimated = (Component, host3) => {
  const hasInstance = !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
  return (0, import_react2.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react2.useRef)(null);
    const ref = hasInstance && (0, import_react2.useCallback)((value) => {
      instanceRef.current = updateRef(givenRef, value);
    }, [givenRef]);
    const [props, deps] = getAnimatedState(givenProps, host3);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host3.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react2.useRef)();
    useLayoutEffect2(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(observerRef.current.deps, (dep) => removeFluidObserver(dep, observerRef.current));
          raf.cancel(observerRef.current.update);
        }
      };
    });
    (0, import_react2.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host3.getComponentProps(props.getValue());
    return React2.createElement(Component, _extends2({}, usedProps, {
      ref
    }));
  });
};
var PropsObserver = class {
  constructor(update5, deps) {
    this.update = update5;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host3) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = _extends2({}, props, {
      style: host3.createAnimatedStyle(props.style)
    });
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: _applyAnimatedValues = () => false,
  createAnimatedStyle: _createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps: _getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: _applyAnimatedValues,
    createAnimatedStyle: _createAnimatedStyle,
    getComponentProps: _getComponentProps
  };
  const animated3 = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated3[Component] || (animated3[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp(components, (Component, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component);
    }
    animated3[key] = animated3(Component);
  });
  return {
    animated: animated3
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// ../node_modules/@react-spring/core/dist/react-spring-core.esm.js
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults3 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults3[key] = value;
    }
  }
  return defaults3;
};
var DEFAULT_PROPS = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count2 = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count2++;
    }
  });
  if (count2) {
    return forward;
  }
}
function inferTo(props) {
  const to5 = getForwardProps(props);
  if (to5) {
    const out = {
      to: to5
    };
    eachProp(props, (val, key) => key in to5 || (out[key] = val));
    return out;
  }
  return _extends3({}, props);
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _ in props)
    return true;
  return false;
}
function isAsyncTo(to5) {
  return is.fun(to5) || is.arr(to5) && is.obj(to5[0]);
}
function detachRefs(ctrl, ref) {
  var _ctrl$ref;
  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  if (ref && ctrl.ref !== ref) {
    var _ctrl$ref2;
    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x4) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x4 < 1 / d1) {
    return n1 * x4 * x4;
  } else if (x4 < 2 / d1) {
    return n1 * (x4 -= 1.5 / d1) * x4 + 0.75;
  } else if (x4 < 2.5 / d1) {
    return n1 * (x4 -= 2.25 / d1) * x4 + 0.9375;
  } else {
    return n1 * (x4 -= 2.625 / d1) * x4 + 0.984375;
  }
};
var easings = {
  linear: (x4) => x4,
  easeInQuad: (x4) => x4 * x4,
  easeOutQuad: (x4) => 1 - (1 - x4) * (1 - x4),
  easeInOutQuad: (x4) => x4 < 0.5 ? 2 * x4 * x4 : 1 - Math.pow(-2 * x4 + 2, 2) / 2,
  easeInCubic: (x4) => x4 * x4 * x4,
  easeOutCubic: (x4) => 1 - Math.pow(1 - x4, 3),
  easeInOutCubic: (x4) => x4 < 0.5 ? 4 * x4 * x4 * x4 : 1 - Math.pow(-2 * x4 + 2, 3) / 2,
  easeInQuart: (x4) => x4 * x4 * x4 * x4,
  easeOutQuart: (x4) => 1 - Math.pow(1 - x4, 4),
  easeInOutQuart: (x4) => x4 < 0.5 ? 8 * x4 * x4 * x4 * x4 : 1 - Math.pow(-2 * x4 + 2, 4) / 2,
  easeInQuint: (x4) => x4 * x4 * x4 * x4 * x4,
  easeOutQuint: (x4) => 1 - Math.pow(1 - x4, 5),
  easeInOutQuint: (x4) => x4 < 0.5 ? 16 * x4 * x4 * x4 * x4 * x4 : 1 - Math.pow(-2 * x4 + 2, 5) / 2,
  easeInSine: (x4) => 1 - Math.cos(x4 * Math.PI / 2),
  easeOutSine: (x4) => Math.sin(x4 * Math.PI / 2),
  easeInOutSine: (x4) => -(Math.cos(Math.PI * x4) - 1) / 2,
  easeInExpo: (x4) => x4 === 0 ? 0 : Math.pow(2, 10 * x4 - 10),
  easeOutExpo: (x4) => x4 === 1 ? 1 : 1 - Math.pow(2, -10 * x4),
  easeInOutExpo: (x4) => x4 === 0 ? 0 : x4 === 1 ? 1 : x4 < 0.5 ? Math.pow(2, 20 * x4 - 10) / 2 : (2 - Math.pow(2, -20 * x4 + 10)) / 2,
  easeInCirc: (x4) => 1 - Math.sqrt(1 - Math.pow(x4, 2)),
  easeOutCirc: (x4) => Math.sqrt(1 - Math.pow(x4 - 1, 2)),
  easeInOutCirc: (x4) => x4 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x4, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x4 + 2, 2)) + 1) / 2,
  easeInBack: (x4) => c3 * x4 * x4 * x4 - c1 * x4 * x4,
  easeOutBack: (x4) => 1 + c3 * Math.pow(x4 - 1, 3) + c1 * Math.pow(x4 - 1, 2),
  easeInOutBack: (x4) => x4 < 0.5 ? Math.pow(2 * x4, 2) * ((c2 + 1) * 2 * x4 - c2) / 2 : (Math.pow(2 * x4 - 2, 2) * ((c2 + 1) * (x4 * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x4) => x4 === 0 ? 0 : x4 === 1 ? 1 : -Math.pow(2, 10 * x4 - 10) * Math.sin((x4 * 10 - 10.75) * c4),
  easeOutElastic: (x4) => x4 === 0 ? 0 : x4 === 1 ? 1 : Math.pow(2, -10 * x4) * Math.sin((x4 * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x4) => x4 === 0 ? 0 : x4 === 1 ? 1 : x4 < 0.5 ? -(Math.pow(2, 20 * x4 - 10) * Math.sin((20 * x4 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x4 + 10) * Math.sin((20 * x4 - 11.125) * c5) / 2 + 1,
  easeInBounce: (x4) => 1 - bounceOut(1 - x4),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x4) => x4 < 0.5 ? (1 - bounceOut(1 - 2 * x4)) / 2 : (1 + bounceOut(2 * x4 - 1)) / 2
};
var defaults = _extends3({}, config.default, {
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
});
var AnimationConfig = class {
  constructor() {
    this.tension = void 0;
    this.friction = void 0;
    this.frequency = void 0;
    this.damping = void 0;
    this.mass = void 0;
    this.velocity = 0;
    this.restVelocity = void 0;
    this.precision = void 0;
    this.progress = void 0;
    this.duration = void 0;
    this.easing = void 0;
    this.clamp = void 0;
    this.bounce = void 0;
    this.decay = void 0;
    this.round = void 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config3, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = _extends3({}, defaultConfig);
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = _extends3({}, defaultConfig, newConfig);
  }
  sanitizeConfig(config3, newConfig);
  Object.assign(config3, newConfig);
  for (const key in defaults) {
    if (config3[key] == null) {
      config3[key] = defaults[key];
    }
  }
  let {
    mass,
    frequency,
    damping
  } = config3;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config3.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config3.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config3;
}
function sanitizeConfig(config3, props) {
  if (!is.und(props.decay)) {
    config3.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config3.duration = void 0;
      config3.decay = void 0;
    }
    if (isTensionConfig) {
      config3.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.to = void 0;
    this.from = void 0;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, {
  key,
  props,
  defaultProps,
  state,
  actions
}) {
  return new Promise((resolve, reject) => {
    var _props$cancel;
    let delay;
    let timeout;
    let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps == null ? void 0 : defaultProps.cancel, key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps == null ? void 0 : defaultProps.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start(_extends3({}, props, {
          callId,
          cancel
        }), resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished));
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to5, props, state, target) {
  const {
    callId,
    parentId,
    onRest
  } = props;
  const {
    asyncTo: prevTo,
    promise: prevPromise
  } = state;
  if (!parentId && to5 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to5;
    const defaultProps = getDefaultProps(props, (value, key) => key === "onRest" ? void 0 : value);
    let preventBail;
    let bail;
    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
    const bailIfEnded = (bailSignal) => {
      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAniamtionSignal();
      return (async () => {
        if (globals.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? _extends3({}, arg1) : _extends3({}, arg2, {
          to: arg1
        });
        props2.parentId = callId;
        eachProp(defaultProps, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to5)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to5);
      } else {
        animating = Promise.resolve(to5(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAniamtionSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t6) => t6.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
    this.result = void 0;
  }
};
var SkipAniamtionSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
    this.result = void 0;
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId$1 = 1;
var FrameValue = class extends FluidValue {
  constructor(...args) {
    super(...args);
    this.id = nextId$1++;
    this.key = void 0;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority3) {
    if (this._priority != priority3) {
      this._priority = priority3;
      this._onPriorityChange(priority3);
    }
  }
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  to(...args) {
    return globals.to(this, args);
  }
  interpolate(...args) {
    deprecateInterpolate();
    return globals.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count2) {
    if (count2 == 1)
      this._attach();
  }
  observerRemoved(count2) {
    if (count2 == 0)
      this._detach();
  }
  _attach() {
  }
  _detach() {
  }
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  _onPriorityChange(priority3) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority3
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.key = void 0;
    this.animation = new Animation();
    this.queue = void 0;
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? _extends3({}, arg1) : _extends3({}, arg2, {
        from: arg1
      });
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  get hasAnimated() {
    return hasAnimated(this);
  }
  get isAnimating() {
    return isAnimating(this);
  }
  get isPaused() {
    return isPaused(this);
  }
  get isDelayed() {
    return this._state.delayed;
  }
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let {
      config: config3,
      toValues
    } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i3) => {
      if (node2.done)
        return;
      const to5 = node2.constructor == AnimatedString ? 1 : payload ? payload[i3].lastPosition : toValues[i3];
      let finished = anim.immediate;
      let position = to5;
      if (!finished) {
        position = node2.lastPosition;
        if (config3.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i3];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config3.velocity) ? config3.velocity[i3] : config3.velocity;
        let velocity;
        if (!is.und(config3.duration)) {
          let p2 = 1;
          if (config3.duration > 0) {
            if (this._memoizedDuration !== config3.duration) {
              this._memoizedDuration = config3.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config3.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p2 = (config3.progress || 0) + elapsed / this._memoizedDuration;
            p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
            node2.durationProgress = p2;
          }
          position = from + config3.easing(p2) * (to5 - from);
          velocity = (position - node2.lastPosition) / dt;
          finished = p2 == 1;
        } else if (config3.decay) {
          const decay = config3.decay === true ? 0.998 : config3.decay;
          const e4 = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e4);
          finished = Math.abs(node2.lastPosition - position) < 0.1;
          velocity = v0 * e4;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const precision = config3.precision || (from == to5 ? 5e-3 : Math.min(1, Math.abs(to5 - from) * 1e-3));
          const restVelocity = config3.restVelocity || precision / 10;
          const bounceFactor = config3.clamp ? 0 : config3.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to5 ? node2.v0 > 0 : from < to5;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n3 = 0; n3 < numSteps; ++n3) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to5 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to5 || position > to5 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to5;
              }
            }
            const springForce = -config3.tension * 1e-6 * (position - to5);
            const dampingForce = -config3.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config3.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i3].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config3.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config3.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config3.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  pause() {
    this._update({
      pause: true
    });
  }
  resume() {
    this._update({
      pause: false
    });
  }
  finish() {
    if (isAnimating(this)) {
      const {
        to: to5,
        config: config3
      } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config3.decay) {
          this._set(to5, false);
        }
        this._stop();
      });
    }
    return this;
  }
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to5, arg2) {
    let queue;
    if (!is.und(to5)) {
      queue = [is.obj(to5) ? to5 : _extends3({}, arg2, {
        to: to5
      })];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(queue.map((props) => {
      const up = this._update(props);
      return up;
    })).then((results) => getCombinedResult(this, results));
  }
  stop(cancel) {
    const {
      to: to5
    } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to5, cancel));
    return this;
  }
  reset() {
    this._update({
      reset: true
    });
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  _prepareNode(props) {
    const key = this.key || "";
    let {
      to: to5,
      from
    } = props;
    to5 = is.obj(to5) ? to5[key] : to5;
    if (to5 == null || isAsyncTo(to5)) {
      to5 = void 0;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range = {
      to: to5,
      from
    };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to5, from] = [from, to5];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to5);
      }
    }
    return range;
  }
  _update(_ref, isLoop) {
    let props = _extends3({}, _ref);
    const {
      key,
      defaultProps
    } = this;
    if (props.default)
      Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(this, "onPause", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(this, "onResume", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        start: this._merge.bind(this, range)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  _merge(range, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range.to);
    const hasFromProp = !is.und(range.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const {
      key,
      defaultProps,
      animation: anim
    } = this;
    const {
      to: prevTo,
      from: prevFrom
    } = anim;
    let {
      to: to5 = prevTo,
      from = prevFrom
    } = range;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to5))) {
      to5 = from;
    }
    if (props.reverse)
      [to5, from] = [from, to5];
    const hasFromChanged = !isEqual(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual(to5, prevTo);
    if (hasToChanged) {
      this._focus(to5);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const {
      config: config3
    } = anim;
    const {
      decay,
      velocity
    } = config3;
    if (hasToProp || hasFromProp) {
      config3.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(config3, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);
    }
    let node = getAnimated(this);
    if (!node || is.und(to5)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);
    const value = reset ? from : this.get();
    const goal = computeGoal(to5);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to5);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to5);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config3.decay, decay) || !isEqual(config3.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to5) ? null : goalType == AnimatedString ? [1] : toArray(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const {
          onRest
        } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps.onRest, result);
            } else {
              anim.onStart == null ? void 0 : anim.onStart(result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority3 = 0;
    const {
      to: to5
    } = this.animation;
    if (hasFluidValue(to5)) {
      addFluidObserver(to5, this);
      if (isFrameValue(to5)) {
        priority3 = to5.priority + 1;
      }
    }
    this.priority = priority3;
  }
  _detach() {
    const {
      to: to5
    } = this.animation;
    if (hasFluidValue(to5)) {
      removeFluidObserver(to5, this);
    }
  }
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to5) {
  const goal = computeGoal(to5);
  const value = computeGoal(target.get());
  return isEqual(value, goal);
}
function createLoopUpdate(props, loop3 = props.loop, to5 = props.to) {
  let loopRet = callProp(loop3);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse2 = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate(_extends3({}, props, {
      loop: loop3,
      default: false,
      pause: void 0,
      to: !reverse2 || isAsyncTo(to5) ? to5 : void 0,
      from: reset ? props.from : void 0,
      reset
    }, overrides));
  }
}
function createUpdate(props) {
  const {
    to: to5,
    from
  } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set();
  if (is.obj(to5))
    findDefined(to5, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update5 = createUpdate(props);
  if (is.und(update5.default)) {
    update5.default = getDefaultProps(update5);
  }
  return update5;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = ["onStart", "onRest", "onChange", "onPause", "onResume"];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
  (_target$animation$typ = (_target$animation = target.animation)[type]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);
  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId = 1;
var Controller = class {
  constructor(props, flush3) {
    this.id = nextId++;
    this.springs = {};
    this.queue = [];
    this.ref = void 0;
    this._flush = void 0;
    this._initialProps = void 0;
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._item = void 0;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush3) {
      this._flush = flush3;
    }
    if (props) {
      this.start(_extends3({
        default: true
      }, props));
    }
  }
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  start(props) {
    let {
      queue
    } = this;
    if (props) {
      queue = toArray(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  pause(keys) {
    if (is.und(keys)) {
      this.start({
        pause: true
      });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].pause());
    }
    return this;
  }
  resume(keys) {
    if (is.und(keys)) {
      this.start({
        pause: false
      });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].resume());
    }
    return this;
  }
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  _onFrame() {
    const {
      onStart,
      onChange,
      onRest
    } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));
}
async function flushUpdate(ctrl, props, isLoop) {
  const {
    keys,
    to: to5,
    from,
    loop: loop3,
    onRest,
    onResolve
  } = props;
  const defaults3 = is.obj(props.default) && props.default;
  if (loop3) {
    props.loop = false;
  }
  if (to5 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to5) || is.fun(to5) ? to5 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults3) {
      defaults3.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({
          finished,
          cancelled
        }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults3) {
          defaults3[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
      props,
      state,
      actions: {
        pause: noop,
        resume: noop,
        start(props2, resolve) {
          if (cancel) {
            stopAsync(state, ctrl["_lastAsyncId"]);
            resolve(getCancelledResult(ctrl));
          } else {
            props2.onRest = onRest;
            resolve(runAsync(asyncTo, props2, state, ctrl));
          }
        }
      }
    }));
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop3 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop3, to5);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = _extends3({}, ctrl.springs);
  if (props) {
    each(toArray(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = _extends3({}, props2, {
          to: void 0
        });
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue();
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key = sourceKeys[i3];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["children"];
var SpringContext = (_ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$3);
  const inherited = (0, import_react3.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({
    pause,
    immediate
  }), [pause, immediate]);
  const {
    Provider
  } = ctx;
  return React3.createElement(Provider, {
    value: props
  }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React3.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef3 = function SpringRef4(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i3) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update5 = _getProps(props, ctrl, i3);
        if (update5) {
          results.push(ctrl.start(update5));
        }
      }
    });
    return results;
  };
  SpringRef3.current = current;
  SpringRef3.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef3.delete = function(ctrl) {
    const i3 = current.indexOf(ctrl);
    if (~i3)
      current.splice(i3, 1);
  };
  SpringRef3.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef3.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef3.set = function(values) {
    each(current, (ctrl) => ctrl.set(values));
  };
  SpringRef3.start = function(props) {
    const results = [];
    each(current, (ctrl, i3) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update5 = this._getProps(props, ctrl, i3);
        if (update5) {
          results.push(ctrl.start(update5));
        }
      }
    });
    return results;
  };
  SpringRef3.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef3.update = function(props) {
    each(current, (ctrl, i3) => ctrl.update(this._getProps(props, ctrl, i3)));
    return this;
  };
  const _getProps = function _getProps2(arg, ctrl, index2) {
    return is.fun(arg) ? arg(index2, ctrl) : arg;
  };
  SpringRef3._getProps = _getProps;
  return SpringRef3;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react3.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const layoutId = (0, import_react3.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react3.useMemo)(() => ({
    ctrls: [],
    queue: [],
    flush(ctrl, updates2) {
      const springs2 = getSprings(ctrl, updates2);
      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
        setSprings(ctrl, springs2);
        state.queue.push(() => {
          resolve(flushUpdateQueue(ctrl, updates2));
        });
        forceUpdate();
      });
    }
  }), []);
  const ctrls = (0, import_react3.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  (0, import_react3.useMemo)(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react3.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i3 = startIndex; i3 < endIndex; i3++) {
      const ctrl = ctrls.current[i3] || (ctrls.current[i3] = new Controller(null, state.flush));
      const update5 = propsFn ? propsFn(i3, ctrl) : props[i3];
      if (update5) {
        updates[i3] = declareUpdate(update5);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i3) => getSprings(ctrl, updates[i3]));
  const context = (0, import_react3.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useLayoutEffect2(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const {
      queue
    } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i3) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({
          default: context
        });
      }
      const update5 = updates[i3];
      if (update5) {
        replaceRef(ctrl, update5.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update5);
        } else {
          ctrl.start(update5);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x4) => _extends3({}, x4));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
var TransitionPhase;
(function(TransitionPhase3) {
  TransitionPhase3["MOUNT"] = "mount";
  TransitionPhase3["ENTER"] = "enter";
  TransitionPhase3["UPDATE"] = "update";
  TransitionPhase3["LEAVE"] = "leave";
})(TransitionPhase || (TransitionPhase = {}));
function useTransition(data, props, deps) {
  const propsFn = is.fun(props) && props;
  const {
    reset,
    sort: sort2,
    trail = 0,
    expires = true,
    exitBeforeEnter = false,
    onDestroyed,
    ref: propsRef,
    config: propsConfig
  } = propsFn ? propsFn() : props;
  const ref = (0, import_react3.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const items = toArray(data);
  const transitions = [];
  const usedTransitions = (0, import_react3.useRef)(null);
  const prevTransitions = reset ? null : usedTransitions.current;
  useLayoutEffect2(() => {
    usedTransitions.current = transitions;
  });
  useOnce(() => {
    each(usedTransitions.current, (t6) => {
      var _t$ctrl$ref;
      (_t$ctrl$ref = t6.ctrl.ref) == null ? void 0 : _t$ctrl$ref.add(t6.ctrl);
      const change = changes.get(t6);
      if (change) {
        t6.ctrl.start(change.payload);
      }
    });
    return () => {
      each(usedTransitions.current, (t6) => {
        if (t6.expired) {
          clearTimeout(t6.expirationId);
        }
        detachRefs(t6.ctrl, ref);
        t6.ctrl.stop(true);
      });
    };
  });
  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
  const expired = reset && usedTransitions.current || [];
  useLayoutEffect2(() => each(expired, ({
    ctrl,
    item,
    key
  }) => {
    detachRefs(ctrl, ref);
    callProp(onDestroyed, item, key);
  }));
  const reused = [];
  if (prevTransitions)
    each(prevTransitions, (t6, i3) => {
      if (t6.expired) {
        clearTimeout(t6.expirationId);
        expired.push(t6);
      } else {
        i3 = reused[i3] = keys.indexOf(t6.key);
        if (~i3)
          transitions[i3] = t6;
      }
    });
  each(items, (item, i3) => {
    if (!transitions[i3]) {
      transitions[i3] = {
        key: keys[i3],
        item,
        phase: TransitionPhase.MOUNT,
        ctrl: new Controller()
      };
      transitions[i3].ctrl.item = item;
    }
  });
  if (reused.length) {
    let i3 = -1;
    const {
      leave
    } = propsFn ? propsFn() : props;
    each(reused, (keyIndex, prevIndex) => {
      const t6 = prevTransitions[prevIndex];
      if (~keyIndex) {
        i3 = transitions.indexOf(t6);
        transitions[i3] = _extends3({}, t6, {
          item: items[keyIndex]
        });
      } else if (leave) {
        transitions.splice(++i3, 0, t6);
      }
    });
  }
  if (is.fun(sort2)) {
    transitions.sort((a3, b3) => sort2(a3.item, b3.item));
  }
  let delay = -trail;
  const forceUpdate = useForceUpdate();
  const defaultProps = getDefaultProps(props);
  const changes = /* @__PURE__ */ new Map();
  const exitingTransitions = (0, import_react3.useRef)(/* @__PURE__ */ new Map());
  const forceChange = (0, import_react3.useRef)(false);
  each(transitions, (t6, i3) => {
    const key = t6.key;
    const prevPhase = t6.phase;
    const p2 = propsFn ? propsFn() : props;
    let to5;
    let phase;
    let propsDelay = callProp(p2.delay || 0, key);
    if (prevPhase == TransitionPhase.MOUNT) {
      to5 = p2.enter;
      phase = TransitionPhase.ENTER;
    } else {
      const isLeave = keys.indexOf(key) < 0;
      if (prevPhase != TransitionPhase.LEAVE) {
        if (isLeave) {
          to5 = p2.leave;
          phase = TransitionPhase.LEAVE;
        } else if (to5 = p2.update) {
          phase = TransitionPhase.UPDATE;
        } else
          return;
      } else if (!isLeave) {
        to5 = p2.enter;
        phase = TransitionPhase.ENTER;
      } else
        return;
    }
    to5 = callProp(to5, t6.item, i3);
    to5 = is.obj(to5) ? inferTo(to5) : {
      to: to5
    };
    if (!to5.config) {
      const config3 = propsConfig || defaultProps.config;
      to5.config = callProp(config3, t6.item, i3, phase);
    }
    delay += trail;
    const payload = _extends3({}, defaultProps, {
      delay: propsDelay + delay,
      ref: propsRef,
      immediate: p2.immediate,
      reset: false
    }, to5);
    if (phase == TransitionPhase.ENTER && is.und(payload.from)) {
      const _p = propsFn ? propsFn() : props;
      const from = is.und(_p.initial) || prevTransitions ? _p.from : _p.initial;
      payload.from = callProp(from, t6.item, i3);
    }
    const {
      onResolve
    } = payload;
    payload.onResolve = (result) => {
      callProp(onResolve, result);
      const transitions2 = usedTransitions.current;
      const t7 = transitions2.find((t8) => t8.key === key);
      if (!t7)
        return;
      if (result.cancelled && t7.phase != TransitionPhase.UPDATE) {
        return;
      }
      if (t7.ctrl.idle) {
        const idle = transitions2.every((t8) => t8.ctrl.idle);
        if (t7.phase == TransitionPhase.LEAVE) {
          const expiry = callProp(expires, t7.item);
          if (expiry !== false) {
            const expiryMs = expiry === true ? 0 : expiry;
            t7.expired = true;
            if (!idle && expiryMs > 0) {
              if (expiryMs <= 2147483647)
                t7.expirationId = setTimeout(forceUpdate, expiryMs);
              return;
            }
          }
        }
        if (idle && transitions2.some((t8) => t8.expired)) {
          exitingTransitions.current.delete(t7);
          if (exitBeforeEnter) {
            forceChange.current = true;
          }
          forceUpdate();
        }
      }
    };
    const springs = getSprings(t6.ctrl, payload);
    if (phase === TransitionPhase.LEAVE && exitBeforeEnter) {
      exitingTransitions.current.set(t6, {
        phase,
        springs,
        payload
      });
    } else {
      changes.set(t6, {
        phase,
        springs,
        payload
      });
    }
  });
  const context = (0, import_react3.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useLayoutEffect2(() => {
    if (hasContext) {
      each(transitions, (t6) => {
        t6.ctrl.start({
          default: context
        });
      });
    }
  }, [context]);
  each(changes, (_, t6) => {
    if (exitingTransitions.current.size) {
      const ind = transitions.findIndex((state) => state.key === t6.key);
      transitions.splice(ind, 1);
    }
  });
  useLayoutEffect2(() => {
    each(exitingTransitions.current.size ? exitingTransitions.current : changes, ({
      phase,
      payload
    }, t6) => {
      const {
        ctrl
      } = t6;
      t6.phase = phase;
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext && phase == TransitionPhase.ENTER) {
        ctrl.start({
          default: context
        });
      }
      if (payload) {
        replaceRef(ctrl, payload.ref);
        if (ctrl.ref && !forceChange.current) {
          ctrl.update(payload);
        } else {
          ctrl.start(payload);
          if (forceChange.current) {
            forceChange.current = false;
          }
        }
      }
    });
  }, reset ? void 0 : deps);
  const renderTransitions = (render) => React3.createElement(React3.Fragment, null, transitions.map((t6, i3) => {
    const {
      springs
    } = changes.get(t6) || t6.ctrl;
    const elem = render(_extends3({}, springs), t6.item, t6, i3);
    return elem && elem.type ? React3.createElement(elem.type, _extends3({}, elem.props, {
      key: is.str(t6.key) || is.num(t6.key) ? t6.key : t6.ctrl.id,
      ref: elem.ref
    })) : elem;
  }));
  return ref ? [renderTransitions, ref] : renderTransitions;
}
var nextKey = 1;
function getKeys(items, {
  key,
  keys = key
}, prevTransitions) {
  if (keys === null) {
    const reused = /* @__PURE__ */ new Set();
    return items.map((item) => {
      const t6 = prevTransitions && prevTransitions.find((t7) => t7.item === item && t7.phase !== TransitionPhase.LEAVE && !reused.has(t7));
      if (t6) {
        reused.add(t6);
        return t6.key;
      }
      return nextKey++;
    });
  }
  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.key = void 0;
    this.idle = true;
    this.calc = void 0;
    this._active = /* @__PURE__ */ new Set();
    this.source = source;
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  _attach() {
    let priority3 = 1;
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority3 = Math.max(priority3, source.priority + 1);
      }
    });
    this.priority = priority3;
    this._start();
  }
  _detach() {
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self) {
  if (!self.idle) {
    self.idle = true;
    each(getPayload(self), (node) => {
      node.done = true;
    });
    callFluidObservers(self, {
      type: "idle",
      parent: self
    });
  }
}
var to2 = (source, ...args) => new Interpolation(source, args);
globals.assign({
  createStringInterpolator,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// ../node_modules/@react-spring/web/dist/react-spring-web.esm.js
var import_react_dom = __toESM(require_react_dom());
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key = sourceKeys[i3];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$2 = ["style", "children", "scrollTop", "scrollLeft"];
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const _ref = props, {
    style,
    children,
    scrollTop,
    scrollLeft
  } = _ref, attributes = _objectWithoutPropertiesLoose2(_ref, _excluded$2);
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n3) => "-" + n3.toLowerCase())));
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (let name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i3) => {
    instance.setAttribute(name, values[i3]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix3, key) => prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix3) => acc[prefixKey(prefix3, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var _excluded$1 = ["x", "y", "z"];
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit2) => is.num(value) && value !== 0 ? value + unit2 : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v3) => isValueIdentity(v3, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor(_ref) {
    let {
      x: x4,
      y: y4,
      z: z2
    } = _ref, style = _objectWithoutPropertiesLoose2(_ref, _excluded$1);
    const inputs = [];
    const transforms = [];
    if (x4 || y4 || z2) {
      inputs.push([x4 || 0, y4 || 0, z2 || 0]);
      transforms.push((xyz) => [`translate3d(${xyz.map((v3) => addUnit(v3, "px")).join(",")})`, isValueIdentity(xyz, 0)]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value))
          return;
        const unit2 = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(key === "rotate3d" ? ([x5, y5, z3, deg]) => [`rotate3d(${x5},${y5},${z3},${addUnit(deg, unit2)})`, isValueIdentity(deg, 0)] : (input) => [`${key}(${input.map((v3) => addUnit(v3, unit2)).join(",")})`, isValueIdentity(input, key.startsWith("scale") ? 1 : 0)]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this._value = null;
    this.inputs = inputs;
    this.transforms = transforms;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity5 = true;
    each(this.inputs, (input, i3) => {
      const arg1 = getFluidValue(input[0]);
      const [t6, id] = this.transforms[i3](is.arr(arg1) ? arg1 : input.map(getFluidValue));
      transform += " " + t6;
      identity5 = identity5 && id;
    });
    return identity5 ? "none" : transform;
  }
  observerAdded(count2) {
    if (count2 == 1)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && addFluidObserver(value, this)));
  }
  observerRemoved(count2) {
    if (count2 == 0)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && removeFluidObserver(value, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
var _excluded = ["scrollTop", "scrollLeft"];
globals.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator,
  colors
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  getComponentProps: (_ref) => {
    let props = _objectWithoutPropertiesLoose2(_ref, _excluded);
    return props;
  }
});
var animated = host.animated;

// ../node_modules/@nivo/core/dist/nivo-core.es.js
var import_react8 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
var import_merge2 = __toESM(require_merge());
var import_get = __toESM(require_get());
var import_set2 = __toESM(require_set());

// ../node_modules/@nivo/core/node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// ../node_modules/@nivo/core/node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m3, l3;
  format2 = (format2 + "").trim().toLowerCase();
  return (m3 = reHex.exec(format2)) ? (l3 = m3[1].length, m3 = parseInt(m3[1], 16), l3 === 6 ? rgbn(m3) : l3 === 3 ? new Rgb(m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, (m3 & 15) << 4 | m3 & 15, 1) : l3 === 8 ? rgba2(m3 >> 24 & 255, m3 >> 16 & 255, m3 >> 8 & 255, (m3 & 255) / 255) : l3 === 4 ? rgba2(m3 >> 12 & 15 | m3 >> 8 & 240, m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, ((m3 & 15) << 4 | m3 & 15) / 255) : null) : (m3 = reRgbInteger.exec(format2)) ? new Rgb(m3[1], m3[2], m3[3], 1) : (m3 = reRgbPercent.exec(format2)) ? new Rgb(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, 1) : (m3 = reRgbaInteger.exec(format2)) ? rgba2(m3[1], m3[2], m3[3], m3[4]) : (m3 = reRgbaPercent.exec(format2)) ? rgba2(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, m3[4]) : (m3 = reHslPercent.exec(format2)) ? hsla2(m3[1], m3[2] / 100, m3[3] / 100, 1) : (m3 = reHslaPercent.exec(format2)) ? hsla2(m3[1], m3[2] / 100, m3[3] / 100, m3[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n3) {
  return new Rgb(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba2(r4, g2, b3, a3) {
  if (a3 <= 0)
    r4 = g2 = b3 = NaN;
  return new Rgb(r4, g2, b3, a3);
}
function rgbConvert(o3) {
  if (!(o3 instanceof Color))
    o3 = color(o3);
  if (!o3)
    return new Rgb();
  o3 = o3.rgb();
  return new Rgb(o3.r, o3.g, o3.b, o3.opacity);
}
function rgb2(r4, g2, b3, opacity) {
  return arguments.length === 1 ? rgbConvert(r4) : new Rgb(r4, g2, b3, opacity == null ? 1 : opacity);
}
function Rgb(r4, g2, b3, opacity) {
  this.r = +r4;
  this.g = +g2;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default(Rgb, rgb2, extend(Color, {
  brighter: function(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  darker: function(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Rgb(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return "#" + hex(this.r) + hex(this.g) + hex(this.b);
}
function rgb_formatRgb() {
  var a3 = this.opacity;
  a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3));
  return (a3 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a3 === 1 ? ")" : ", " + a3 + ")");
}
function hex(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla2(h2, s3, l3, a3) {
  if (a3 <= 0)
    h2 = s3 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h2 = s3 = NaN;
  else if (s3 <= 0)
    h2 = NaN;
  return new Hsl(h2, s3, l3, a3);
}
function hslConvert(o3) {
  if (o3 instanceof Hsl)
    return new Hsl(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Color))
    o3 = color(o3);
  if (!o3)
    return new Hsl();
  if (o3 instanceof Hsl)
    return o3;
  o3 = o3.rgb();
  var r4 = o3.r / 255, g2 = o3.g / 255, b3 = o3.b / 255, min3 = Math.min(r4, g2, b3), max3 = Math.max(r4, g2, b3), h2 = NaN, s3 = max3 - min3, l3 = (max3 + min3) / 2;
  if (s3) {
    if (r4 === max3)
      h2 = (g2 - b3) / s3 + (g2 < b3) * 6;
    else if (g2 === max3)
      h2 = (b3 - r4) / s3 + 2;
    else
      h2 = (r4 - g2) / s3 + 4;
    s3 /= l3 < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h2 *= 60;
  } else {
    s3 = l3 > 0 && l3 < 1 ? 0 : h2;
  }
  return new Hsl(h2, s3, l3, o3.opacity);
}
function hsl2(h2, s3, l3, opacity) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s3, l3, opacity == null ? 1 : opacity);
}
function Hsl(h2, s3, l3, opacity) {
  this.h = +h2;
  this.s = +s3;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default(Hsl, hsl2, extend(Color, {
  brighter: function(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  darker: function(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Hsl(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb: function() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s3, m1 = 2 * l3 - m22;
    return new Rgb(
      hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb(h2, m1, m22),
      hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a3 = this.opacity;
    a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3));
    return (a3 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a3 === 1 ? ")" : ", " + a3 + ")");
  }
}));
function hsl2rgb(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// ../node_modules/@nivo/core/node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// ../node_modules/@nivo/core/node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o3) {
  if (o3 instanceof Lab)
    return new Lab(o3.l, o3.a, o3.b, o3.opacity);
  if (o3 instanceof Hcl)
    return hcl2lab(o3);
  if (!(o3 instanceof Rgb))
    o3 = rgbConvert(o3);
  var r4 = rgb2lrgb(o3.r), g2 = rgb2lrgb(o3.g), b3 = rgb2lrgb(o3.b), y4 = xyz2lab((0.2225045 * r4 + 0.7168786 * g2 + 0.0606169 * b3) / Yn), x4, z2;
  if (r4 === g2 && g2 === b3)
    x4 = z2 = y4;
  else {
    x4 = xyz2lab((0.4360747 * r4 + 0.3850649 * g2 + 0.1430804 * b3) / Xn);
    z2 = xyz2lab((0.0139322 * r4 + 0.0971045 * g2 + 0.7141733 * b3) / Zn);
  }
  return new Lab(116 * y4 - 16, 500 * (x4 - y4), 200 * (y4 - z2), o3.opacity);
}
function lab(l3, a3, b3, opacity) {
  return arguments.length === 1 ? labConvert(l3) : new Lab(l3, a3, b3, opacity == null ? 1 : opacity);
}
function Lab(l3, a3, b3, opacity) {
  this.l = +l3;
  this.a = +a3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter: function(k3) {
    return new Lab(this.l + K * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  darker: function(k3) {
    return new Lab(this.l - K * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y4 = (this.l + 16) / 116, x4 = isNaN(this.a) ? y4 : y4 + this.a / 500, z2 = isNaN(this.b) ? y4 : y4 - this.b / 200;
    x4 = Xn * lab2xyz(x4);
    y4 = Yn * lab2xyz(y4);
    z2 = Zn * lab2xyz(z2);
    return new Rgb(
      lrgb2rgb(3.1338561 * x4 - 1.6168667 * y4 - 0.4906146 * z2),
      lrgb2rgb(-0.9787684 * x4 + 1.9161415 * y4 + 0.033454 * z2),
      lrgb2rgb(0.0719453 * x4 - 0.2289914 * y4 + 1.4052427 * z2),
      this.opacity
    );
  }
}));
function xyz2lab(t6) {
  return t6 > t3 ? Math.pow(t6, 1 / 3) : t6 / t2 + t0;
}
function lab2xyz(t6) {
  return t6 > t1 ? t6 * t6 * t6 : t2 * (t6 - t0);
}
function lrgb2rgb(x4) {
  return 255 * (x4 <= 31308e-7 ? 12.92 * x4 : 1.055 * Math.pow(x4, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x4) {
  return (x4 /= 255) <= 0.04045 ? x4 / 12.92 : Math.pow((x4 + 0.055) / 1.055, 2.4);
}
function hclConvert(o3) {
  if (o3 instanceof Hcl)
    return new Hcl(o3.h, o3.c, o3.l, o3.opacity);
  if (!(o3 instanceof Lab))
    o3 = labConvert(o3);
  if (o3.a === 0 && o3.b === 0)
    return new Hcl(NaN, 0 < o3.l && o3.l < 100 ? 0 : NaN, o3.l, o3.opacity);
  var h2 = Math.atan2(o3.b, o3.a) * degrees;
  return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o3.a * o3.a + o3.b * o3.b), o3.l, o3.opacity);
}
function hcl(h2, c8, l3, opacity) {
  return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c8, l3, opacity == null ? 1 : opacity);
}
function Hcl(h2, c8, l3, opacity) {
  this.h = +h2;
  this.c = +c8;
  this.l = +l3;
  this.opacity = +opacity;
}
function hcl2lab(o3) {
  if (isNaN(o3.h))
    return new Lab(o3.l, 0, 0, o3.opacity);
  var h2 = o3.h * radians;
  return new Lab(o3.l, Math.cos(h2) * o3.c, Math.sin(h2) * o3.c, o3.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter: function(k3) {
    return new Hcl(this.h, this.c, this.l + K * (k3 == null ? 1 : k3), this.opacity);
  },
  darker: function(k3) {
    return new Hcl(this.h, this.c, this.l - K * (k3 == null ? 1 : k3), this.opacity);
  },
  rgb: function() {
    return hcl2lab(this).rgb();
  }
}));

// ../node_modules/@nivo/core/node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o3) {
  if (o3 instanceof Cubehelix)
    return new Cubehelix(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Rgb))
    o3 = rgbConvert(o3);
  var r4 = o3.r / 255, g2 = o3.g / 255, b3 = o3.b / 255, l3 = (BC_DA * b3 + ED * r4 - EB * g2) / (BC_DA + ED - EB), bl = b3 - l3, k3 = (E * (g2 - l3) - C * bl) / D, s3 = Math.sqrt(k3 * k3 + bl * bl) / (E * l3 * (1 - l3)), h2 = s3 ? Math.atan2(k3, bl) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s3, l3, o3.opacity);
}
function cubehelix(h2, s3, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s3, l3, opacity == null ? 1 : opacity);
}
function Cubehelix(h2, s3, l3, opacity) {
  this.h = +h2;
  this.s = +s3;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter: function(k3) {
    k3 = k3 == null ? brighter : Math.pow(brighter, k3);
    return new Cubehelix(this.h, this.s, this.l * k3, this.opacity);
  },
  darker: function(k3) {
    k3 = k3 == null ? darker : Math.pow(darker, k3);
    return new Cubehelix(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb: function() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l3 = +this.l, a3 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
    return new Rgb(
      255 * (l3 + a3 * (A * cosh2 + B * sinh2)),
      255 * (l3 + a3 * (C * cosh2 + D * sinh2)),
      255 * (l3 + a3 * (E * cosh2)),
      this.opacity
    );
  }
}));

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/basis.js
function basis(t14, v0, v1, v22, v3) {
  var t23 = t14 * t14, t33 = t23 * t14;
  return ((1 - 3 * t14 + 3 * t23 - t33) * v0 + (4 - 6 * t23 + 3 * t33) * v1 + (1 + 3 * t14 + 3 * t23 - 3 * t33) * v22 + t33 * v3) / 6;
}
function basis_default(values) {
  var n3 = values.length - 1;
  return function(t6) {
    var i3 = t6 <= 0 ? t6 = 0 : t6 >= 1 ? (t6 = 1, n3 - 1) : Math.floor(t6 * n3), v1 = values[i3], v22 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v22, v3 = i3 < n3 - 1 ? values[i3 + 2] : 2 * v22 - v1;
    return basis((t6 - i3 / n3) * n3, v0, v1, v22, v3);
  };
}

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n3 = values.length;
  return function(t6) {
    var i3 = Math.floor(((t6 %= 1) < 0 ? ++t6 : t6) * n3), v0 = values[(i3 + n3 - 1) % n3], v1 = values[i3 % n3], v22 = values[(i3 + 1) % n3], v3 = values[(i3 + 2) % n3];
    return basis((t6 - i3 / n3) * n3, v0, v1, v22, v3);
  };
}

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/constant.js
var constant_default = (x4) => () => x4;

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/color.js
function linear(a3, d2) {
  return function(t6) {
    return a3 + t6 * d2;
  };
}
function exponential(a3, b3, y4) {
  return a3 = Math.pow(a3, y4), b3 = Math.pow(b3, y4) - a3, y4 = 1 / y4, function(t6) {
    return Math.pow(a3 + t6 * b3, y4);
  };
}
function hue(a3, b3) {
  var d2 = b3 - a3;
  return d2 ? linear(a3, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default(isNaN(a3) ? b3 : a3);
}
function gamma(y4) {
  return (y4 = +y4) === 1 ? nogamma : function(a3, b3) {
    return b3 - a3 ? exponential(a3, b3, y4) : constant_default(isNaN(a3) ? b3 : a3);
  };
}
function nogamma(a3, b3) {
  var d2 = b3 - a3;
  return d2 ? linear(a3, d2) : constant_default(isNaN(a3) ? b3 : a3);
}

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y4) {
  var color3 = gamma(y4);
  function rgb5(start3, end) {
    var r4 = color3((start3 = rgb2(start3)).r, (end = rgb2(end)).r), g2 = color3(start3.g, end.g), b3 = color3(start3.b, end.b), opacity = nogamma(start3.opacity, end.opacity);
    return function(t6) {
      start3.r = r4(t6);
      start3.g = g2(t6);
      start3.b = b3(t6);
      start3.opacity = opacity(t6);
      return start3 + "";
    };
  }
  rgb5.gamma = rgbGamma;
  return rgb5;
}(1);
function rgbSpline(spline) {
  return function(colors3) {
    var n3 = colors3.length, r4 = new Array(n3), g2 = new Array(n3), b3 = new Array(n3), i3, color3;
    for (i3 = 0; i3 < n3; ++i3) {
      color3 = rgb2(colors3[i3]);
      r4[i3] = color3.r || 0;
      g2[i3] = color3.g || 0;
      b3[i3] = color3.b || 0;
    }
    r4 = spline(r4);
    g2 = spline(g2);
    b3 = spline(b3);
    color3.opacity = 1;
    return function(t6) {
      color3.r = r4(t6);
      color3.g = g2(t6);
      color3.b = b3(t6);
      return color3 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/number.js
function number_default(a3, b3) {
  return a3 = +a3, b3 = +b3, function(t6) {
    return a3 * (1 - t6) + b3 * t6;
  };
}

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b3) {
  return function() {
    return b3;
  };
}
function one(b3) {
  return function(t6) {
    return b3(t6) + "";
  };
}
function string_default(a3, b3) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i3 = -1, s3 = [], q = [];
  a3 = a3 + "", b3 = b3 + "";
  while ((am = reA.exec(a3)) && (bm = reB.exec(b3))) {
    if ((bs = bm.index) > bi) {
      bs = b3.slice(bi, bs);
      if (s3[i3])
        s3[i3] += bs;
      else
        s3[++i3] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s3[i3])
        s3[i3] += bm;
      else
        s3[++i3] = bm;
    } else {
      s3[++i3] = null;
      q.push({ i: i3, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b3.length) {
    bs = b3.slice(bi);
    if (s3[i3])
      s3[i3] += bs;
    else
      s3[++i3] = bs;
  }
  return s3.length < 2 ? q[0] ? one(q[0].x) : zero(b3) : (b3 = q.length, function(t6) {
    for (var i4 = 0, o3; i4 < b3; ++i4)
      s3[(o3 = q[i4]).i] = o3.x(t6);
    return s3.join("");
  });
}

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a3, b3, c8, d2, e4, f2) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a3 * a3 + b3 * b3))
    a3 /= scaleX, b3 /= scaleX;
  if (skewX = a3 * c8 + b3 * d2)
    c8 -= a3 * skewX, d2 -= b3 * skewX;
  if (scaleY = Math.sqrt(c8 * c8 + d2 * d2))
    c8 /= scaleY, d2 /= scaleY, skewX /= scaleY;
  if (a3 * d2 < b3 * c8)
    a3 = -a3, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e4,
    translateY: f2,
    rotate: Math.atan2(b3, a3) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m3 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m3.isIdentity ? identity : decompose_default(m3.a, m3.b, m3.c, m3.d, m3.e, m3.f);
}
function parseSvg(value) {
  if (value == null)
    return identity;
  if (!svgNode)
    svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate()))
    return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s3) {
    return s3.length ? s3.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s3, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s3.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i3 - 4, x: number_default(xa, xb) }, { i: i3 - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s3.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a3, b3, s3, q) {
    if (a3 !== b3) {
      if (a3 - b3 > 180)
        b3 += 360;
      else if (b3 - a3 > 180)
        a3 += 360;
      q.push({ i: s3.push(pop(s3) + "rotate(", null, degParen) - 2, x: number_default(a3, b3) });
    } else if (b3) {
      s3.push(pop(s3) + "rotate(" + b3 + degParen);
    }
  }
  function skewX(a3, b3, s3, q) {
    if (a3 !== b3) {
      q.push({ i: s3.push(pop(s3) + "skewX(", null, degParen) - 2, x: number_default(a3, b3) });
    } else if (b3) {
      s3.push(pop(s3) + "skewX(" + b3 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s3, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s3.push(pop(s3) + "scale(", null, ",", null, ")");
      q.push({ i: i3 - 4, x: number_default(xa, xb) }, { i: i3 - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s3.push(pop(s3) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a3, b3) {
    var s3 = [], q = [];
    a3 = parse(a3), b3 = parse(b3);
    translate(a3.translateX, a3.translateY, b3.translateX, b3.translateY, s3, q);
    rotate(a3.rotate, b3.rotate, s3, q);
    skewX(a3.skewX, b3.skewX, s3, q);
    scale(a3.scaleX, a3.scaleY, b3.scaleX, b3.scaleY, s3, q);
    a3 = b3 = null;
    return function(t6) {
      var i3 = -1, n3 = q.length, o3;
      while (++i3 < n3)
        s3[(o3 = q[i3]).i] = o3.x(t6);
      return s3.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x4) {
  return ((x4 = Math.exp(x4)) + 1 / x4) / 2;
}
function sinh(x4) {
  return ((x4 = Math.exp(x4)) - 1 / x4) / 2;
}
function tanh(x4) {
  return ((x4 = Math.exp(2 * x4)) - 1) / (x4 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i3, S2;
    if (d2 < epsilon2) {
      S2 = Math.log(w1 / w0) / rho;
      i3 = function(t6) {
        return [
          ux0 + t6 * dx,
          uy0 + t6 * dy,
          w0 * Math.exp(rho * t6 * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i3 = function(t6) {
        var s3 = t6 * S2, coshr0 = cosh(r0), u2 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s3 + r0) - sinh(r0));
        return [
          ux0 + u2 * dx,
          uy0 + u2 * dy,
          w0 * coshr0 / cosh(rho * s3 + r0)
        ];
      };
    }
    i3.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i3;
  }
  zoom.rho = function(_) {
    var _1 = Math.max(1e-3, +_), _2 = _1 * _1, _4 = _2 * _2;
    return zoomRho(_1, _2, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/hsl.js
function hsl3(hue3) {
  return function(start3, end) {
    var h2 = hue3((start3 = hsl2(start3)).h, (end = hsl2(end)).h), s3 = nogamma(start3.s, end.s), l3 = nogamma(start3.l, end.l), opacity = nogamma(start3.opacity, end.opacity);
    return function(t6) {
      start3.h = h2(t6);
      start3.s = s3(t6);
      start3.l = l3(t6);
      start3.opacity = opacity(t6);
      return start3 + "";
    };
  };
}
var hsl_default = hsl3(hue);
var hslLong = hsl3(nogamma);

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/hcl.js
function hcl2(hue3) {
  return function(start3, end) {
    var h2 = hue3((start3 = hcl(start3)).h, (end = hcl(end)).h), c8 = nogamma(start3.c, end.c), l3 = nogamma(start3.l, end.l), opacity = nogamma(start3.opacity, end.opacity);
    return function(t6) {
      start3.h = h2(t6);
      start3.c = c8(t6);
      start3.l = l3(t6);
      start3.opacity = opacity(t6);
      return start3 + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// ../node_modules/@nivo/core/node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue3) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix5(start3, end) {
      var h2 = hue3((start3 = cubehelix(start3)).h, (end = cubehelix(end)).h), s3 = nogamma(start3.s, end.s), l3 = nogamma(start3.l, end.l), opacity = nogamma(start3.opacity, end.opacity);
      return function(t6) {
        start3.h = h2(t6);
        start3.s = s3(t6);
        start3.l = l3(Math.pow(t6, y4));
        start3.opacity = opacity(t6);
        return start3 + "";
      };
    }
    cubehelix5.gamma = cubehelixGamma;
    return cubehelix5;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// ../node_modules/@nivo/core/node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
var updateQueue2 = makeQueue2();
var raf2 = (fn) => schedule2(fn, updateQueue2);
var writeQueue2 = makeQueue2();
raf2.write = (fn) => schedule2(fn, writeQueue2);
var onStartQueue2 = makeQueue2();
raf2.onStart = (fn) => schedule2(fn, onStartQueue2);
var onFrameQueue2 = makeQueue2();
raf2.onFrame = (fn) => schedule2(fn, onFrameQueue2);
var onFinishQueue2 = makeQueue2();
raf2.onFinish = (fn) => schedule2(fn, onFinishQueue2);
var timeouts2 = [];
raf2.setTimeout = (handler, ms) => {
  let time2 = raf2.now() + ms;
  let cancel = () => {
    let i3 = timeouts2.findIndex((t6) => t6.cancel == cancel);
    if (~i3)
      timeouts2.splice(i3, 1);
    __raf.count -= ~i3 ? 1 : 0;
  };
  let timeout = {
    time: time2,
    handler,
    cancel
  };
  timeouts2.splice(findTimeout2(time2), 0, timeout);
  __raf.count += 1;
  start2();
  return timeout;
};
var findTimeout2 = (time2) => ~(~timeouts2.findIndex((t6) => t6.time > time2) || ~timeouts2.length);
raf2.cancel = (fn) => {
  updateQueue2.delete(fn);
  writeQueue2.delete(fn);
};
raf2.sync = (fn) => {
  sync2 = true;
  raf2.batchedUpdates(fn);
  sync2 = false;
};
raf2.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf2.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue2.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf2 = typeof window != "undefined" ? window.requestAnimationFrame : () => {
};
raf2.use = (impl) => nativeRaf2 = impl;
raf2.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf2.batchedUpdates = (fn) => fn();
raf2.catch = console.error;
raf2.frameLoop = "always";
raf2.advance = () => {
  if (raf2.frameLoop !== "demand") {
    console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
  } else {
    update3();
  }
};
var ts2 = -1;
var sync2 = false;
function schedule2(fn, queue) {
  if (sync2) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start2();
  }
}
function start2() {
  if (ts2 < 0) {
    ts2 = 0;
    if (raf2.frameLoop !== "demand") {
      nativeRaf2(loop2);
    }
  }
}
function loop2() {
  if (~ts2) {
    nativeRaf2(loop2);
    raf2.batchedUpdates(update3);
  }
}
function update3() {
  let prevTs = ts2;
  ts2 = raf2.now();
  let count2 = findTimeout2(ts2);
  if (count2) {
    eachSafely2(timeouts2.splice(0, count2), (t6) => t6.handler());
    __raf.count -= count2;
  }
  onStartQueue2.flush();
  updateQueue2.flush(prevTs ? Math.min(64, ts2 - prevTs) : 16.667);
  onFrameQueue2.flush();
  writeQueue2.flush();
  onFinishQueue2.flush();
}
function makeQueue2() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn) {
      __raf.count += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      __raf.count -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        __raf.count -= current.size;
        eachSafely2(current, (fn) => fn(arg) && next.add(fn));
        __raf.count += next.size;
        current = next;
      }
    }
  };
}
function eachSafely2(values, each3) {
  values.forEach((value) => {
    try {
      each3(value);
    } catch (e4) {
      raf2.catch(e4);
    }
  });
}
var __raf = {
  count: 0,
  clear() {
    ts2 = -1;
    timeouts2 = [];
    onStartQueue2 = makeQueue2();
    updateQueue2 = makeQueue2();
    onFrameQueue2 = makeQueue2();
    writeQueue2 = makeQueue2();
    onFinishQueue2 = makeQueue2();
    __raf.count = 0;
  }
};

// ../node_modules/@nivo/core/node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
var React4 = __toESM(require_react());
var import_react4 = __toESM(require_react());
function noop2() {
}
var defineHidden2 = (obj, key, value) => Object.defineProperty(obj, key, {
  value,
  writable: true,
  configurable: true
});
var is2 = {
  arr: Array.isArray,
  obj: (a3) => !!a3 && a3.constructor.name === "Object",
  fun: (a3) => typeof a3 === "function",
  str: (a3) => typeof a3 === "string",
  num: (a3) => typeof a3 === "number",
  und: (a3) => a3 === void 0
};
function isEqual2(a3, b3) {
  if (is2.arr(a3)) {
    if (!is2.arr(b3) || a3.length !== b3.length)
      return false;
    for (let i3 = 0; i3 < a3.length; i3++) {
      if (a3[i3] !== b3[i3])
        return false;
    }
    return true;
  }
  return a3 === b3;
}
var each2 = (obj, fn) => obj.forEach(fn);
function eachProp2(obj, fn, ctx3) {
  if (is2.arr(obj)) {
    for (let i3 = 0; i3 < obj.length; i3++) {
      fn.call(ctx3, obj[i3], `${i3}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn.call(ctx3, obj[key], key);
    }
  }
}
var toArray2 = (a3) => is2.und(a3) ? [] : is2.arr(a3) ? a3 : [a3];
function flush2(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each2(items, iterator);
  }
}
var flushCalls2 = (queue, ...args) => flush2(queue, (fn) => fn(...args));
var createStringInterpolator$12;
var to3;
var colors$12 = null;
var skipAnimation2 = false;
var willAdvance2 = noop2;
var assign2 = (globals3) => {
  if (globals3.to)
    to3 = globals3.to;
  if (globals3.now)
    raf2.now = globals3.now;
  if (globals3.colors !== void 0)
    colors$12 = globals3.colors;
  if (globals3.skipAnimation != null)
    skipAnimation2 = globals3.skipAnimation;
  if (globals3.createStringInterpolator)
    createStringInterpolator$12 = globals3.createStringInterpolator;
  if (globals3.requestAnimationFrame)
    raf2.use(globals3.requestAnimationFrame);
  if (globals3.batchedUpdates)
    raf2.batchedUpdates = globals3.batchedUpdates;
  if (globals3.willAdvance)
    willAdvance2 = globals3.willAdvance;
  if (globals3.frameLoop)
    raf2.frameLoop = globals3.frameLoop;
};
var globals2 = Object.freeze({
  __proto__: null,
  get createStringInterpolator() {
    return createStringInterpolator$12;
  },
  get to() {
    return to3;
  },
  get colors() {
    return colors$12;
  },
  get skipAnimation() {
    return skipAnimation2;
  },
  get willAdvance() {
    return willAdvance2;
  },
  assign: assign2
});
var startQueue2 = /* @__PURE__ */ new Set();
var currentFrame2 = [];
var prevFrame2 = [];
var priority2 = 0;
var frameLoop2 = {
  get idle() {
    return !startQueue2.size && !currentFrame2.length;
  },
  start(animation) {
    if (priority2 > animation.priority) {
      startQueue2.add(animation);
      raf2.onStart(flushStartQueue2);
    } else {
      startSafely2(animation);
      raf2(advance2);
    }
  },
  advance: advance2,
  sort(animation) {
    if (priority2) {
      raf2.onFrame(() => frameLoop2.sort(animation));
    } else {
      const prevIndex = currentFrame2.indexOf(animation);
      if (~prevIndex) {
        currentFrame2.splice(prevIndex, 1);
        startUnsafely2(animation);
      }
    }
  },
  clear() {
    currentFrame2 = [];
    startQueue2.clear();
  }
};
function flushStartQueue2() {
  startQueue2.forEach(startSafely2);
  startQueue2.clear();
  raf2(advance2);
}
function startSafely2(animation) {
  if (!currentFrame2.includes(animation))
    startUnsafely2(animation);
}
function startUnsafely2(animation) {
  currentFrame2.splice(findIndex2(currentFrame2, (other) => other.priority > animation.priority), 0, animation);
}
function advance2(dt) {
  const nextFrame = prevFrame2;
  for (let i3 = 0; i3 < currentFrame2.length; i3++) {
    const animation = currentFrame2[i3];
    priority2 = animation.priority;
    if (!animation.idle) {
      willAdvance2(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority2 = 0;
  prevFrame2 = currentFrame2;
  prevFrame2.length = 0;
  currentFrame2 = nextFrame;
  return currentFrame2.length > 0;
}
function findIndex2(arr, test) {
  const index2 = arr.findIndex(test);
  return index2 < 0 ? arr.length : index2;
}
var colors2 = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER2 = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE2 = NUMBER2 + "%";
function call2(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb3 = new RegExp("rgb" + call2(NUMBER2, NUMBER2, NUMBER2));
var rgba3 = new RegExp("rgba" + call2(NUMBER2, NUMBER2, NUMBER2, NUMBER2));
var hsl4 = new RegExp("hsl" + call2(NUMBER2, PERCENTAGE2, PERCENTAGE2));
var hsla3 = new RegExp("hsla" + call2(NUMBER2, PERCENTAGE2, PERCENTAGE2, NUMBER2));
var hex32 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex42 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex62 = /^#([0-9a-fA-F]{6})$/;
var hex82 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor2(color3) {
  let match;
  if (typeof color3 === "number") {
    return color3 >>> 0 === color3 && color3 >= 0 && color3 <= 4294967295 ? color3 : null;
  }
  if (match = hex62.exec(color3))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors$12 && colors$12[color3] !== void 0) {
    return colors$12[color3];
  }
  if (match = rgb3.exec(color3)) {
    return (parse2552(match[1]) << 24 | parse2552(match[2]) << 16 | parse2552(match[3]) << 8 | 255) >>> 0;
  }
  if (match = rgba3.exec(color3)) {
    return (parse2552(match[1]) << 24 | parse2552(match[2]) << 16 | parse2552(match[3]) << 8 | parse12(match[4])) >>> 0;
  }
  if (match = hex32.exec(color3)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
  }
  if (match = hex82.exec(color3))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex42.exec(color3)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }
  if (match = hsl4.exec(color3)) {
    return (hslToRgb2(parse3602(match[1]), parsePercentage2(match[2]), parsePercentage2(match[3])) | 255) >>> 0;
  }
  if (match = hsla3.exec(color3)) {
    return (hslToRgb2(parse3602(match[1]), parsePercentage2(match[2]), parsePercentage2(match[3])) | parse12(match[4])) >>> 0;
  }
  return null;
}
function hue2rgb2(p2, q, t6) {
  if (t6 < 0)
    t6 += 1;
  if (t6 > 1)
    t6 -= 1;
  if (t6 < 1 / 6)
    return p2 + (q - p2) * 6 * t6;
  if (t6 < 1 / 2)
    return q;
  if (t6 < 2 / 3)
    return p2 + (q - p2) * (2 / 3 - t6) * 6;
  return p2;
}
function hslToRgb2(h2, s3, l3) {
  const q = l3 < 0.5 ? l3 * (1 + s3) : l3 + s3 - l3 * s3;
  const p2 = 2 * l3 - q;
  const r4 = hue2rgb2(p2, q, h2 + 1 / 3);
  const g2 = hue2rgb2(p2, q, h2);
  const b3 = hue2rgb2(p2, q, h2 - 1 / 3);
  return Math.round(r4 * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b3 * 255) << 8;
}
function parse2552(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse3602(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse12(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage2(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba2(input) {
  let int32Color = normalizeColor2(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  let r4 = (int32Color & 4278190080) >>> 24;
  let g2 = (int32Color & 16711680) >>> 16;
  let b3 = (int32Color & 65280) >>> 8;
  let a3 = (int32Color & 255) / 255;
  return `rgba(${r4}, ${g2}, ${b3}, ${a3})`;
}
var createInterpolator2 = (range, output, extrapolate) => {
  if (is2.fun(range)) {
    return range;
  }
  if (is2.arr(range)) {
    return createInterpolator2({
      range,
      output,
      extrapolate
    });
  }
  if (is2.str(range.output[0])) {
    return createStringInterpolator$12(range);
  }
  const config3 = range;
  const outputRange = config3.output;
  const inputRange = config3.range || [0, 1];
  const extrapolateLeft = config3.extrapolateLeft || config3.extrapolate || "extend";
  const extrapolateRight = config3.extrapolateRight || config3.extrapolate || "extend";
  const easing = config3.easing || ((t6) => t6);
  return (input) => {
    const range2 = findRange2(input, inputRange);
    return interpolate2(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config3.map);
  };
};
function interpolate2(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map4) {
  let result = map4 ? map4(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange2(input, inputRange) {
  for (var i3 = 1; i3 < inputRange.length - 1; ++i3)
    if (inputRange[i3] >= input)
      break;
  return i3 - 1;
}
function _extends4() {
  _extends4 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
var $get2 = Symbol.for("FluidValue.get");
var $observers2 = Symbol.for("FluidValue.observers");
var hasFluidValue2 = (arg) => Boolean(arg && arg[$get2]);
var getFluidValue2 = (arg) => arg && arg[$get2] ? arg[$get2]() : arg;
var getFluidObservers2 = (target) => target[$observers2] || null;
function callFluidObserver2(observer, event) {
  if (observer.eventObserved) {
    observer.eventObserved(event);
  } else {
    observer(event);
  }
}
function callFluidObservers2(target, event) {
  let observers = target[$observers2];
  if (observers) {
    observers.forEach((observer) => {
      callFluidObserver2(observer, event);
    });
  }
}
var FluidValue2 = class {
  constructor(get) {
    this[$get2] = void 0;
    this[$observers2] = void 0;
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter2(this, get);
  }
};
var setFluidGetter2 = (target, get) => setHidden2(target, $get2, get);
function addFluidObserver2(target, observer) {
  if (target[$get2]) {
    let observers = target[$observers2];
    if (!observers) {
      setHidden2(target, $observers2, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer)) {
      observers.add(observer);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer);
      }
    }
  }
  return observer;
}
function removeFluidObserver2(target, observer) {
  let observers = target[$observers2];
  if (observers && observers.has(observer)) {
    const count2 = observers.size - 1;
    if (count2) {
      observers.delete(observer);
    } else {
      target[$observers2] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count2, observer);
    }
  }
}
var setHidden2 = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex2 = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex2 = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex2 = new RegExp(`(${numberRegex2.source})(%|[a-z]+)`, "i");
var namedColorRegex2;
var rgbaRegex2 = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var rgbaRound2 = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
var createStringInterpolator2 = (config3) => {
  if (!namedColorRegex2)
    namedColorRegex2 = colors$12 ? new RegExp(`(${Object.keys(colors$12).join("|")})(?!\\w)`, "g") : /^\b$/;
  const output = config3.output.map((value) => getFluidValue2(value).replace(colorRegex2, colorToRgba2).replace(namedColorRegex2, colorToRgba2));
  const keyframes = output.map((value) => value.match(numberRegex2).map(Number));
  const outputRanges = keyframes[0].map((_, i3) => keyframes.map((values) => {
    if (!(i3 in values)) {
      throw Error('The arity of each "output" value must be equal');
    }
    return values[i3];
  }));
  const interpolators = outputRanges.map((output2) => createInterpolator2(_extends4({}, config3, {
    output: output2
  })));
  return (input) => {
    var _output$find;
    const missingUnit = !unitRegex2.test(output[0]) && ((_output$find = output.find((value) => unitRegex2.test(value))) == null ? void 0 : _output$find.replace(numberRegex2, ""));
    let i3 = 0;
    return output[0].replace(numberRegex2, () => `${interpolators[i3++](input)}${missingUnit || ""}`).replace(rgbaRegex2, rgbaRound2);
  };
};
var prefix2 = "react-spring: ";
var once2 = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix2}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate2 = once2(console.warn);
function deprecateInterpolate2() {
  warnInterpolate2(`${prefix2}The "interpolate" function is deprecated in v9 (use "to" instead)`);
}
var warnDirectCall2 = once2(console.warn);
function deprecateDirectCall2() {
  warnDirectCall2(`${prefix2}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
}
function isAnimatedString2(value) {
  return is2.str(value) && (value[0] == "#" || /\d/.test(value) || value in (colors$12 || {}));
}
var useOnce2 = (effect) => (0, import_react4.useEffect)(effect, emptyDeps2);
var emptyDeps2 = [];
function useForceUpdate2() {
  const update5 = (0, import_react4.useState)()[1];
  const mounted = (0, import_react4.useState)(makeMountedRef)[0];
  useOnce2(mounted.unmount);
  return () => {
    if (mounted.current) {
      update5({});
    }
  };
}
function makeMountedRef() {
  const mounted = {
    current: true,
    unmount: () => () => {
      mounted.current = false;
    }
  };
  return mounted;
}
function useMemoOne2(getResult, inputs) {
  const [initial] = (0, import_react4.useState)(() => ({
    inputs,
    result: getResult()
  }));
  const committed = (0, import_react4.useRef)();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(inputs && cache.inputs && areInputsEqual2(inputs, cache.inputs));
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  (0, import_react4.useEffect)(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual2(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i3 = 0; i3 < next.length; i3++) {
    if (next[i3] !== prev[i3]) {
      return false;
    }
  }
  return true;
}
function usePrev2(value) {
  const prevRef = (0, import_react4.useRef)();
  (0, import_react4.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}
var useLayoutEffect4 = typeof window !== "undefined" && window.document && window.document.createElement ? React4.useLayoutEffect : React4.useEffect;

// ../node_modules/@nivo/core/node_modules/@react-spring/core/dist/react-spring-core.esm.js
var React6 = __toESM(require_react());
var import_react6 = __toESM(require_react());

// ../node_modules/@nivo/core/node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
var React5 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var $node2 = Symbol.for("Animated:node");
var isAnimated2 = (value) => !!value && value[$node2] === value;
var getAnimated2 = (owner) => owner && owner[$node2];
var setAnimated2 = (owner, node) => defineHidden2(owner, $node2, node);
var getPayload2 = (owner) => owner && owner[$node2] && owner[$node2].getPayload();
var Animated2 = class {
  constructor() {
    this.payload = void 0;
    setAnimated2(this, this);
  }
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue2 = class _AnimatedValue extends Animated2 {
  constructor(_value) {
    super();
    this.done = true;
    this.elapsedTime = void 0;
    this.lastPosition = void 0;
    this.lastVelocity = void 0;
    this.v0 = void 0;
    this.durationProgress = 0;
    this._value = _value;
    if (is2.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  static create(value) {
    return new _AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is2.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const {
      done
    } = this;
    this.done = false;
    if (is2.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString2 = class _AnimatedString extends AnimatedValue2 {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = void 0;
    this._toString = createInterpolator2({
      output: [value, value]
    });
  }
  static create(value) {
    return new _AnimatedString(value);
  }
  getValue() {
    let value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is2.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator2({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext2 = {
  dependencies: null
};
var AnimatedObject2 = class extends Animated2 {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated3) {
    const values = {};
    eachProp2(this.source, (source, key) => {
      if (isAnimated2(source)) {
        values[key] = source.getValue(animated3);
      } else if (hasFluidValue2(source)) {
        values[key] = getFluidValue2(source);
      } else if (!animated3) {
        values[key] = source;
      }
    });
    return values;
  }
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each2(this.payload, (node) => node.reset());
    }
  }
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp2(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  _addToPayload(source) {
    if (TreeContext2.dependencies && hasFluidValue2(source)) {
      TreeContext2.dependencies.add(source);
    }
    const payload = getPayload2(source);
    if (payload) {
      each2(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray2 = class _AnimatedArray extends AnimatedObject2 {
  constructor(source) {
    super(source);
  }
  static create(source) {
    return new _AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i3) => node.setValue(source[i3])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated2));
    return true;
  }
};
function makeAnimated2(value) {
  const nodeType = isAnimatedString2(value) ? AnimatedString2 : AnimatedValue2;
  return nodeType.create(value);
}
function getAnimatedType2(value) {
  const parentNode = getAnimated2(value);
  return parentNode ? parentNode.constructor : is2.arr(value) ? AnimatedArray2 : isAnimatedString2(value) ? AnimatedString2 : AnimatedValue2;
}
function _extends5() {
  _extends5 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends5.apply(this, arguments);
}
var withAnimated2 = (Component, host3) => {
  const hasInstance = !is2.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
  return (0, import_react5.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react5.useRef)(null);
    const ref = hasInstance && (0, import_react5.useCallback)((value) => {
      instanceRef.current = updateRef2(givenRef, value);
    }, [givenRef]);
    const [props, deps] = getAnimatedState2(givenProps, host3);
    const forceUpdate = useForceUpdate2();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host3.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver2(callback, deps);
    const observerRef = (0, import_react5.useRef)();
    useLayoutEffect4(() => {
      const lastObserver = observerRef.current;
      observerRef.current = observer;
      each2(deps, (dep) => addFluidObserver2(dep, observer));
      if (lastObserver) {
        each2(lastObserver.deps, (dep) => removeFluidObserver2(dep, lastObserver));
        raf2.cancel(lastObserver.update);
      }
    });
    (0, import_react5.useEffect)(callback, []);
    useOnce2(() => () => {
      const observer2 = observerRef.current;
      each2(observer2.deps, (dep) => removeFluidObserver2(dep, observer2));
    });
    const usedProps = host3.getComponentProps(props.getValue());
    return React5.createElement(Component, _extends5({}, usedProps, {
      ref
    }));
  });
};
var PropsObserver2 = class {
  constructor(update5, deps) {
    this.update = update5;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf2.write(this.update);
    }
  }
};
function getAnimatedState2(props, host3) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext2.dependencies = dependencies;
  if (props.style)
    props = _extends5({}, props, {
      style: host3.createAnimatedStyle(props.style)
    });
  props = new AnimatedObject2(props);
  TreeContext2.dependencies = null;
  return [props, dependencies];
}
function updateRef2(ref, value) {
  if (ref) {
    if (is2.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey2 = Symbol.for("AnimatedComponent");
var createHost2 = (components, {
  applyAnimatedValues: _applyAnimatedValues = () => false,
  createAnimatedStyle: _createAnimatedStyle = (style) => new AnimatedObject2(style),
  getComponentProps: _getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: _applyAnimatedValues,
    createAnimatedStyle: _createAnimatedStyle,
    getComponentProps: _getComponentProps
  };
  const animated3 = (Component) => {
    const displayName = getDisplayName2(Component) || "Anonymous";
    if (is2.str(Component)) {
      Component = animated3[Component] || (animated3[Component] = withAnimated2(Component, hostConfig));
    } else {
      Component = Component[cacheKey2] || (Component[cacheKey2] = withAnimated2(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp2(components, (Component, key) => {
    if (is2.arr(components)) {
      key = getDisplayName2(Component);
    }
    animated3[key] = animated3(Component);
  });
  return {
    animated: animated3
  };
};
var getDisplayName2 = (arg) => is2.str(arg) ? arg : arg && is2.str(arg.displayName) ? arg.displayName : is2.fun(arg) && arg.name || null;

// ../node_modules/@nivo/core/node_modules/@react-spring/core/dist/react-spring-core.esm.js
function _extends6() {
  _extends6 = Object.assign || function(target) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var source = arguments[i3];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends6.apply(this, arguments);
}
function callProp2(value, ...args) {
  return is2.fun(value) ? value(...args) : value;
}
var matchProp2 = (value, key) => value === true || !!(key && value && (is2.fun(value) ? value(key) : toArray2(value).includes(key)));
var resolveProp2 = (prop, key) => is2.obj(prop) ? key && prop[key] : prop;
var getDefaultProp2 = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform2 = (value) => value;
var getDefaultProps2 = (props, transform = noopTransform2) => {
  let keys = DEFAULT_PROPS2;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults3 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is2.und(value)) {
      defaults3[key] = value;
    }
  }
  return defaults3;
};
var DEFAULT_PROPS2 = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
var RESERVED_PROPS2 = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps2(props) {
  const forward = {};
  let count2 = 0;
  eachProp2(props, (value, prop) => {
    if (!RESERVED_PROPS2[prop]) {
      forward[prop] = value;
      count2++;
    }
  });
  if (count2) {
    return forward;
  }
}
function inferTo2(props) {
  const to5 = getForwardProps2(props);
  if (to5) {
    const out = {
      to: to5
    };
    eachProp2(props, (val, key) => key in to5 || (out[key] = val));
    return out;
  }
  return _extends6({}, props);
}
function computeGoal2(value) {
  value = getFluidValue2(value);
  return is2.arr(value) ? value.map(computeGoal2) : isAnimatedString2(value) ? globals2.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps2(props) {
  for (const _ in props)
    return true;
  return false;
}
function isAsyncTo2(to5) {
  return is2.fun(to5) || is2.arr(to5) && is2.obj(to5[0]);
}
function detachRefs2(ctrl, ref) {
  var _ctrl$ref;
  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef2(ctrl, ref) {
  if (ref && ctrl.ref !== ref) {
    var _ctrl$ref2;
    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config2 = {
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
};
var linear2 = (t6) => t6;
var defaults2 = _extends6({}, config2.default, {
  mass: 1,
  damping: 1,
  easing: linear2,
  clamp: false
});
var AnimationConfig2 = class {
  constructor() {
    this.tension = void 0;
    this.friction = void 0;
    this.frequency = void 0;
    this.damping = void 0;
    this.mass = void 0;
    this.velocity = 0;
    this.restVelocity = void 0;
    this.precision = void 0;
    this.progress = void 0;
    this.duration = void 0;
    this.easing = void 0;
    this.clamp = void 0;
    this.bounce = void 0;
    this.decay = void 0;
    this.round = void 0;
    Object.assign(this, defaults2);
  }
};
function mergeConfig2(config3, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = _extends6({}, defaultConfig);
    sanitizeConfig2(defaultConfig, newConfig);
    newConfig = _extends6({}, defaultConfig, newConfig);
  }
  sanitizeConfig2(config3, newConfig);
  Object.assign(config3, newConfig);
  for (const key in defaults2) {
    if (config3[key] == null) {
      config3[key] = defaults2[key];
    }
  }
  let {
    mass,
    frequency,
    damping
  } = config3;
  if (!is2.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config3.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config3.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config3;
}
function sanitizeConfig2(config3, props) {
  if (!is2.und(props.decay)) {
    config3.duration = void 0;
  } else {
    const isTensionConfig = !is2.und(props.tension) || !is2.und(props.friction);
    if (isTensionConfig || !is2.und(props.frequency) || !is2.und(props.damping) || !is2.und(props.mass)) {
      config3.duration = void 0;
      config3.decay = void 0;
    }
    if (isTensionConfig) {
      config3.frequency = void 0;
    }
  }
}
var emptyArray2 = [];
var Animation2 = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray2;
    this.toValues = null;
    this.fromValues = emptyArray2;
    this.to = void 0;
    this.from = void 0;
    this.config = new AnimationConfig2();
    this.immediate = false;
  }
};
function scheduleProps2(callId, {
  key,
  props,
  defaultProps,
  state,
  actions
}) {
  return new Promise((resolve, reject) => {
    var _props$cancel;
    let delay;
    let timeout;
    let cancel = matchProp2((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps == null ? void 0 : defaultProps.cancel, key);
    if (cancel) {
      onStart();
    } else {
      if (!is2.und(props.pause)) {
        state.paused = matchProp2(props.pause, key);
      }
      let pause = defaultProps == null ? void 0 : defaultProps.pause;
      if (pause !== true) {
        pause = state.paused || matchProp2(pause, key);
      }
      delay = callProp2(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf2.now();
    }
    function onResume() {
      if (delay > 0 && !globals2.skipAnimation) {
        timeout = raf2.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start(_extends6({}, props, {
          callId,
          cancel
        }), resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult2 = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult2(target.get()) : results.every((result) => result.noop) ? getNoopResult2(target.get()) : getFinishedResult2(target.get(), results.every((result) => result.finished));
var getNoopResult2 = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult2 = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult2 = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync2(to5, props, state, target) {
  const {
    callId,
    parentId,
    onRest
  } = props;
  const {
    asyncTo: prevTo,
    promise: prevPromise
  } = state;
  if (!parentId && to5 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to5;
    const defaultProps = getDefaultProps2(props, (value, key) => key === "onRest" ? void 0 : value);
    let preventBail;
    let bail;
    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
    const bailIfEnded = (bailSignal) => {
      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult2(target) || callId !== state.asyncId && getFinishedResult2(target, false);
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal2();
      const skipAnimationSignal = new SkipAniamtionSignal2();
      return (async () => {
        if (globals2.skipAnimation) {
          stopAsync2(state);
          skipAnimationSignal.result = getFinishedResult2(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is2.obj(arg1) ? _extends6({}, arg1) : _extends6({}, arg2, {
          to: arg1
        });
        props2.parentId = callId;
        eachProp2(defaultProps, (value, key) => {
          if (is2.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals2.skipAnimation) {
      stopAsync2(state);
      return getFinishedResult2(target, false);
    }
    try {
      let animating;
      if (is2.arr(to5)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to5);
      } else {
        animating = Promise.resolve(to5(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult2(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal2) {
        result = err.result;
      } else if (err instanceof SkipAniamtionSignal2) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is2.fun(onRest)) {
      raf2.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync2(state, cancelId) {
  flush2(state.timeouts, (t6) => t6.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal2 = class extends Error {
  constructor() {
    super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
    this.result = void 0;
  }
};
var SkipAniamtionSignal2 = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
    this.result = void 0;
  }
};
var isFrameValue2 = (value) => value instanceof FrameValue2;
var nextId$12 = 1;
var FrameValue2 = class extends FluidValue2 {
  constructor(...args) {
    super(...args);
    this.id = nextId$12++;
    this.key = void 0;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority3) {
    if (this._priority != priority3) {
      this._priority = priority3;
      this._onPriorityChange(priority3);
    }
  }
  get() {
    const node = getAnimated2(this);
    return node && node.getValue();
  }
  to(...args) {
    return globals2.to(this, args);
  }
  interpolate(...args) {
    deprecateInterpolate2();
    return globals2.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count2) {
    if (count2 == 1)
      this._attach();
  }
  observerRemoved(count2) {
    if (count2 == 0)
      this._detach();
  }
  _attach() {
  }
  _detach() {
  }
  _onChange(value, idle = false) {
    callFluidObservers2(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  _onPriorityChange(priority3) {
    if (!this.idle) {
      frameLoop2.sort(this);
    }
    callFluidObservers2(this, {
      type: "priority",
      parent: this,
      priority: priority3
    });
  }
};
var $P2 = Symbol.for("SpringPhase");
var HAS_ANIMATED2 = 1;
var IS_ANIMATING2 = 2;
var IS_PAUSED2 = 4;
var hasAnimated2 = (target) => (target[$P2] & HAS_ANIMATED2) > 0;
var isAnimating2 = (target) => (target[$P2] & IS_ANIMATING2) > 0;
var isPaused2 = (target) => (target[$P2] & IS_PAUSED2) > 0;
var setActiveBit2 = (target, active) => active ? target[$P2] |= IS_ANIMATING2 | HAS_ANIMATED2 : target[$P2] &= ~IS_ANIMATING2;
var setPausedBit2 = (target, paused) => paused ? target[$P2] |= IS_PAUSED2 : target[$P2] &= ~IS_PAUSED2;
var SpringValue2 = class extends FrameValue2 {
  constructor(arg1, arg2) {
    super();
    this.key = void 0;
    this.animation = new Animation2();
    this.queue = void 0;
    this.defaultProps = {};
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is2.und(arg1) || !is2.und(arg2)) {
      const props = is2.obj(arg1) ? _extends6({}, arg1) : _extends6({}, arg2, {
        from: arg1
      });
      if (is2.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  get idle() {
    return !(isAnimating2(this) || this._state.asyncTo) || isPaused2(this);
  }
  get goal() {
    return getFluidValue2(this.animation.to);
  }
  get velocity() {
    const node = getAnimated2(this);
    return node instanceof AnimatedValue2 ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  get hasAnimated() {
    return hasAnimated2(this);
  }
  get isAnimating() {
    return isAnimating2(this);
  }
  get isPaused() {
    return isPaused2(this);
  }
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let {
      config: config3,
      toValues
    } = anim;
    const payload = getPayload2(anim.to);
    if (!payload && hasFluidValue2(anim.to)) {
      toValues = toArray2(getFluidValue2(anim.to));
    }
    anim.values.forEach((node2, i3) => {
      if (node2.done)
        return;
      const to5 = node2.constructor == AnimatedString2 ? 1 : payload ? payload[i3].lastPosition : toValues[i3];
      let finished = anim.immediate;
      let position = to5;
      if (!finished) {
        position = node2.lastPosition;
        if (config3.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i3];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is2.arr(config3.velocity) ? config3.velocity[i3] : config3.velocity;
        let velocity;
        if (!is2.und(config3.duration)) {
          let p2 = 1;
          if (config3.duration > 0) {
            if (this._memoizedDuration !== config3.duration) {
              this._memoizedDuration = config3.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config3.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p2 = (config3.progress || 0) + elapsed / this._memoizedDuration;
            p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
            node2.durationProgress = p2;
          }
          position = from + config3.easing(p2) * (to5 - from);
          velocity = (position - node2.lastPosition) / dt;
          finished = p2 == 1;
        } else if (config3.decay) {
          const decay = config3.decay === true ? 0.998 : config3.decay;
          const e4 = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e4);
          finished = Math.abs(node2.lastPosition - position) < 0.1;
          velocity = v0 * e4;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const precision = config3.precision || (from == to5 ? 5e-3 : Math.min(1, Math.abs(to5 - from) * 1e-3));
          const restVelocity = config3.restVelocity || precision / 10;
          const bounceFactor = config3.clamp ? 0 : config3.bounce;
          const canBounce = !is2.und(bounceFactor);
          const isGrowing = from == to5 ? node2.v0 > 0 : from < to5;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n3 = 0; n3 < numSteps; ++n3) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to5 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to5 || position > to5 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to5;
              }
            }
            const springForce = -config3.tension * 1e-6 * (position - to5);
            const dampingForce = -config3.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config3.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i3].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config3.round)) {
        changed = true;
      }
    });
    const node = getAnimated2(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue2(anim.to);
      if ((currVal !== finalVal || changed) && !config3.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config3.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  set(value) {
    raf2.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  pause() {
    this._update({
      pause: true
    });
  }
  resume() {
    this._update({
      pause: false
    });
  }
  finish() {
    if (isAnimating2(this)) {
      const {
        to: to5,
        config: config3
      } = this.animation;
      raf2.batchedUpdates(() => {
        this._onStart();
        if (!config3.decay) {
          this._set(to5, false);
        }
        this._stop();
      });
    }
    return this;
  }
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to5, arg2) {
    let queue;
    if (!is2.und(to5)) {
      queue = [is2.obj(to5) ? to5 : _extends6({}, arg2, {
        to: to5
      })];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(queue.map((props) => this._update(props))).then((results) => getCombinedResult2(this, results));
  }
  stop(cancel) {
    const {
      to: to5
    } = this.animation;
    this._focus(this.get());
    stopAsync2(this._state, cancel && this._lastCallId);
    raf2.batchedUpdates(() => this._stop(to5, cancel));
    return this;
  }
  reset() {
    this._update({
      reset: true
    });
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  _prepareNode(props) {
    const key = this.key || "";
    let {
      to: to5,
      from
    } = props;
    to5 = is2.obj(to5) ? to5[key] : to5;
    if (to5 == null || isAsyncTo2(to5)) {
      to5 = void 0;
    }
    from = is2.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range = {
      to: to5,
      from
    };
    if (!hasAnimated2(this)) {
      if (props.reverse)
        [to5, from] = [from, to5];
      from = getFluidValue2(from);
      if (!is2.und(from)) {
        this._set(from);
      } else if (!getAnimated2(this)) {
        this._set(to5);
      }
    }
    return range;
  }
  _update(_ref, isLoop) {
    let props = _extends6({}, _ref);
    const {
      key,
      defaultProps
    } = this;
    if (props.default)
      Object.assign(defaultProps, getDefaultProps2(props, (value, prop) => /^on/.test(prop) ? resolveProp2(value, key) : value));
    mergeActiveFn2(this, props, "onProps");
    sendEvent2(this, "onProps", props, this);
    const range = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
    }
    const state = this._state;
    return scheduleProps2(++this._lastCallId, {
      key,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused2(this)) {
            setPausedBit2(this, true);
            flushCalls2(state.pauseQueue);
            sendEvent2(this, "onPause", getFinishedResult2(this, checkFinished2(this, this.animation.to)), this);
          }
        },
        resume: () => {
          if (isPaused2(this)) {
            setPausedBit2(this, false);
            if (isAnimating2(this)) {
              this._resume();
            }
            flushCalls2(state.resumeQueue);
            sendEvent2(this, "onResume", getFinishedResult2(this, checkFinished2(this, this.animation.to)), this);
          }
        },
        start: this._merge.bind(this, range)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate2(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  _merge(range, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult2(this));
    }
    const hasToProp = !is2.und(range.to);
    const hasFromProp = !is2.und(range.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult2(this));
      }
    }
    const {
      key,
      defaultProps,
      animation: anim
    } = this;
    const {
      to: prevTo,
      from: prevFrom
    } = anim;
    let {
      to: to5 = prevTo,
      from = prevFrom
    } = range;
    if (hasFromProp && !hasToProp && (!props.default || is2.und(to5))) {
      to5 = from;
    }
    if (props.reverse)
      [to5, from] = [from, to5];
    const hasFromChanged = !isEqual2(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue2(from);
    const hasToChanged = !isEqual2(to5, prevTo);
    if (hasToChanged) {
      this._focus(to5);
    }
    const hasAsyncTo = isAsyncTo2(props.to);
    const {
      config: config3
    } = anim;
    const {
      decay,
      velocity
    } = config3;
    if (hasToProp || hasFromProp) {
      config3.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig2(config3, callProp2(props.config, key), props.config !== defaultProps.config ? callProp2(defaultProps.config, key) : void 0);
    }
    let node = getAnimated2(this);
    if (!node || is2.und(to5)) {
      return resolve(getFinishedResult2(this, true));
    }
    const reset = is2.und(props.reset) ? hasFromProp && !props.default : !is2.und(from) && matchProp2(props.reset, key);
    const value = reset ? from : this.get();
    const goal = computeGoal2(to5);
    const isAnimatable = is2.num(goal) || is2.arr(goal) || isAnimatedString2(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp2(defaultProps.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType2(to5);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue2(to5);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated2(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual2(computeGoal2(value), goal);
        started = !finished;
      }
      if (!isEqual2(anim.immediate, immediate) && !immediate || !isEqual2(config3.decay, decay) || !isEqual2(config3.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating2(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue2(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue2(to5) ? null : goalType == AnimatedString2 ? [1] : toArray2(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const {
          onRest
        } = anim;
        each2(ACTIVE_EVENTS2, (type) => mergeActiveFn2(this, props, type));
        const result = getFinishedResult2(this, checkFinished2(this, prevTo));
        flushCalls2(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf2.batchedUpdates(() => {
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp2(defaultProps.onRest, result);
            } else {
              anim.onStart == null ? void 0 : anim.onStart(result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync2(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating2(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult2(value));
    }
  }
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers2(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers2(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority3 = 0;
    const {
      to: to5
    } = this.animation;
    if (hasFluidValue2(to5)) {
      addFluidObserver2(to5, this);
      if (isFrameValue2(to5)) {
        priority3 = to5.priority + 1;
      }
    }
    this.priority = priority3;
  }
  _detach() {
    const {
      to: to5
    } = this.animation;
    if (hasFluidValue2(to5)) {
      removeFluidObserver2(to5, this);
    }
  }
  _set(arg, idle = true) {
    const value = getFluidValue2(arg);
    if (!is2.und(value)) {
      const oldNode = getAnimated2(this);
      if (!oldNode || !isEqual2(value, oldNode.getValue())) {
        const nodeType = getAnimatedType2(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated2(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf2.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated2(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent2(this, "onStart", getFinishedResult2(this, checkFinished2(this, anim.to)), this);
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp2(this.animation.onChange, value, this);
    }
    callProp2(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  _start() {
    const anim = this.animation;
    getAnimated2(this).reset(getFluidValue2(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating2(this)) {
      setActiveBit2(this, true);
      if (!isPaused2(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals2.skipAnimation) {
      this.finish();
    } else {
      frameLoop2.start(this);
    }
  }
  _stop(goal, cancel) {
    if (isAnimating2(this)) {
      setActiveBit2(this, false);
      const anim = this.animation;
      each2(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers2(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult2(this.get()) : getFinishedResult2(this.get(), checkFinished2(this, goal != null ? goal : anim.to));
      flushCalls2(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent2(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished2(target, to5) {
  const goal = computeGoal2(to5);
  const value = computeGoal2(target.get());
  return isEqual2(value, goal);
}
function createLoopUpdate2(props, loop3 = props.loop, to5 = props.to) {
  let loopRet = callProp2(loop3);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo2(loopRet);
    const reverse2 = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate2(_extends6({}, props, {
      loop: loop3,
      default: false,
      pause: void 0,
      to: !reverse2 || isAsyncTo2(to5) ? to5 : void 0,
      from: reset ? props.from : void 0,
      reset
    }, overrides));
  }
}
function createUpdate2(props) {
  const {
    to: to5,
    from
  } = props = inferTo2(props);
  const keys = /* @__PURE__ */ new Set();
  if (is2.obj(to5))
    findDefined2(to5, keys);
  if (is2.obj(from))
    findDefined2(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate2(props) {
  const update5 = createUpdate2(props);
  if (is2.und(update5.default)) {
    update5.default = getDefaultProps2(update5);
  }
  return update5;
}
function findDefined2(values, keys) {
  eachProp2(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS2 = ["onStart", "onRest", "onChange", "onPause", "onResume"];
function mergeActiveFn2(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp2(props, type) ? resolveProp2(props[type], target.key) : void 0;
}
function sendEvent2(target, type, ...args) {
  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
  (_target$animation$typ = (_target$animation = target.animation)[type]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);
  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);
}
var BATCHED_EVENTS2 = ["onStart", "onChange", "onRest"];
var nextId2 = 1;
var Controller2 = class {
  constructor(props, flush3) {
    this.id = nextId2++;
    this.springs = {};
    this.queue = [];
    this.ref = void 0;
    this._flush = void 0;
    this._initialProps = void 0;
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._item = void 0;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush3) {
      this._flush = flush3;
    }
    if (props) {
      this.start(_extends6({
        default: true
      }, props));
    }
  }
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => spring.idle);
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is2.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  update(props) {
    if (props) {
      this.queue.push(createUpdate2(props));
    }
    return this;
  }
  start(props) {
    let {
      queue
    } = this;
    if (props) {
      queue = toArray2(props).map(createUpdate2);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys2(this, queue);
    return flushUpdateQueue2(this, queue);
  }
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each2(toArray2(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync2(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  pause(keys) {
    if (is2.und(keys)) {
      this.start({
        pause: true
      });
    } else {
      const springs = this.springs;
      each2(toArray2(keys), (key) => springs[key].pause());
    }
    return this;
  }
  resume(keys) {
    if (is2.und(keys)) {
      this.start({
        pause: false
      });
    } else {
      const springs = this.springs;
      each2(toArray2(keys), (key) => springs[key].resume());
    }
    return this;
  }
  each(iterator) {
    eachProp2(this.springs, iterator);
  }
  _onFrame() {
    const {
      onStart,
      onChange,
      onRest
    } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush2(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush2(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush2(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf2.onFrame(this._onFrame);
  }
};
function flushUpdateQueue2(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate2(ctrl, props))).then((results) => getCombinedResult2(ctrl, results));
}
async function flushUpdate2(ctrl, props, isLoop) {
  const {
    keys,
    to: to5,
    from,
    loop: loop3,
    onRest,
    onResolve
  } = props;
  const defaults3 = is2.obj(props.default) && props.default;
  if (loop3) {
    props.loop = false;
  }
  if (to5 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is2.arr(to5) || is2.fun(to5) ? to5 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults3) {
      defaults3.onRest = void 0;
    }
  } else {
    each2(BATCHED_EVENTS2, (key) => {
      const handler = props[key];
      if (is2.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({
          finished,
          cancelled
        }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults3) {
          defaults3[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls2(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
  const cancel = props.cancel === true || getDefaultProp2(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(scheduleProps2(++ctrl["_lastAsyncId"], {
      props,
      state,
      actions: {
        pause: noop2,
        resume: noop2,
        start(props2, resolve) {
          if (cancel) {
            stopAsync2(state, ctrl["_lastAsyncId"]);
            resolve(getCancelledResult2(ctrl));
          } else {
            props2.onRest = onRest;
            resolve(runAsync2(asyncTo, props2, state, ctrl));
          }
        }
      }
    }));
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult2(ctrl, await Promise.all(promises));
  if (loop3 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate2(props, loop3, to5);
    if (nextProps) {
      prepareKeys2(ctrl, [nextProps]);
      return flushUpdate2(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf2.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings2(ctrl, props) {
  const springs = _extends6({}, ctrl.springs);
  if (props) {
    each2(toArray2(props), (props2) => {
      if (is2.und(props2.keys)) {
        props2 = createUpdate2(props2);
      }
      if (!is2.obj(props2.to)) {
        props2 = _extends6({}, props2, {
          to: void 0
        });
      }
      prepareSprings2(springs, props2, (key) => {
        return createSpring2(key);
      });
    });
  }
  setSprings2(ctrl, springs);
  return springs;
}
function setSprings2(ctrl, springs) {
  eachProp2(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver2(spring, ctrl);
    }
  });
}
function createSpring2(key, observer) {
  const spring = new SpringValue2();
  spring.key = key;
  if (observer) {
    addFluidObserver2(spring, observer);
  }
  return spring;
}
function prepareSprings2(springs, props, create) {
  if (props.keys) {
    each2(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys2(ctrl, queue) {
  each2(queue, (props) => {
    prepareSprings2(ctrl.springs, props, (key) => {
      return createSpring2(key, ctrl);
    });
  });
}
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key = sourceKeys[i3];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$32 = ["children"];
var SpringContext2 = (_ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose3(_ref, _excluded$32);
  const inherited = (0, import_react6.useContext)(ctx2);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne2(() => ({
    pause,
    immediate
  }), [pause, immediate]);
  const {
    Provider
  } = ctx2;
  return React6.createElement(Provider, {
    value: props
  }, children);
};
var ctx2 = makeContext2(SpringContext2, {});
SpringContext2.Provider = ctx2.Provider;
SpringContext2.Consumer = ctx2.Consumer;
function makeContext2(target, init) {
  Object.assign(target, React6.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef2 = () => {
  const current = [];
  const SpringRef3 = function SpringRef4(props) {
    deprecateDirectCall2();
    const results = [];
    each2(current, (ctrl, i3) => {
      if (is2.und(props)) {
        results.push(ctrl.start());
      } else {
        const update5 = _getProps(props, ctrl, i3);
        if (update5) {
          results.push(ctrl.start(update5));
        }
      }
    });
    return results;
  };
  SpringRef3.current = current;
  SpringRef3.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef3.delete = function(ctrl) {
    const i3 = current.indexOf(ctrl);
    if (~i3)
      current.splice(i3, 1);
  };
  SpringRef3.pause = function() {
    each2(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef3.resume = function() {
    each2(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef3.set = function(values) {
    each2(current, (ctrl) => ctrl.set(values));
  };
  SpringRef3.start = function(props) {
    const results = [];
    each2(current, (ctrl, i3) => {
      if (is2.und(props)) {
        results.push(ctrl.start());
      } else {
        const update5 = this._getProps(props, ctrl, i3);
        if (update5) {
          results.push(ctrl.start(update5));
        }
      }
    });
    return results;
  };
  SpringRef3.stop = function() {
    each2(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef3.update = function(props) {
    each2(current, (ctrl, i3) => ctrl.update(this._getProps(props, ctrl, i3)));
    return this;
  };
  const _getProps = function _getProps2(arg, ctrl, index2) {
    return is2.fun(arg) ? arg(index2, ctrl) : arg;
  };
  SpringRef3._getProps = _getProps;
  return SpringRef3;
};
function useSprings2(length, props, deps) {
  const propsFn = is2.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react6.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef2() : void 0, []);
  const layoutId = (0, import_react6.useRef)(0);
  const forceUpdate = useForceUpdate2();
  const state = (0, import_react6.useMemo)(() => ({
    ctrls: [],
    queue: [],
    flush(ctrl, updates2) {
      const springs2 = getSprings2(ctrl, updates2);
      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
      return canFlushSync ? flushUpdateQueue2(ctrl, updates2) : new Promise((resolve) => {
        setSprings2(ctrl, springs2);
        state.queue.push(() => {
          resolve(flushUpdateQueue2(ctrl, updates2));
        });
        forceUpdate();
      });
    }
  }), []);
  const ctrls = (0, import_react6.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev2(length) || 0;
  (0, import_react6.useMemo)(() => {
    each2(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs2(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react6.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i3 = startIndex; i3 < endIndex; i3++) {
      const ctrl = ctrls.current[i3] || (ctrls.current[i3] = new Controller2(null, state.flush));
      const update5 = propsFn ? propsFn(i3, ctrl) : props[i3];
      if (update5) {
        updates[i3] = declareUpdate2(update5);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i3) => getSprings2(ctrl, updates[i3]));
  const context = (0, import_react6.useContext)(SpringContext2);
  const prevContext = usePrev2(context);
  const hasContext = context !== prevContext && hasProps2(context);
  useLayoutEffect4(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const {
      queue
    } = state;
    if (queue.length) {
      state.queue = [];
      each2(queue, (cb) => cb());
    }
    each2(ctrls.current, (ctrl, i3) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({
          default: context
        });
      }
      const update5 = updates[i3];
      if (update5) {
        replaceRef2(ctrl, update5.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update5);
        } else {
          ctrl.start(update5);
        }
      }
    });
  });
  useOnce2(() => () => {
    each2(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x4) => _extends6({}, x4));
  return ref ? [values, ref] : values;
}
function useSpring2(props, deps) {
  const isFn = is2.fun(props);
  const [[values], ref] = useSprings2(1, isFn ? props : [props], isFn ? deps || [] : deps);
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
var TransitionPhase2;
(function(TransitionPhase3) {
  TransitionPhase3["MOUNT"] = "mount";
  TransitionPhase3["ENTER"] = "enter";
  TransitionPhase3["UPDATE"] = "update";
  TransitionPhase3["LEAVE"] = "leave";
})(TransitionPhase2 || (TransitionPhase2 = {}));
var Interpolation2 = class extends FrameValue2 {
  constructor(source, args) {
    super();
    this.key = void 0;
    this.idle = true;
    this.calc = void 0;
    this._active = /* @__PURE__ */ new Set();
    this.source = source;
    this.calc = createInterpolator2(...args);
    const value = this._get();
    const nodeType = getAnimatedType2(value);
    setAnimated2(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual2(value, oldValue)) {
      getAnimated2(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle2(this._active)) {
      becomeIdle2(this);
    }
  }
  _get() {
    const inputs = is2.arr(this.source) ? this.source.map(getFluidValue2) : toArray2(getFluidValue2(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle2(this._active)) {
      this.idle = false;
      each2(getPayload2(this), (node) => {
        node.done = false;
      });
      if (globals2.skipAnimation) {
        raf2.batchedUpdates(() => this.advance());
        becomeIdle2(this);
      } else {
        frameLoop2.start(this);
      }
    }
  }
  _attach() {
    let priority3 = 1;
    each2(toArray2(this.source), (source) => {
      if (hasFluidValue2(source)) {
        addFluidObserver2(source, this);
      }
      if (isFrameValue2(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority3 = Math.max(priority3, source.priority + 1);
      }
    });
    this.priority = priority3;
    this._start();
  }
  _detach() {
    each2(toArray2(this.source), (source) => {
      if (hasFluidValue2(source)) {
        removeFluidObserver2(source, this);
      }
    });
    this._active.clear();
    becomeIdle2(this);
  }
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray2(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue2(parent) ? parent.priority : 0) + 1), 0);
    }
  }
};
function isIdle2(source) {
  return source.idle !== false;
}
function checkIdle2(active) {
  return !active.size || Array.from(active).every(isIdle2);
}
function becomeIdle2(self) {
  if (!self.idle) {
    self.idle = true;
    each2(getPayload2(self), (node) => {
      node.done = true;
    });
    callFluidObservers2(self, {
      type: "idle",
      parent: self
    });
  }
}
var to4 = (source, ...args) => new Interpolation2(source, args);
globals2.assign({
  createStringInterpolator: createStringInterpolator2,
  to: (source, args) => new Interpolation2(source, args)
});
var update4 = frameLoop2.advance;

// ../node_modules/@nivo/core/node_modules/@react-spring/web/dist/react-spring-web.esm.js
var import_react_dom2 = __toESM(require_react_dom());
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i3;
  for (i3 = 0; i3 < sourceKeys.length; i3++) {
    key = sourceKeys[i3];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$22 = ["style", "children", "scrollTop", "scrollLeft"];
var isCustomPropRE2 = /^--/;
function dangerousStyleValue2(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE2.test(name) && !(isUnitlessNumber2.hasOwnProperty(name) && isUnitlessNumber2[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache2 = {};
function applyAnimatedValues2(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const _ref = props, {
    style,
    children,
    scrollTop,
    scrollLeft
  } = _ref, attributes = _objectWithoutPropertiesLoose4(_ref, _excluded$22);
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache2[name] || (attributeCache2[name] = name.replace(/([A-Z])/g, (n3) => "-" + n3.toLowerCase())));
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (let name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue2(name, style[name]);
      if (isCustomPropRE2.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i3) => {
    instance.setAttribute(name, values[i3]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
}
var isUnitlessNumber2 = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey2 = (prefix3, key) => prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes2 = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber2 = Object.keys(isUnitlessNumber2).reduce((acc, prop) => {
  prefixes2.forEach((prefix3) => acc[prefixKey2(prefix3, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber2);
var _excluded$12 = ["x", "y", "z"];
var domTransforms2 = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms2 = /^(translate)/;
var degTransforms2 = /^(rotate|skew)/;
var addUnit2 = (value, unit2) => is2.num(value) && value !== 0 ? value + unit2 : value;
var isValueIdentity2 = (value, id) => is2.arr(value) ? value.every((v3) => isValueIdentity2(v3, id)) : is2.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle2 = class extends AnimatedObject2 {
  constructor(_ref) {
    let {
      x: x4,
      y: y4,
      z: z2
    } = _ref, style = _objectWithoutPropertiesLoose4(_ref, _excluded$12);
    const inputs = [];
    const transforms = [];
    if (x4 || y4 || z2) {
      inputs.push([x4 || 0, y4 || 0, z2 || 0]);
      transforms.push((xyz) => [`translate3d(${xyz.map((v3) => addUnit2(v3, "px")).join(",")})`, isValueIdentity2(xyz, 0)]);
    }
    eachProp2(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms2.test(key)) {
        delete style[key];
        if (is2.und(value))
          return;
        const unit2 = pxTransforms2.test(key) ? "px" : degTransforms2.test(key) ? "deg" : "";
        inputs.push(toArray2(value));
        transforms.push(key === "rotate3d" ? ([x5, y5, z3, deg]) => [`rotate3d(${x5},${y5},${z3},${addUnit2(deg, unit2)})`, isValueIdentity2(deg, 0)] : (input) => [`${key}(${input.map((v3) => addUnit2(v3, unit2)).join(",")})`, isValueIdentity2(input, key.startsWith("scale") ? 1 : 0)]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform2(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform2 = class extends FluidValue2 {
  constructor(inputs, transforms) {
    super();
    this._value = null;
    this.inputs = inputs;
    this.transforms = transforms;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity5 = true;
    each2(this.inputs, (input, i3) => {
      const arg1 = getFluidValue2(input[0]);
      const [t6, id] = this.transforms[i3](is2.arr(arg1) ? arg1 : input.map(getFluidValue2));
      transform += " " + t6;
      identity5 = identity5 && id;
    });
    return identity5 ? "none" : transform;
  }
  observerAdded(count2) {
    if (count2 == 1)
      each2(this.inputs, (input) => each2(input, (value) => hasFluidValue2(value) && addFluidObserver2(value, this)));
  }
  observerRemoved(count2) {
    if (count2 == 0)
      each2(this.inputs, (input) => each2(input, (value) => hasFluidValue2(value) && removeFluidObserver2(value, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers2(this, event);
  }
};
var primitives2 = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
var _excluded2 = ["scrollTop", "scrollLeft"];
globals2.assign({
  batchedUpdates: import_react_dom2.unstable_batchedUpdates,
  createStringInterpolator: createStringInterpolator2,
  colors: colors2
});
var host2 = createHost2(primitives2, {
  applyAnimatedValues: applyAnimatedValues2,
  createAnimatedStyle: (style) => new AnimatedStyle2(style),
  getComponentProps: (_ref) => {
    let props = _objectWithoutPropertiesLoose4(_ref, _excluded2);
    return props;
  }
});
var animated2 = host2.animated;

// ../node_modules/@nivo/core/dist/nivo-core.es.js
var import_isString = __toESM(require_isString());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_last = __toESM(require_last());
var import_isArray = __toESM(require_isArray());

// ../node_modules/d3-array/src/ascending.js
function ascending_default(a3, b3) {
  return a3 < b3 ? -1 : a3 > b3 ? 1 : a3 >= b3 ? 0 : NaN;
}

// ../node_modules/d3-array/src/bisector.js
function bisector_default(f2) {
  let delta = f2;
  let compare = f2;
  if (f2.length === 1) {
    delta = (d2, x4) => f2(d2) - x4;
    compare = ascendingComparator(f2);
  }
  function left(a3, x4, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a3.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a3[mid], x4) < 0)
        lo = mid + 1;
      else
        hi = mid;
    }
    return lo;
  }
  function right(a3, x4, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a3.length;
    while (lo < hi) {
      const mid = lo + hi >>> 1;
      if (compare(a3[mid], x4) > 0)
        hi = mid;
      else
        lo = mid + 1;
    }
    return lo;
  }
  function center(a3, x4, lo, hi) {
    if (lo == null)
      lo = 0;
    if (hi == null)
      hi = a3.length;
    const i3 = left(a3, x4, lo, hi - 1);
    return i3 > lo && delta(a3[i3 - 1], x4) > -delta(a3[i3], x4) ? i3 - 1 : i3;
  }
  return { left, center, right };
}
function ascendingComparator(f2) {
  return (d2, x4) => ascending_default(f2(d2), x4);
}

// ../node_modules/d3-array/src/number.js
function number_default2(x4) {
  return x4 === null ? NaN : +x4;
}

// ../node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector_default(ascending_default);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector_default(number_default2).center;
var bisect_default = bisectRight;

// ../node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// ../node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function ticks_default(start3, stop2, count2) {
  var reverse2, i3 = -1, n3, ticks, step;
  stop2 = +stop2, start3 = +start3, count2 = +count2;
  if (start3 === stop2 && count2 > 0)
    return [start3];
  if (reverse2 = stop2 < start3)
    n3 = start3, start3 = stop2, stop2 = n3;
  if ((step = tickIncrement(start3, stop2, count2)) === 0 || !isFinite(step))
    return [];
  if (step > 0) {
    let r0 = Math.round(start3 / step), r1 = Math.round(stop2 / step);
    if (r0 * step < start3)
      ++r0;
    if (r1 * step > stop2)
      --r1;
    ticks = new Array(n3 = r1 - r0 + 1);
    while (++i3 < n3)
      ticks[i3] = (r0 + i3) * step;
  } else {
    step = -step;
    let r0 = Math.round(start3 * step), r1 = Math.round(stop2 * step);
    if (r0 / step < start3)
      ++r0;
    if (r1 / step > stop2)
      --r1;
    ticks = new Array(n3 = r1 - r0 + 1);
    while (++i3 < n3)
      ticks[i3] = (r0 + i3) / step;
  }
  if (reverse2)
    ticks.reverse();
  return ticks;
}
function tickIncrement(start3, stop2, count2) {
  var step = (stop2 - start3) / Math.max(0, count2), power = Math.floor(Math.log(step) / Math.LN10), error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}
function tickStep(start3, stop2, count2) {
  var step0 = Math.abs(stop2 - start3) / Math.max(0, count2), step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)), error = step0 / step1;
  if (error >= e10)
    step1 *= 10;
  else if (error >= e5)
    step1 *= 5;
  else if (error >= e2)
    step1 *= 2;
  return stop2 < start3 ? -step1 : step1;
}

// ../node_modules/d3-array/src/range.js
function range_default(start3, stop2, step) {
  start3 = +start3, stop2 = +stop2, step = (n3 = arguments.length) < 2 ? (stop2 = start3, start3 = 0, 1) : n3 < 3 ? 1 : +step;
  var i3 = -1, n3 = Math.max(0, Math.ceil((stop2 - start3) / step)) | 0, range = new Array(n3);
  while (++i3 < n3) {
    range[i3] = start3 + i3 * step;
  }
  return range;
}

// ../node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array2, i0 = 0, i1 = array2.length) {
    let m3 = i1 - (i0 = +i0);
    while (m3) {
      const i3 = random() * m3-- | 0, t6 = array2[m3 + i0];
      array2[m3 + i0] = array2[i3 + i0];
      array2[i3 + i0] = t6;
    }
    return array2;
  };
}

// ../node_modules/d3-scale/src/init.js
function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range).domain(domain);
      break;
  }
  return this;
}

// ../node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index2 = /* @__PURE__ */ new Map(), domain = [], range = [], unknown = implicit;
  function scale(d2) {
    var key = d2 + "", i3 = index2.get(key);
    if (!i3) {
      if (unknown !== implicit)
        return unknown;
      index2.set(key, i3 = domain.push(d2));
    }
    return range[(i3 - 1) % range.length];
  }
  scale.domain = function(_) {
    if (!arguments.length)
      return domain.slice();
    domain = [], index2 = /* @__PURE__ */ new Map();
    for (const value of _) {
      const key = value + "";
      if (index2.has(key))
        continue;
      index2.set(key, domain.push(value));
    }
    return scale;
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  scale.copy = function() {
    return ordinal(domain, range).unknown(unknown);
  };
  initRange.apply(scale, arguments);
  return scale;
}

// ../node_modules/d3-scale/src/band.js
function band() {
  var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale.unknown;
  function rescale() {
    var n3 = domain().length, reverse2 = r1 < r0, start3 = reverse2 ? r1 : r0, stop2 = reverse2 ? r0 : r1;
    step = (stop2 - start3) / Math.max(1, n3 - paddingInner + paddingOuter * 2);
    if (round)
      step = Math.floor(step);
    start3 += (stop2 - start3 - step * (n3 - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round)
      start3 = Math.round(start3), bandwidth = Math.round(bandwidth);
    var values = range_default(n3).map(function(i3) {
      return start3 + step * i3;
    });
    return ordinalRange(reverse2 ? values.reverse() : values);
  }
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.range = function(_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale.rangeRound = function(_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale.bandwidth = function() {
    return bandwidth;
  };
  scale.step = function() {
    return step;
  };
  scale.round = function(_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };
  scale.padding = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };
  scale.paddingInner = function(_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };
  scale.paddingOuter = function(_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };
  scale.align = function(_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };
  scale.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale) {
  var copy3 = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;
  scale.copy = function() {
    return pointish(copy3());
  };
  return scale;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

// ../node_modules/d3-color/src/define.js
function define_default2(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend2(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition)
    prototype[key] = definition[key];
  return prototype;
}

// ../node_modules/d3-color/src/color.js
function Color2() {
}
var darker2 = 0.7;
var brighter2 = 1 / darker2;
var reI2 = "\\s*([+-]?\\d+)\\s*";
var reN2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP2 = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex2 = /^#([0-9a-f]{3,8})$/;
var reRgbInteger2 = new RegExp("^rgb\\(" + [reI2, reI2, reI2] + "\\)$");
var reRgbPercent2 = new RegExp("^rgb\\(" + [reP2, reP2, reP2] + "\\)$");
var reRgbaInteger2 = new RegExp("^rgba\\(" + [reI2, reI2, reI2, reN2] + "\\)$");
var reRgbaPercent2 = new RegExp("^rgba\\(" + [reP2, reP2, reP2, reN2] + "\\)$");
var reHslPercent2 = new RegExp("^hsl\\(" + [reN2, reP2, reP2] + "\\)$");
var reHslaPercent2 = new RegExp("^hsla\\(" + [reN2, reP2, reP2, reN2] + "\\)$");
var named2 = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default2(Color2, color2, {
  copy: function(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable: function() {
    return this.rgb().displayable();
  },
  hex: color_formatHex2,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex2,
  formatHsl: color_formatHsl2,
  formatRgb: color_formatRgb2,
  toString: color_formatRgb2
});
function color_formatHex2() {
  return this.rgb().formatHex();
}
function color_formatHsl2() {
  return hslConvert2(this).formatHsl();
}
function color_formatRgb2() {
  return this.rgb().formatRgb();
}
function color2(format2) {
  var m3, l3;
  format2 = (format2 + "").trim().toLowerCase();
  return (m3 = reHex2.exec(format2)) ? (l3 = m3[1].length, m3 = parseInt(m3[1], 16), l3 === 6 ? rgbn2(m3) : l3 === 3 ? new Rgb2(m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, (m3 & 15) << 4 | m3 & 15, 1) : l3 === 8 ? rgba4(m3 >> 24 & 255, m3 >> 16 & 255, m3 >> 8 & 255, (m3 & 255) / 255) : l3 === 4 ? rgba4(m3 >> 12 & 15 | m3 >> 8 & 240, m3 >> 8 & 15 | m3 >> 4 & 240, m3 >> 4 & 15 | m3 & 240, ((m3 & 15) << 4 | m3 & 15) / 255) : null) : (m3 = reRgbInteger2.exec(format2)) ? new Rgb2(m3[1], m3[2], m3[3], 1) : (m3 = reRgbPercent2.exec(format2)) ? new Rgb2(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, 1) : (m3 = reRgbaInteger2.exec(format2)) ? rgba4(m3[1], m3[2], m3[3], m3[4]) : (m3 = reRgbaPercent2.exec(format2)) ? rgba4(m3[1] * 255 / 100, m3[2] * 255 / 100, m3[3] * 255 / 100, m3[4]) : (m3 = reHslPercent2.exec(format2)) ? hsla4(m3[1], m3[2] / 100, m3[3] / 100, 1) : (m3 = reHslaPercent2.exec(format2)) ? hsla4(m3[1], m3[2] / 100, m3[3] / 100, m3[4]) : named2.hasOwnProperty(format2) ? rgbn2(named2[format2]) : format2 === "transparent" ? new Rgb2(NaN, NaN, NaN, 0) : null;
}
function rgbn2(n3) {
  return new Rgb2(n3 >> 16 & 255, n3 >> 8 & 255, n3 & 255, 1);
}
function rgba4(r4, g2, b3, a3) {
  if (a3 <= 0)
    r4 = g2 = b3 = NaN;
  return new Rgb2(r4, g2, b3, a3);
}
function rgbConvert2(o3) {
  if (!(o3 instanceof Color2))
    o3 = color2(o3);
  if (!o3)
    return new Rgb2();
  o3 = o3.rgb();
  return new Rgb2(o3.r, o3.g, o3.b, o3.opacity);
}
function rgb4(r4, g2, b3, opacity) {
  return arguments.length === 1 ? rgbConvert2(r4) : new Rgb2(r4, g2, b3, opacity == null ? 1 : opacity);
}
function Rgb2(r4, g2, b3, opacity) {
  this.r = +r4;
  this.g = +g2;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default2(Rgb2, rgb4, extend2(Color2, {
  brighter: function(k3) {
    k3 = k3 == null ? brighter2 : Math.pow(brighter2, k3);
    return new Rgb2(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  darker: function(k3) {
    k3 = k3 == null ? darker2 : Math.pow(darker2, k3);
    return new Rgb2(this.r * k3, this.g * k3, this.b * k3, this.opacity);
  },
  rgb: function() {
    return this;
  },
  displayable: function() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex2,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex2,
  formatRgb: rgb_formatRgb2,
  toString: rgb_formatRgb2
}));
function rgb_formatHex2() {
  return "#" + hex2(this.r) + hex2(this.g) + hex2(this.b);
}
function rgb_formatRgb2() {
  var a3 = this.opacity;
  a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3));
  return (a3 === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a3 === 1 ? ")" : ", " + a3 + ")");
}
function hex2(value) {
  value = Math.max(0, Math.min(255, Math.round(value) || 0));
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla4(h2, s3, l3, a3) {
  if (a3 <= 0)
    h2 = s3 = l3 = NaN;
  else if (l3 <= 0 || l3 >= 1)
    h2 = s3 = NaN;
  else if (s3 <= 0)
    h2 = NaN;
  return new Hsl2(h2, s3, l3, a3);
}
function hslConvert2(o3) {
  if (o3 instanceof Hsl2)
    return new Hsl2(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Color2))
    o3 = color2(o3);
  if (!o3)
    return new Hsl2();
  if (o3 instanceof Hsl2)
    return o3;
  o3 = o3.rgb();
  var r4 = o3.r / 255, g2 = o3.g / 255, b3 = o3.b / 255, min3 = Math.min(r4, g2, b3), max3 = Math.max(r4, g2, b3), h2 = NaN, s3 = max3 - min3, l3 = (max3 + min3) / 2;
  if (s3) {
    if (r4 === max3)
      h2 = (g2 - b3) / s3 + (g2 < b3) * 6;
    else if (g2 === max3)
      h2 = (b3 - r4) / s3 + 2;
    else
      h2 = (r4 - g2) / s3 + 4;
    s3 /= l3 < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h2 *= 60;
  } else {
    s3 = l3 > 0 && l3 < 1 ? 0 : h2;
  }
  return new Hsl2(h2, s3, l3, o3.opacity);
}
function hsl5(h2, s3, l3, opacity) {
  return arguments.length === 1 ? hslConvert2(h2) : new Hsl2(h2, s3, l3, opacity == null ? 1 : opacity);
}
function Hsl2(h2, s3, l3, opacity) {
  this.h = +h2;
  this.s = +s3;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default2(Hsl2, hsl5, extend2(Color2, {
  brighter: function(k3) {
    k3 = k3 == null ? brighter2 : Math.pow(brighter2, k3);
    return new Hsl2(this.h, this.s, this.l * k3, this.opacity);
  },
  darker: function(k3) {
    k3 = k3 == null ? darker2 : Math.pow(darker2, k3);
    return new Hsl2(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb: function() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s3 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l3 = this.l, m22 = l3 + (l3 < 0.5 ? l3 : 1 - l3) * s3, m1 = 2 * l3 - m22;
    return new Rgb2(
      hsl2rgb2(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb2(h2, m1, m22),
      hsl2rgb2(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  displayable: function() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl: function() {
    var a3 = this.opacity;
    a3 = isNaN(a3) ? 1 : Math.max(0, Math.min(1, a3));
    return (a3 === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a3 === 1 ? ")" : ", " + a3 + ")");
  }
}));
function hsl2rgb2(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// ../node_modules/d3-color/src/math.js
var deg2rad = Math.PI / 180;
var rad2deg = 180 / Math.PI;

// ../node_modules/d3-color/src/lab.js
var K2 = 18;
var Xn2 = 0.96422;
var Yn2 = 1;
var Zn2 = 0.82521;
var t02 = 4 / 29;
var t12 = 6 / 29;
var t22 = 3 * t12 * t12;
var t32 = t12 * t12 * t12;
function labConvert2(o3) {
  if (o3 instanceof Lab2)
    return new Lab2(o3.l, o3.a, o3.b, o3.opacity);
  if (o3 instanceof Hcl2)
    return hcl2lab2(o3);
  if (!(o3 instanceof Rgb2))
    o3 = rgbConvert2(o3);
  var r4 = rgb2lrgb2(o3.r), g2 = rgb2lrgb2(o3.g), b3 = rgb2lrgb2(o3.b), y4 = xyz2lab2((0.2225045 * r4 + 0.7168786 * g2 + 0.0606169 * b3) / Yn2), x4, z2;
  if (r4 === g2 && g2 === b3)
    x4 = z2 = y4;
  else {
    x4 = xyz2lab2((0.4360747 * r4 + 0.3850649 * g2 + 0.1430804 * b3) / Xn2);
    z2 = xyz2lab2((0.0139322 * r4 + 0.0971045 * g2 + 0.7141733 * b3) / Zn2);
  }
  return new Lab2(116 * y4 - 16, 500 * (x4 - y4), 200 * (y4 - z2), o3.opacity);
}
function lab3(l3, a3, b3, opacity) {
  return arguments.length === 1 ? labConvert2(l3) : new Lab2(l3, a3, b3, opacity == null ? 1 : opacity);
}
function Lab2(l3, a3, b3, opacity) {
  this.l = +l3;
  this.a = +a3;
  this.b = +b3;
  this.opacity = +opacity;
}
define_default2(Lab2, lab3, extend2(Color2, {
  brighter: function(k3) {
    return new Lab2(this.l + K2 * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  darker: function(k3) {
    return new Lab2(this.l - K2 * (k3 == null ? 1 : k3), this.a, this.b, this.opacity);
  },
  rgb: function() {
    var y4 = (this.l + 16) / 116, x4 = isNaN(this.a) ? y4 : y4 + this.a / 500, z2 = isNaN(this.b) ? y4 : y4 - this.b / 200;
    x4 = Xn2 * lab2xyz2(x4);
    y4 = Yn2 * lab2xyz2(y4);
    z2 = Zn2 * lab2xyz2(z2);
    return new Rgb2(
      lrgb2rgb2(3.1338561 * x4 - 1.6168667 * y4 - 0.4906146 * z2),
      lrgb2rgb2(-0.9787684 * x4 + 1.9161415 * y4 + 0.033454 * z2),
      lrgb2rgb2(0.0719453 * x4 - 0.2289914 * y4 + 1.4052427 * z2),
      this.opacity
    );
  }
}));
function xyz2lab2(t6) {
  return t6 > t32 ? Math.pow(t6, 1 / 3) : t6 / t22 + t02;
}
function lab2xyz2(t6) {
  return t6 > t12 ? t6 * t6 * t6 : t22 * (t6 - t02);
}
function lrgb2rgb2(x4) {
  return 255 * (x4 <= 31308e-7 ? 12.92 * x4 : 1.055 * Math.pow(x4, 1 / 2.4) - 0.055);
}
function rgb2lrgb2(x4) {
  return (x4 /= 255) <= 0.04045 ? x4 / 12.92 : Math.pow((x4 + 0.055) / 1.055, 2.4);
}
function hclConvert2(o3) {
  if (o3 instanceof Hcl2)
    return new Hcl2(o3.h, o3.c, o3.l, o3.opacity);
  if (!(o3 instanceof Lab2))
    o3 = labConvert2(o3);
  if (o3.a === 0 && o3.b === 0)
    return new Hcl2(NaN, 0 < o3.l && o3.l < 100 ? 0 : NaN, o3.l, o3.opacity);
  var h2 = Math.atan2(o3.b, o3.a) * rad2deg;
  return new Hcl2(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o3.a * o3.a + o3.b * o3.b), o3.l, o3.opacity);
}
function hcl3(h2, c8, l3, opacity) {
  return arguments.length === 1 ? hclConvert2(h2) : new Hcl2(h2, c8, l3, opacity == null ? 1 : opacity);
}
function Hcl2(h2, c8, l3, opacity) {
  this.h = +h2;
  this.c = +c8;
  this.l = +l3;
  this.opacity = +opacity;
}
function hcl2lab2(o3) {
  if (isNaN(o3.h))
    return new Lab2(o3.l, 0, 0, o3.opacity);
  var h2 = o3.h * deg2rad;
  return new Lab2(o3.l, Math.cos(h2) * o3.c, Math.sin(h2) * o3.c, o3.opacity);
}
define_default2(Hcl2, hcl3, extend2(Color2, {
  brighter: function(k3) {
    return new Hcl2(this.h, this.c, this.l + K2 * (k3 == null ? 1 : k3), this.opacity);
  },
  darker: function(k3) {
    return new Hcl2(this.h, this.c, this.l - K2 * (k3 == null ? 1 : k3), this.opacity);
  },
  rgb: function() {
    return hcl2lab2(this).rgb();
  }
}));

// ../node_modules/d3-color/src/cubehelix.js
var A2 = -0.14861;
var B2 = 1.78277;
var C2 = -0.29227;
var D2 = -0.90649;
var E2 = 1.97294;
var ED2 = E2 * D2;
var EB2 = E2 * B2;
var BC_DA2 = B2 * C2 - D2 * A2;
function cubehelixConvert2(o3) {
  if (o3 instanceof Cubehelix2)
    return new Cubehelix2(o3.h, o3.s, o3.l, o3.opacity);
  if (!(o3 instanceof Rgb2))
    o3 = rgbConvert2(o3);
  var r4 = o3.r / 255, g2 = o3.g / 255, b3 = o3.b / 255, l3 = (BC_DA2 * b3 + ED2 * r4 - EB2 * g2) / (BC_DA2 + ED2 - EB2), bl = b3 - l3, k3 = (E2 * (g2 - l3) - C2 * bl) / D2, s3 = Math.sqrt(k3 * k3 + bl * bl) / (E2 * l3 * (1 - l3)), h2 = s3 ? Math.atan2(k3, bl) * rad2deg - 120 : NaN;
  return new Cubehelix2(h2 < 0 ? h2 + 360 : h2, s3, l3, o3.opacity);
}
function cubehelix3(h2, s3, l3, opacity) {
  return arguments.length === 1 ? cubehelixConvert2(h2) : new Cubehelix2(h2, s3, l3, opacity == null ? 1 : opacity);
}
function Cubehelix2(h2, s3, l3, opacity) {
  this.h = +h2;
  this.s = +s3;
  this.l = +l3;
  this.opacity = +opacity;
}
define_default2(Cubehelix2, cubehelix3, extend2(Color2, {
  brighter: function(k3) {
    k3 = k3 == null ? brighter2 : Math.pow(brighter2, k3);
    return new Cubehelix2(this.h, this.s, this.l * k3, this.opacity);
  },
  darker: function(k3) {
    k3 = k3 == null ? darker2 : Math.pow(darker2, k3);
    return new Cubehelix2(this.h, this.s, this.l * k3, this.opacity);
  },
  rgb: function() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad, l3 = +this.l, a3 = isNaN(this.s) ? 0 : this.s * l3 * (1 - l3), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
    return new Rgb2(
      255 * (l3 + a3 * (A2 * cosh2 + B2 * sinh2)),
      255 * (l3 + a3 * (C2 * cosh2 + D2 * sinh2)),
      255 * (l3 + a3 * (E2 * cosh2)),
      this.opacity
    );
  }
}));

// ../node_modules/d3-interpolate/src/basis.js
function basis2(t14, v0, v1, v22, v3) {
  var t23 = t14 * t14, t33 = t23 * t14;
  return ((1 - 3 * t14 + 3 * t23 - t33) * v0 + (4 - 6 * t23 + 3 * t33) * v1 + (1 + 3 * t14 + 3 * t23 - 3 * t33) * v22 + t33 * v3) / 6;
}
function basis_default2(values) {
  var n3 = values.length - 1;
  return function(t6) {
    var i3 = t6 <= 0 ? t6 = 0 : t6 >= 1 ? (t6 = 1, n3 - 1) : Math.floor(t6 * n3), v1 = values[i3], v22 = values[i3 + 1], v0 = i3 > 0 ? values[i3 - 1] : 2 * v1 - v22, v3 = i3 < n3 - 1 ? values[i3 + 2] : 2 * v22 - v1;
    return basis2((t6 - i3 / n3) * n3, v0, v1, v22, v3);
  };
}

// ../node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default2(values) {
  var n3 = values.length;
  return function(t6) {
    var i3 = Math.floor(((t6 %= 1) < 0 ? ++t6 : t6) * n3), v0 = values[(i3 + n3 - 1) % n3], v1 = values[i3 % n3], v22 = values[(i3 + 1) % n3], v3 = values[(i3 + 2) % n3];
    return basis2((t6 - i3 / n3) * n3, v0, v1, v22, v3);
  };
}

// ../node_modules/d3-interpolate/src/constant.js
function constant_default3(x4) {
  return function() {
    return x4;
  };
}

// ../node_modules/d3-interpolate/src/color.js
function linear3(a3, d2) {
  return function(t6) {
    return a3 + t6 * d2;
  };
}
function exponential2(a3, b3, y4) {
  return a3 = Math.pow(a3, y4), b3 = Math.pow(b3, y4) - a3, y4 = 1 / y4, function(t6) {
    return Math.pow(a3 + t6 * b3, y4);
  };
}
function hue2(a3, b3) {
  var d2 = b3 - a3;
  return d2 ? linear3(a3, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default3(isNaN(a3) ? b3 : a3);
}
function gamma2(y4) {
  return (y4 = +y4) === 1 ? nogamma2 : function(a3, b3) {
    return b3 - a3 ? exponential2(a3, b3, y4) : constant_default3(isNaN(a3) ? b3 : a3);
  };
}
function nogamma2(a3, b3) {
  var d2 = b3 - a3;
  return d2 ? linear3(a3, d2) : constant_default3(isNaN(a3) ? b3 : a3);
}

// ../node_modules/d3-interpolate/src/rgb.js
var rgb_default2 = function rgbGamma2(y4) {
  var color3 = gamma2(y4);
  function rgb5(start3, end) {
    var r4 = color3((start3 = rgb4(start3)).r, (end = rgb4(end)).r), g2 = color3(start3.g, end.g), b3 = color3(start3.b, end.b), opacity = nogamma2(start3.opacity, end.opacity);
    return function(t6) {
      start3.r = r4(t6);
      start3.g = g2(t6);
      start3.b = b3(t6);
      start3.opacity = opacity(t6);
      return start3 + "";
    };
  }
  rgb5.gamma = rgbGamma2;
  return rgb5;
}(1);
function rgbSpline2(spline) {
  return function(colors3) {
    var n3 = colors3.length, r4 = new Array(n3), g2 = new Array(n3), b3 = new Array(n3), i3, color3;
    for (i3 = 0; i3 < n3; ++i3) {
      color3 = rgb4(colors3[i3]);
      r4[i3] = color3.r || 0;
      g2[i3] = color3.g || 0;
      b3[i3] = color3.b || 0;
    }
    r4 = spline(r4);
    g2 = spline(g2);
    b3 = spline(b3);
    color3.opacity = 1;
    return function(t6) {
      color3.r = r4(t6);
      color3.g = g2(t6);
      color3.b = b3(t6);
      return color3 + "";
    };
  };
}
var rgbBasis2 = rgbSpline2(basis_default2);
var rgbBasisClosed2 = rgbSpline2(basisClosed_default2);

// ../node_modules/d3-interpolate/src/numberArray.js
function numberArray_default2(a3, b3) {
  if (!b3)
    b3 = [];
  var n3 = a3 ? Math.min(b3.length, a3.length) : 0, c8 = b3.slice(), i3;
  return function(t6) {
    for (i3 = 0; i3 < n3; ++i3)
      c8[i3] = a3[i3] * (1 - t6) + b3[i3] * t6;
    return c8;
  };
}
function isNumberArray2(x4) {
  return ArrayBuffer.isView(x4) && !(x4 instanceof DataView);
}

// ../node_modules/d3-interpolate/src/array.js
function genericArray2(a3, b3) {
  var nb = b3 ? b3.length : 0, na = a3 ? Math.min(nb, a3.length) : 0, x4 = new Array(na), c8 = new Array(nb), i3;
  for (i3 = 0; i3 < na; ++i3)
    x4[i3] = value_default2(a3[i3], b3[i3]);
  for (; i3 < nb; ++i3)
    c8[i3] = b3[i3];
  return function(t6) {
    for (i3 = 0; i3 < na; ++i3)
      c8[i3] = x4[i3](t6);
    return c8;
  };
}

// ../node_modules/d3-interpolate/src/date.js
function date_default2(a3, b3) {
  var d2 = /* @__PURE__ */ new Date();
  return a3 = +a3, b3 = +b3, function(t6) {
    return d2.setTime(a3 * (1 - t6) + b3 * t6), d2;
  };
}

// ../node_modules/d3-interpolate/src/number.js
function number_default3(a3, b3) {
  return a3 = +a3, b3 = +b3, function(t6) {
    return a3 * (1 - t6) + b3 * t6;
  };
}

// ../node_modules/d3-interpolate/src/object.js
function object_default2(a3, b3) {
  var i3 = {}, c8 = {}, k3;
  if (a3 === null || typeof a3 !== "object")
    a3 = {};
  if (b3 === null || typeof b3 !== "object")
    b3 = {};
  for (k3 in b3) {
    if (k3 in a3) {
      i3[k3] = value_default2(a3[k3], b3[k3]);
    } else {
      c8[k3] = b3[k3];
    }
  }
  return function(t6) {
    for (k3 in i3)
      c8[k3] = i3[k3](t6);
    return c8;
  };
}

// ../node_modules/d3-interpolate/src/string.js
var reA2 = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB2 = new RegExp(reA2.source, "g");
function zero2(b3) {
  return function() {
    return b3;
  };
}
function one2(b3) {
  return function(t6) {
    return b3(t6) + "";
  };
}
function string_default2(a3, b3) {
  var bi = reA2.lastIndex = reB2.lastIndex = 0, am, bm, bs, i3 = -1, s3 = [], q = [];
  a3 = a3 + "", b3 = b3 + "";
  while ((am = reA2.exec(a3)) && (bm = reB2.exec(b3))) {
    if ((bs = bm.index) > bi) {
      bs = b3.slice(bi, bs);
      if (s3[i3])
        s3[i3] += bs;
      else
        s3[++i3] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s3[i3])
        s3[i3] += bm;
      else
        s3[++i3] = bm;
    } else {
      s3[++i3] = null;
      q.push({ i: i3, x: number_default3(am, bm) });
    }
    bi = reB2.lastIndex;
  }
  if (bi < b3.length) {
    bs = b3.slice(bi);
    if (s3[i3])
      s3[i3] += bs;
    else
      s3[++i3] = bs;
  }
  return s3.length < 2 ? q[0] ? one2(q[0].x) : zero2(b3) : (b3 = q.length, function(t6) {
    for (var i4 = 0, o3; i4 < b3; ++i4)
      s3[(o3 = q[i4]).i] = o3.x(t6);
    return s3.join("");
  });
}

// ../node_modules/d3-interpolate/src/value.js
function value_default2(a3, b3) {
  var t6 = typeof b3, c8;
  return b3 == null || t6 === "boolean" ? constant_default3(b3) : (t6 === "number" ? number_default3 : t6 === "string" ? (c8 = color2(b3)) ? (b3 = c8, rgb_default2) : string_default2 : b3 instanceof color2 ? rgb_default2 : b3 instanceof Date ? date_default2 : isNumberArray2(b3) ? numberArray_default2 : Array.isArray(b3) ? genericArray2 : typeof b3.valueOf !== "function" && typeof b3.toString !== "function" || isNaN(b3) ? object_default2 : number_default3)(a3, b3);
}

// ../node_modules/d3-interpolate/src/round.js
function round_default2(a3, b3) {
  return a3 = +a3, b3 = +b3, function(t6) {
    return Math.round(a3 * (1 - t6) + b3 * t6);
  };
}

// ../node_modules/d3-interpolate/src/transform/decompose.js
var degrees3 = 180 / Math.PI;
var identity2 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default2(a3, b3, c8, d2, e4, f2) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a3 * a3 + b3 * b3))
    a3 /= scaleX, b3 /= scaleX;
  if (skewX = a3 * c8 + b3 * d2)
    c8 -= a3 * skewX, d2 -= b3 * skewX;
  if (scaleY = Math.sqrt(c8 * c8 + d2 * d2))
    c8 /= scaleY, d2 /= scaleY, skewX /= scaleY;
  if (a3 * d2 < b3 * c8)
    a3 = -a3, b3 = -b3, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e4,
    translateY: f2,
    rotate: Math.atan2(b3, a3) * degrees3,
    skewX: Math.atan(skewX) * degrees3,
    scaleX,
    scaleY
  };
}

// ../node_modules/d3-interpolate/src/transform/parse.js
var cssNode;
var cssRoot;
var cssView;
var svgNode2;
function parseCss2(value) {
  if (value === "none")
    return identity2;
  if (!cssNode)
    cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
  cssNode.style.transform = value;
  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
  cssRoot.removeChild(cssNode);
  value = value.slice(7, -1).split(",");
  return decompose_default2(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
}
function parseSvg2(value) {
  if (value == null)
    return identity2;
  if (!svgNode2)
    svgNode2 = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode2.setAttribute("transform", value);
  if (!(value = svgNode2.transform.baseVal.consolidate()))
    return identity2;
  value = value.matrix;
  return decompose_default2(value.a, value.b, value.c, value.d, value.e, value.f);
}

// ../node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform2(parse, pxComma, pxParen, degParen) {
  function pop(s3) {
    return s3.length ? s3.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s3, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s3.push("translate(", null, pxComma, null, pxParen);
      q.push({ i: i3 - 4, x: number_default3(xa, xb) }, { i: i3 - 2, x: number_default3(ya, yb) });
    } else if (xb || yb) {
      s3.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a3, b3, s3, q) {
    if (a3 !== b3) {
      if (a3 - b3 > 180)
        b3 += 360;
      else if (b3 - a3 > 180)
        a3 += 360;
      q.push({ i: s3.push(pop(s3) + "rotate(", null, degParen) - 2, x: number_default3(a3, b3) });
    } else if (b3) {
      s3.push(pop(s3) + "rotate(" + b3 + degParen);
    }
  }
  function skewX(a3, b3, s3, q) {
    if (a3 !== b3) {
      q.push({ i: s3.push(pop(s3) + "skewX(", null, degParen) - 2, x: number_default3(a3, b3) });
    } else if (b3) {
      s3.push(pop(s3) + "skewX(" + b3 + degParen);
    }
  }
  function scale(xa, ya, xb, yb, s3, q) {
    if (xa !== xb || ya !== yb) {
      var i3 = s3.push(pop(s3) + "scale(", null, ",", null, ")");
      q.push({ i: i3 - 4, x: number_default3(xa, xb) }, { i: i3 - 2, x: number_default3(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s3.push(pop(s3) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a3, b3) {
    var s3 = [], q = [];
    a3 = parse(a3), b3 = parse(b3);
    translate(a3.translateX, a3.translateY, b3.translateX, b3.translateY, s3, q);
    rotate(a3.rotate, b3.rotate, s3, q);
    skewX(a3.skewX, b3.skewX, s3, q);
    scale(a3.scaleX, a3.scaleY, b3.scaleX, b3.scaleY, s3, q);
    a3 = b3 = null;
    return function(t6) {
      var i3 = -1, n3 = q.length, o3;
      while (++i3 < n3)
        s3[(o3 = q[i3]).i] = o3.x(t6);
      return s3.join("");
    };
  };
}
var interpolateTransformCss2 = interpolateTransform2(parseCss2, "px, ", "px)", "deg)");
var interpolateTransformSvg2 = interpolateTransform2(parseSvg2, ", ", ")", ")");

// ../node_modules/d3-interpolate/src/hsl.js
function hsl6(hue3) {
  return function(start3, end) {
    var h2 = hue3((start3 = hsl5(start3)).h, (end = hsl5(end)).h), s3 = nogamma2(start3.s, end.s), l3 = nogamma2(start3.l, end.l), opacity = nogamma2(start3.opacity, end.opacity);
    return function(t6) {
      start3.h = h2(t6);
      start3.s = s3(t6);
      start3.l = l3(t6);
      start3.opacity = opacity(t6);
      return start3 + "";
    };
  };
}
var hsl_default2 = hsl6(hue2);
var hslLong2 = hsl6(nogamma2);

// ../node_modules/d3-interpolate/src/hcl.js
function hcl4(hue3) {
  return function(start3, end) {
    var h2 = hue3((start3 = hcl3(start3)).h, (end = hcl3(end)).h), c8 = nogamma2(start3.c, end.c), l3 = nogamma2(start3.l, end.l), opacity = nogamma2(start3.opacity, end.opacity);
    return function(t6) {
      start3.h = h2(t6);
      start3.c = c8(t6);
      start3.l = l3(t6);
      start3.opacity = opacity(t6);
      return start3 + "";
    };
  };
}
var hcl_default2 = hcl4(hue2);
var hclLong2 = hcl4(nogamma2);

// ../node_modules/d3-interpolate/src/cubehelix.js
function cubehelix4(hue3) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix5(start3, end) {
      var h2 = hue3((start3 = cubehelix3(start3)).h, (end = cubehelix3(end)).h), s3 = nogamma2(start3.s, end.s), l3 = nogamma2(start3.l, end.l), opacity = nogamma2(start3.opacity, end.opacity);
      return function(t6) {
        start3.h = h2(t6);
        start3.s = s3(t6);
        start3.l = l3(Math.pow(t6, y4));
        start3.opacity = opacity(t6);
        return start3 + "";
      };
    }
    cubehelix5.gamma = cubehelixGamma;
    return cubehelix5;
  }(1);
}
var cubehelix_default2 = cubehelix4(hue2);
var cubehelixLong2 = cubehelix4(nogamma2);

// ../node_modules/d3-scale/src/constant.js
function constants(x4) {
  return function() {
    return x4;
  };
}

// ../node_modules/d3-scale/src/number.js
function number(x4) {
  return +x4;
}

// ../node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity3(x4) {
  return x4;
}
function normalize(a3, b3) {
  return (b3 -= a3 = +a3) ? function(x4) {
    return (x4 - a3) / b3;
  } : constants(isNaN(b3) ? NaN : 0.5);
}
function clamper(a3, b3) {
  var t6;
  if (a3 > b3)
    t6 = a3, a3 = b3, b3 = t6;
  return function(x4) {
    return Math.max(a3, Math.min(b3, x4));
  };
}
function bimap(domain, range, interpolate3) {
  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
  if (d1 < d0)
    d0 = normalize(d1, d0), r0 = interpolate3(r1, r0);
  else
    d0 = normalize(d0, d1), r0 = interpolate3(r0, r1);
  return function(x4) {
    return r0(d0(x4));
  };
}
function polymap(domain, range, interpolate3) {
  var j2 = Math.min(domain.length, range.length) - 1, d2 = new Array(j2), r4 = new Array(j2), i3 = -1;
  if (domain[j2] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }
  while (++i3 < j2) {
    d2[i3] = normalize(domain[i3], domain[i3 + 1]);
    r4[i3] = interpolate3(range[i3], range[i3 + 1]);
  }
  return function(x4) {
    var i4 = bisect_default(domain, x4, 1, j2) - 1;
    return r4[i4](d2[i4](x4));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range = unit, interpolate3 = value_default2, transform, untransform, unknown, clamp = identity3, piecewise3, output, input;
  function rescale() {
    var n3 = Math.min(domain.length, range.length);
    if (clamp !== identity3)
      clamp = clamper(domain[0], domain[n3 - 1]);
    piecewise3 = n3 > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }
  function scale(x4) {
    return x4 == null || isNaN(x4 = +x4) ? unknown : (output || (output = piecewise3(domain.map(transform), range, interpolate3)))(transform(clamp(x4)));
  }
  scale.invert = function(y4) {
    return clamp(untransform((input || (input = piecewise3(range, domain.map(transform), number_default3)))(y4)));
  };
  scale.domain = function(_) {
    return arguments.length ? (domain = Array.from(_, number), rescale()) : domain.slice();
  };
  scale.range = function(_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };
  scale.rangeRound = function(_) {
    return range = Array.from(_), interpolate3 = round_default2, rescale();
  };
  scale.clamp = function(_) {
    return arguments.length ? (clamp = _ ? true : identity3, rescale()) : clamp !== identity3;
  };
  scale.interpolate = function(_) {
    return arguments.length ? (interpolate3 = _, rescale()) : interpolate3;
  };
  scale.unknown = function(_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };
  return function(t6, u2) {
    transform = t6, untransform = u2;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity3, identity3);
}

// ../node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x4) {
  return Math.abs(x4 = Math.round(x4)) >= 1e21 ? x4.toLocaleString("en").replace(/,/g, "") : x4.toString(10);
}
function formatDecimalParts(x4, p2) {
  if ((i3 = (x4 = p2 ? x4.toExponential(p2 - 1) : x4.toExponential()).indexOf("e")) < 0)
    return null;
  var i3, coefficient = x4.slice(0, i3);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x4.slice(i3 + 1)
  ];
}

// ../node_modules/d3-format/src/exponent.js
function exponent_default(x4) {
  return x4 = formatDecimalParts(Math.abs(x4)), x4 ? x4[1] : NaN;
}

// ../node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i3 = value.length, t6 = [], j2 = 0, g2 = grouping[0], length = 0;
    while (i3 > 0 && g2 > 0) {
      if (length + g2 + 1 > width)
        g2 = Math.max(1, width - length);
      t6.push(value.substring(i3 -= g2, i3 + g2));
      if ((length += g2 + 1) > width)
        break;
      g2 = grouping[j2 = (j2 + 1) % grouping.length];
    }
    return t6.reverse().join(thousands);
  };
}

// ../node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i3) {
      return numerals[+i3];
    });
  };
}

// ../node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier)))
    throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// ../node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s3) {
  out:
    for (var n3 = s3.length, i3 = 1, i0 = -1, i1; i3 < n3; ++i3) {
      switch (s3[i3]) {
        case ".":
          i0 = i1 = i3;
          break;
        case "0":
          if (i0 === 0)
            i0 = i3;
          i1 = i3;
          break;
        default:
          if (!+s3[i3])
            break out;
          if (i0 > 0)
            i0 = 0;
          break;
      }
    }
  return i0 > 0 ? s3.slice(0, i0) + s3.slice(i1 + 1) : s3;
}

// ../node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x4, p2) {
  var d2 = formatDecimalParts(x4, p2);
  if (!d2)
    return x4 + "";
  var coefficient = d2[0], exponent = d2[1], i3 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n3 = coefficient.length;
  return i3 === n3 ? coefficient : i3 > n3 ? coefficient + new Array(i3 - n3 + 1).join("0") : i3 > 0 ? coefficient.slice(0, i3) + "." + coefficient.slice(i3) : "0." + new Array(1 - i3).join("0") + formatDecimalParts(x4, Math.max(0, p2 + i3 - 1))[0];
}

// ../node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x4, p2) {
  var d2 = formatDecimalParts(x4, p2);
  if (!d2)
    return x4 + "";
  var coefficient = d2[0], exponent = d2[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// ../node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": function(x4, p2) {
    return (x4 * 100).toFixed(p2);
  },
  "b": function(x4) {
    return Math.round(x4).toString(2);
  },
  "c": function(x4) {
    return x4 + "";
  },
  "d": formatDecimal_default,
  "e": function(x4, p2) {
    return x4.toExponential(p2);
  },
  "f": function(x4, p2) {
    return x4.toFixed(p2);
  },
  "g": function(x4, p2) {
    return x4.toPrecision(p2);
  },
  "o": function(x4) {
    return Math.round(x4).toString(8);
  },
  "p": function(x4, p2) {
    return formatRounded_default(x4 * 100, p2);
  },
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": function(x4) {
    return Math.round(x4).toString(16).toUpperCase();
  },
  "x": function(x4) {
    return Math.round(x4).toString(16);
  }
};

// ../node_modules/d3-format/src/identity.js
function identity_default2(x4) {
  return x4;
}

// ../node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes3 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale3) {
  var group2 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default2 : formatGroup_default(map3.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default2 : formatNumerals_default(map3.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "-" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n")
      comma = true, type = "g";
    else if (!formatTypes_default[type])
      precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero3 || fill === "0" && align === "=")
      zero3 = true, fill = "0", align = "=";
    var prefix3 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix3, valueSuffix = suffix, i3, n3, c8;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim)
          value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign2 !== "+")
          valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes3[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i3 = -1, n3 = value.length;
          while (++i3 < n3) {
            if (c8 = value.charCodeAt(i3), 48 > c8 || c8 > 57) {
              valueSuffix = (c8 === 46 ? decimal + value.slice(i3 + 1) : value.slice(i3)) + valueSuffix;
              value = value.slice(0, i3);
              break;
            }
          }
        }
      }
      if (comma && !zero3)
        value = group2(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3)
        value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e4 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k3 = Math.pow(10, -e4), prefix3 = prefixes3[8 + e4 / 3];
    return function(value2) {
      return f2(k3 * value2) + prefix3;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// ../node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// ../node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// ../node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// ../node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent_default(max3) - exponent_default(step)) + 1;
}

// ../node_modules/d3-scale/src/tickFormat.js
function tickFormat(start3, stop2, count2, specifier) {
  var step = tickStep(start3, stop2, count2), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start3), Math.abs(stop2));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value)))
        specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start3), Math.abs(stop2)))))
        specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step)))
        specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// ../node_modules/d3-scale/src/linear.js
function linearish(scale) {
  var domain = scale.domain;
  scale.ticks = function(count2) {
    var d2 = domain();
    return ticks_default(d2[0], d2[d2.length - 1], count2 == null ? 10 : count2);
  };
  scale.tickFormat = function(count2, specifier) {
    var d2 = domain();
    return tickFormat(d2[0], d2[d2.length - 1], count2 == null ? 10 : count2, specifier);
  };
  scale.nice = function(count2) {
    if (count2 == null)
      count2 = 10;
    var d2 = domain();
    var i0 = 0;
    var i1 = d2.length - 1;
    var start3 = d2[i0];
    var stop2 = d2[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop2 < start3) {
      step = start3, start3 = stop2, stop2 = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start3, stop2, count2);
      if (step === prestep) {
        d2[i0] = start3;
        d2[i1] = stop2;
        return domain(d2);
      } else if (step > 0) {
        start3 = Math.floor(start3 / step) * step;
        stop2 = Math.ceil(stop2 / step) * step;
      } else if (step < 0) {
        start3 = Math.ceil(start3 * step) / step;
        stop2 = Math.floor(stop2 * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale;
  };
  return scale;
}
function linear4() {
  var scale = continuous();
  scale.copy = function() {
    return copy(scale, linear4());
  };
  initRange.apply(scale, arguments);
  return linearish(scale);
}

// ../node_modules/d3-scale/src/nice.js
function nice2(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t6;
  if (x1 < x0) {
    t6 = i0, i0 = i1, i1 = t6;
    t6 = x0, x0 = x1, x1 = t6;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

// ../node_modules/d3-scale/src/log.js
function transformLog(x4) {
  return Math.log(x4);
}
function transformExp(x4) {
  return Math.exp(x4);
}
function transformLogn(x4) {
  return -Math.log(-x4);
}
function transformExpn(x4) {
  return -Math.exp(-x4);
}
function pow10(x4) {
  return isFinite(x4) ? +("1e" + x4) : x4 < 0 ? 0 : x4;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : function(x4) {
    return Math.pow(base, x4);
  };
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function(x4) {
    return Math.log(x4) / base;
  });
}
function reflect(f2) {
  return function(x4) {
    return -f2(-x4);
  };
}
function loggish(transform) {
  var scale = transform(transformLog, transformExp), domain = scale.domain, base = 10, logs, pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale;
  }
  scale.base = function(_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };
  scale.domain = function(_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };
  scale.ticks = function(count2) {
    var d2 = domain(), u2 = d2[0], v3 = d2[d2.length - 1], r4;
    if (r4 = v3 < u2)
      i3 = u2, u2 = v3, v3 = i3;
    var i3 = logs(u2), j2 = logs(v3), p2, k3, t6, n3 = count2 == null ? 10 : +count2, z2 = [];
    if (!(base % 1) && j2 - i3 < n3) {
      i3 = Math.floor(i3), j2 = Math.ceil(j2);
      if (u2 > 0)
        for (; i3 <= j2; ++i3) {
          for (k3 = 1, p2 = pows(i3); k3 < base; ++k3) {
            t6 = p2 * k3;
            if (t6 < u2)
              continue;
            if (t6 > v3)
              break;
            z2.push(t6);
          }
        }
      else
        for (; i3 <= j2; ++i3) {
          for (k3 = base - 1, p2 = pows(i3); k3 >= 1; --k3) {
            t6 = p2 * k3;
            if (t6 < u2)
              continue;
            if (t6 > v3)
              break;
            z2.push(t6);
          }
        }
      if (z2.length * 2 < n3)
        z2 = ticks_default(u2, v3, n3);
    } else {
      z2 = ticks_default(i3, j2, Math.min(j2 - i3, n3)).map(pows);
    }
    return r4 ? z2.reverse() : z2;
  };
  scale.tickFormat = function(count2, specifier) {
    if (specifier == null)
      specifier = base === 10 ? ".0e" : ",";
    if (typeof specifier !== "function")
      specifier = format(specifier);
    if (count2 === Infinity)
      return specifier;
    if (count2 == null)
      count2 = 10;
    var k3 = Math.max(1, base * count2 / scale.ticks().length);
    return function(d2) {
      var i3 = d2 / pows(Math.round(logs(d2)));
      if (i3 * base < base - 0.5)
        i3 *= base;
      return i3 <= k3 ? specifier(d2) : "";
    };
  };
  scale.nice = function() {
    return domain(nice2(domain(), {
      floor: function(x4) {
        return pows(Math.floor(logs(x4)));
      },
      ceil: function(x4) {
        return pows(Math.ceil(logs(x4)));
      }
    }));
  };
  return scale;
}
function log() {
  var scale = loggish(transformer()).domain([1, 10]);
  scale.copy = function() {
    return copy(scale, log()).base(scale.base());
  };
  initRange.apply(scale, arguments);
  return scale;
}

// ../node_modules/d3-scale/src/symlog.js
function transformSymlog(c8) {
  return function(x4) {
    return Math.sign(x4) * Math.log1p(Math.abs(x4 / c8));
  };
}
function transformSymexp(c8) {
  return function(x4) {
    return Math.sign(x4) * Math.expm1(Math.abs(x4)) * c8;
  };
}
function symlogish(transform) {
  var c8 = 1, scale = transform(transformSymlog(c8), transformSymexp(c8));
  scale.constant = function(_) {
    return arguments.length ? transform(transformSymlog(c8 = +_), transformSymexp(c8)) : c8;
  };
  return linearish(scale);
}
function symlog() {
  var scale = symlogish(transformer());
  scale.copy = function() {
    return copy(scale, symlog()).constant(scale.constant());
  };
  return initRange.apply(scale, arguments);
}

// ../node_modules/d3-time/src/interval.js
var t03 = /* @__PURE__ */ new Date();
var t13 = /* @__PURE__ */ new Date();
function newInterval(floori, offseti, count2, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = function(date2) {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = function(date2) {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = function(date2) {
    var d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = function(date2, step) {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval.range = function(start3, stop2, step) {
    var range = [], previous;
    start3 = interval.ceil(start3);
    step = step == null ? 1 : Math.floor(step);
    if (!(start3 < stop2) || !(step > 0))
      return range;
    do
      range.push(previous = /* @__PURE__ */ new Date(+start3)), offseti(start3, step), floori(start3);
    while (previous < start3 && start3 < stop2);
    return range;
  };
  interval.filter = function(test) {
    return newInterval(function(date2) {
      if (date2 >= date2)
        while (floori(date2), !test(date2))
          date2.setTime(date2 - 1);
    }, function(date2, step) {
      if (date2 >= date2) {
        if (step < 0)
          while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
        else
          while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
      }
    });
  };
  if (count2) {
    interval.count = function(start3, end) {
      t03.setTime(+start3), t13.setTime(+end);
      floori(t03), floori(t13);
      return Math.floor(count2(t03, t13));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d2) {
        return field(d2) % step === 0;
      } : function(d2) {
        return interval.count(0, d2) % step === 0;
      });
    };
  }
  return interval;
}

// ../node_modules/d3-time/src/millisecond.js
var millisecond = newInterval(function() {
}, function(date2, step) {
  date2.setTime(+date2 + step);
}, function(start3, end) {
  return end - start3;
});
millisecond.every = function(k3) {
  k3 = Math.floor(k3);
  if (!isFinite(k3) || !(k3 > 0))
    return null;
  if (!(k3 > 1))
    return millisecond;
  return newInterval(function(date2) {
    date2.setTime(Math.floor(date2 / k3) * k3);
  }, function(date2, step) {
    date2.setTime(+date2 + step * k3);
  }, function(start3, end) {
    return (end - start3) / k3;
  });
};
var millisecond_default = millisecond;
var milliseconds = millisecond.range;

// ../node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// ../node_modules/d3-time/src/second.js
var second = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds());
}, function(date2, step) {
  date2.setTime(+date2 + step * durationSecond);
}, function(start3, end) {
  return (end - start3) / durationSecond;
}, function(date2) {
  return date2.getUTCSeconds();
});
var second_default = second;
var seconds = second.range;

// ../node_modules/d3-time/src/minute.js
var minute = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute);
}, function(start3, end) {
  return (end - start3) / durationMinute;
}, function(date2) {
  return date2.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// ../node_modules/d3-time/src/hour.js
var hour = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour);
}, function(start3, end) {
  return (end - start3) / durationHour;
}, function(date2) {
  return date2.getHours();
});
var hour_default = hour;
var hours = hour.range;

// ../node_modules/d3-time/src/day.js
var day = newInterval(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step) => date2.setDate(date2.getDate() + step),
  (start3, end) => (end - start3 - (end.getTimezoneOffset() - start3.getTimezoneOffset()) * durationMinute) / durationDay,
  (date2) => date2.getDate() - 1
);
var day_default = day;
var days = day.range;

// ../node_modules/d3-time/src/week.js
function weekday(i3) {
  return newInterval(function(date2) {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i3) % 7);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setDate(date2.getDate() + step * 7);
  }, function(start3, end) {
    return (end - start3 - (end.getTimezoneOffset() - start3.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// ../node_modules/d3-time/src/month.js
var month = newInterval(function(date2) {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setMonth(date2.getMonth() + step);
}, function(start3, end) {
  return end.getMonth() - start3.getMonth() + (end.getFullYear() - start3.getFullYear()) * 12;
}, function(date2) {
  return date2.getMonth();
});
var month_default = month;
var months = month.range;

// ../node_modules/d3-time/src/year.js
var year = newInterval(function(date2) {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setFullYear(date2.getFullYear() + step);
}, function(start3, end) {
  return end.getFullYear() - start3.getFullYear();
}, function(date2) {
  return date2.getFullYear();
});
year.every = function(k3) {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval(function(date2) {
    date2.setFullYear(Math.floor(date2.getFullYear() / k3) * k3);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setFullYear(date2.getFullYear() + step * k3);
  });
};
var year_default = year;
var years = year.range;

// ../node_modules/d3-time/src/utcMinute.js
var utcMinute = newInterval(function(date2) {
  date2.setUTCSeconds(0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute);
}, function(start3, end) {
  return (end - start3) / durationMinute;
}, function(date2) {
  return date2.getUTCMinutes();
});
var utcMinute_default = utcMinute;
var utcMinutes = utcMinute.range;

// ../node_modules/d3-time/src/utcHour.js
var utcHour = newInterval(function(date2) {
  date2.setUTCMinutes(0, 0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour);
}, function(start3, end) {
  return (end - start3) / durationHour;
}, function(date2) {
  return date2.getUTCHours();
});
var utcHour_default = utcHour;
var utcHours = utcHour.range;

// ../node_modules/d3-time/src/utcDay.js
var utcDay = newInterval(function(date2) {
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCDate(date2.getUTCDate() + step);
}, function(start3, end) {
  return (end - start3) / durationDay;
}, function(date2) {
  return date2.getUTCDate() - 1;
});
var utcDay_default = utcDay;
var utcDays = utcDay.range;

// ../node_modules/d3-time/src/utcWeek.js
function utcWeekday(i3) {
  return newInterval(function(date2) {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i3) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, function(start3, end) {
    return (end - start3) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// ../node_modules/d3-time/src/utcMonth.js
var utcMonth = newInterval(function(date2) {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, function(start3, end) {
  return end.getUTCMonth() - start3.getUTCMonth() + (end.getUTCFullYear() - start3.getUTCFullYear()) * 12;
}, function(date2) {
  return date2.getUTCMonth();
});
var utcMonth_default = utcMonth;
var utcMonths = utcMonth.range;

// ../node_modules/d3-time/src/utcYear.js
var utcYear = newInterval(function(date2) {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, function(start3, end) {
  return end.getUTCFullYear() - start3.getUTCFullYear();
}, function(date2) {
  return date2.getUTCFullYear();
});
utcYear.every = function(k3) {
  return !isFinite(k3 = Math.floor(k3)) || !(k3 > 0) ? null : newInterval(function(date2) {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k3) * k3);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k3);
  });
};
var utcYear_default = utcYear;
var utcYears = utcYear.range;

// ../node_modules/d3-time/src/ticks.js
function ticker(year2, month2, week, day2, hour2, minute2) {
  const tickIntervals = [
    [second_default, 1, durationSecond],
    [second_default, 5, 5 * durationSecond],
    [second_default, 15, 15 * durationSecond],
    [second_default, 30, 30 * durationSecond],
    [minute2, 1, durationMinute],
    [minute2, 5, 5 * durationMinute],
    [minute2, 15, 15 * durationMinute],
    [minute2, 30, 30 * durationMinute],
    [hour2, 1, durationHour],
    [hour2, 3, 3 * durationHour],
    [hour2, 6, 6 * durationHour],
    [hour2, 12, 12 * durationHour],
    [day2, 1, durationDay],
    [day2, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month2, 1, durationMonth],
    [month2, 3, 3 * durationMonth],
    [year2, 1, durationYear]
  ];
  function ticks(start3, stop2, count2) {
    const reverse2 = stop2 < start3;
    if (reverse2)
      [start3, stop2] = [stop2, start3];
    const interval = count2 && typeof count2.range === "function" ? count2 : tickInterval(start3, stop2, count2);
    const ticks2 = interval ? interval.range(start3, +stop2 + 1) : [];
    return reverse2 ? ticks2.reverse() : ticks2;
  }
  function tickInterval(start3, stop2, count2) {
    const target = Math.abs(stop2 - start3) / count2;
    const i3 = bisector_default(([, , step2]) => step2).right(tickIntervals, target);
    if (i3 === tickIntervals.length)
      return year2.every(tickStep(start3 / durationYear, stop2 / durationYear, count2));
    if (i3 === 0)
      return millisecond_default.every(Math.max(tickStep(start3, stop2, count2), 1));
    const [t6, step] = tickIntervals[target / tickIntervals[i3 - 1][2] < tickIntervals[i3][2] / target ? i3 - 1 : i3];
    return t6.every(step);
  }
  return [ticks, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default);
var [timeTicks, timeTickInterval] = ticker(year_default, month_default, sunday, day_default, hour_default, minute_default);

// ../node_modules/d3-time-format/src/locale.js
function localDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date2 = new Date(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
    date2.setFullYear(d2.y);
    return date2;
  }
  return new Date(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
}
function utcDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date2 = new Date(Date.UTC(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
    date2.setUTCFullYear(d2.y);
    return date2;
  }
  return new Date(Date.UTC(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
}
function newDate(y4, m3, d2) {
  return { y: y4, m: m3, d: d2, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i3 = -1, j2 = 0, n3 = specifier.length, c8, pad2, format2;
      if (!(date2 instanceof Date))
        date2 = /* @__PURE__ */ new Date(+date2);
      while (++i3 < n3) {
        if (specifier.charCodeAt(i3) === 37) {
          string.push(specifier.slice(j2, i3));
          if ((pad2 = pads[c8 = specifier.charAt(++i3)]) != null)
            c8 = specifier.charAt(++i3);
          else
            pad2 = c8 === "e" ? " " : "0";
          if (format2 = formats2[c8])
            c8 = format2(date2, pad2);
          string.push(c8);
          j2 = i3 + 1;
        }
      }
      string.push(specifier.slice(j2, i3));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d2 = newDate(1900, void 0, 1), i3 = parseSpecifier(d2, specifier, string += "", 0), week, day2;
      if (i3 != string.length)
        return null;
      if ("Q" in d2)
        return new Date(d2.Q);
      if ("s" in d2)
        return new Date(d2.s * 1e3 + ("L" in d2 ? d2.L : 0));
      if (Z && !("Z" in d2))
        d2.Z = 0;
      if ("p" in d2)
        d2.H = d2.H % 12 + d2.p * 12;
      if (d2.m === void 0)
        d2.m = "q" in d2 ? d2.q : 0;
      if ("V" in d2) {
        if (d2.V < 1 || d2.V > 53)
          return null;
        if (!("w" in d2))
          d2.w = 1;
        if ("Z" in d2) {
          week = utcDate(newDate(d2.y, 0, 1)), day2 = week.getUTCDay();
          week = day2 > 4 || day2 === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay_default.offset(week, (d2.V - 1) * 7);
          d2.y = week.getUTCFullYear();
          d2.m = week.getUTCMonth();
          d2.d = week.getUTCDate() + (d2.w + 6) % 7;
        } else {
          week = localDate(newDate(d2.y, 0, 1)), day2 = week.getDay();
          week = day2 > 4 || day2 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d2.V - 1) * 7);
          d2.y = week.getFullYear();
          d2.m = week.getMonth();
          d2.d = week.getDate() + (d2.w + 6) % 7;
        }
      } else if ("W" in d2 || "U" in d2) {
        if (!("w" in d2))
          d2.w = "u" in d2 ? d2.u % 7 : "W" in d2 ? 1 : 0;
        day2 = "Z" in d2 ? utcDate(newDate(d2.y, 0, 1)).getUTCDay() : localDate(newDate(d2.y, 0, 1)).getDay();
        d2.m = 0;
        d2.d = "W" in d2 ? (d2.w + 6) % 7 + d2.W * 7 - (day2 + 5) % 7 : d2.w + d2.U * 7 - (day2 + 6) % 7;
      }
      if ("Z" in d2) {
        d2.H += d2.Z / 100 | 0;
        d2.M += d2.Z % 100;
        return utcDate(d2);
      }
      return localDate(d2);
    };
  }
  function parseSpecifier(d2, specifier, string, j2) {
    var i3 = 0, n3 = specifier.length, m3 = string.length, c8, parse;
    while (i3 < n3) {
      if (j2 >= m3)
        return -1;
      c8 = specifier.charCodeAt(i3++);
      if (c8 === 37) {
        c8 = specifier.charAt(i3++);
        parse = parses[c8 in pads ? specifier.charAt(i3++) : c8];
        if (!parse || (j2 = parse(d2, string, j2)) < 0)
          return -1;
      } else if (c8 != string.charCodeAt(j2++)) {
        return -1;
      }
    }
    return j2;
  }
  function parsePeriod(d2, string, i3) {
    var n3 = periodRe.exec(string.slice(i3));
    return n3 ? (d2.p = periodLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseShortWeekday(d2, string, i3) {
    var n3 = shortWeekdayRe.exec(string.slice(i3));
    return n3 ? (d2.w = shortWeekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseWeekday(d2, string, i3) {
    var n3 = weekdayRe.exec(string.slice(i3));
    return n3 ? (d2.w = weekdayLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseShortMonth(d2, string, i3) {
    var n3 = shortMonthRe.exec(string.slice(i3));
    return n3 ? (d2.m = shortMonthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseMonth(d2, string, i3) {
    var n3 = monthRe.exec(string.slice(i3));
    return n3 ? (d2.m = monthLookup.get(n3[0].toLowerCase()), i3 + n3[0].length) : -1;
  }
  function parseLocaleDateTime(d2, string, i3) {
    return parseSpecifier(d2, locale_dateTime, string, i3);
  }
  function parseLocaleDate(d2, string, i3) {
    return parseSpecifier(d2, locale_date, string, i3);
  }
  function parseLocaleTime(d2, string, i3) {
    return parseSpecifier(d2, locale_time, string, i3);
  }
  function formatShortWeekday(d2) {
    return locale_shortWeekdays[d2.getDay()];
  }
  function formatWeekday(d2) {
    return locale_weekdays[d2.getDay()];
  }
  function formatShortMonth(d2) {
    return locale_shortMonths[d2.getMonth()];
  }
  function formatMonth(d2) {
    return locale_months[d2.getMonth()];
  }
  function formatPeriod(d2) {
    return locale_periods[+(d2.getHours() >= 12)];
  }
  function formatQuarter(d2) {
    return 1 + ~~(d2.getMonth() / 3);
  }
  function formatUTCShortWeekday(d2) {
    return locale_shortWeekdays[d2.getUTCDay()];
  }
  function formatUTCWeekday(d2) {
    return locale_weekdays[d2.getUTCDay()];
  }
  function formatUTCShortMonth(d2) {
    return locale_shortMonths[d2.getUTCMonth()];
  }
  function formatUTCMonth(d2) {
    return locale_months[d2.getUTCMonth()];
  }
  function formatUTCPeriod(d2) {
    return locale_periods[+(d2.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d2) {
    return 1 + ~~(d2.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f2 = newFormat(specifier += "", formats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f2 = newFormat(specifier += "", utcFormats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s3) {
  return s3.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i3) => [name.toLowerCase(), i3]));
}
function parseWeekdayNumberSunday(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 1));
  return n3 ? (d2.w = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekdayNumberMonday(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 1));
  return n3 ? (d2.u = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberSunday(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.U = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberISO(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.V = +n3[0], i3 + n3[0].length) : -1;
}
function parseWeekNumberMonday(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.W = +n3[0], i3 + n3[0].length) : -1;
}
function parseFullYear(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 4));
  return n3 ? (d2.y = +n3[0], i3 + n3[0].length) : -1;
}
function parseYear(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.y = +n3[0] + (+n3[0] > 68 ? 1900 : 2e3), i3 + n3[0].length) : -1;
}
function parseZone(d2, string, i3) {
  var n3 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i3, i3 + 6));
  return n3 ? (d2.Z = n3[1] ? 0 : -(n3[2] + (n3[3] || "00")), i3 + n3[0].length) : -1;
}
function parseQuarter(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 1));
  return n3 ? (d2.q = n3[0] * 3 - 3, i3 + n3[0].length) : -1;
}
function parseMonthNumber(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.m = n3[0] - 1, i3 + n3[0].length) : -1;
}
function parseDayOfMonth(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.d = +n3[0], i3 + n3[0].length) : -1;
}
function parseDayOfYear(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 3));
  return n3 ? (d2.m = 0, d2.d = +n3[0], i3 + n3[0].length) : -1;
}
function parseHour24(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.H = +n3[0], i3 + n3[0].length) : -1;
}
function parseMinutes(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.M = +n3[0], i3 + n3[0].length) : -1;
}
function parseSeconds(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 2));
  return n3 ? (d2.S = +n3[0], i3 + n3[0].length) : -1;
}
function parseMilliseconds(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 3));
  return n3 ? (d2.L = +n3[0], i3 + n3[0].length) : -1;
}
function parseMicroseconds(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3, i3 + 6));
  return n3 ? (d2.L = Math.floor(n3[0] / 1e3), i3 + n3[0].length) : -1;
}
function parseLiteralPercent(d2, string, i3) {
  var n3 = percentRe.exec(string.slice(i3, i3 + 1));
  return n3 ? i3 + n3[0].length : -1;
}
function parseUnixTimestamp(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3));
  return n3 ? (d2.Q = +n3[0], i3 + n3[0].length) : -1;
}
function parseUnixTimestampSeconds(d2, string, i3) {
  var n3 = numberRe.exec(string.slice(i3));
  return n3 ? (d2.s = +n3[0], i3 + n3[0].length) : -1;
}
function formatDayOfMonth(d2, p2) {
  return pad(d2.getDate(), p2, 2);
}
function formatHour24(d2, p2) {
  return pad(d2.getHours(), p2, 2);
}
function formatHour12(d2, p2) {
  return pad(d2.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d2, p2) {
  return pad(1 + day_default.count(year_default(d2), d2), p2, 3);
}
function formatMilliseconds(d2, p2) {
  return pad(d2.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d2, p2) {
  return formatMilliseconds(d2, p2) + "000";
}
function formatMonthNumber(d2, p2) {
  return pad(d2.getMonth() + 1, p2, 2);
}
function formatMinutes(d2, p2) {
  return pad(d2.getMinutes(), p2, 2);
}
function formatSeconds(d2, p2) {
  return pad(d2.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d2) {
  var day2 = d2.getDay();
  return day2 === 0 ? 7 : day2;
}
function formatWeekNumberSunday(d2, p2) {
  return pad(sunday.count(year_default(d2) - 1, d2), p2, 2);
}
function dISO(d2) {
  var day2 = d2.getDay();
  return day2 >= 4 || day2 === 0 ? thursday(d2) : thursday.ceil(d2);
}
function formatWeekNumberISO(d2, p2) {
  d2 = dISO(d2);
  return pad(thursday.count(year_default(d2), d2) + (year_default(d2).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d2) {
  return d2.getDay();
}
function formatWeekNumberMonday(d2, p2) {
  return pad(monday.count(year_default(d2) - 1, d2), p2, 2);
}
function formatYear(d2, p2) {
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatYearISO(d2, p2) {
  d2 = dISO(d2);
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatFullYear(d2, p2) {
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d2, p2) {
  var day2 = d2.getDay();
  d2 = day2 >= 4 || day2 === 0 ? thursday(d2) : thursday.ceil(d2);
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatZone(d2) {
  var z2 = d2.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth(d2, p2) {
  return pad(d2.getUTCDate(), p2, 2);
}
function formatUTCHour24(d2, p2) {
  return pad(d2.getUTCHours(), p2, 2);
}
function formatUTCHour12(d2, p2) {
  return pad(d2.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d2, p2) {
  return pad(1 + utcDay_default.count(utcYear_default(d2), d2), p2, 3);
}
function formatUTCMilliseconds(d2, p2) {
  return pad(d2.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d2, p2) {
  return formatUTCMilliseconds(d2, p2) + "000";
}
function formatUTCMonthNumber(d2, p2) {
  return pad(d2.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d2, p2) {
  return pad(d2.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d2, p2) {
  return pad(d2.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d2) {
  var dow = d2.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d2, p2) {
  return pad(utcSunday.count(utcYear_default(d2) - 1, d2), p2, 2);
}
function UTCdISO(d2) {
  var day2 = d2.getUTCDay();
  return day2 >= 4 || day2 === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
}
function formatUTCWeekNumberISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(utcThursday.count(utcYear_default(d2), d2) + (utcYear_default(d2).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d2) {
  return d2.getUTCDay();
}
function formatUTCWeekNumberMonday(d2, p2) {
  return pad(utcMonday.count(utcYear_default(d2) - 1, d2), p2, 2);
}
function formatUTCYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d2, p2) {
  var day2 = d2.getUTCDay();
  d2 = day2 >= 4 || day2 === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d2) {
  return +d2;
}
function formatUnixTimestampSeconds(d2) {
  return Math.floor(+d2 / 1e3);
}

// ../node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// ../node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date2) {
  return date2.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// ../node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date2 = new Date(string);
  return isNaN(date2) ? null : date2;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// ../node_modules/d3-scale/src/time.js
function date(t6) {
  return new Date(t6);
}
function number2(t6) {
  return t6 instanceof Date ? +t6 : +/* @__PURE__ */ new Date(+t6);
}
function calendar(ticks, tickInterval, year2, month2, week, day2, hour2, minute2, second2, format2) {
  var scale = continuous(), invert = scale.invert, domain = scale.domain;
  var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
  function tickFormat2(date2) {
    return (second2(date2) < date2 ? formatMillisecond : minute2(date2) < date2 ? formatSecond : hour2(date2) < date2 ? formatMinute : day2(date2) < date2 ? formatHour : month2(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year2(date2) < date2 ? formatMonth : formatYear2)(date2);
  }
  scale.invert = function(y4) {
    return new Date(invert(y4));
  };
  scale.domain = function(_) {
    return arguments.length ? domain(Array.from(_, number2)) : domain().map(date);
  };
  scale.ticks = function(interval) {
    var d2 = domain();
    return ticks(d2[0], d2[d2.length - 1], interval == null ? 10 : interval);
  };
  scale.tickFormat = function(count2, specifier) {
    return specifier == null ? tickFormat2 : format2(specifier);
  };
  scale.nice = function(interval) {
    var d2 = domain();
    if (!interval || typeof interval.range !== "function")
      interval = tickInterval(d2[0], d2[d2.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice2(d2, interval)) : scale;
  };
  scale.copy = function() {
    return copy(scale, calendar(ticks, tickInterval, year2, month2, week, day2, hour2, minute2, second2, format2));
  };
  return scale;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, year_default, month_default, sunday, day_default, hour_default, minute_default, second_default, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// ../node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear_default, utcMonth_default, utcSunday, utcDay_default, utcHour_default, utcMinute_default, second_default, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n3 = specifier.length / 6 | 0, colors3 = new Array(n3), i3 = 0;
  while (i3 < n3)
    colors3[i3] = "#" + specifier.slice(i3 * 6, ++i3 * 6);
  return colors3;
}

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default3 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var c = cubehelix();

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c6 = rgb2();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;

// ../node_modules/@nivo/core/node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range) {
  var n3 = range.length;
  return function(t6) {
    return range[Math.max(0, Math.min(n3 - 1, Math.floor(t6 * n3)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// ../node_modules/@nivo/core/dist/nivo-core.es.js
var import_isFunction = __toESM(require_isFunction());
var import_without = __toESM(require_without());

// ../node_modules/d3-path/src/path.js
var pi = Math.PI;
var tau = 2 * pi;
var epsilon = 1e-6;
var tauEpsilon = tau - epsilon;
function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null;
  this._ = "";
}
function path() {
  return new Path();
}
Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function(x4, y4) {
    this._ += "M" + (this._x0 = this._x1 = +x4) + "," + (this._y0 = this._y1 = +y4);
  },
  closePath: function() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function(x4, y4) {
    this._ += "L" + (this._x1 = +x4) + "," + (this._y1 = +y4);
  },
  quadraticCurveTo: function(x1, y1, x4, y4) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x4) + "," + (this._y1 = +y4);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x4, y4) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x22 + "," + +y22 + "," + (this._x1 = +x4) + "," + (this._y1 = +y4);
  },
  arcTo: function(x1, y1, x22, y22, r4) {
    x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r4 = +r4;
    var x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (r4 < 0)
      throw new Error("negative radius: " + r4);
    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else if (!(l01_2 > epsilon))
      ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r4) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    } else {
      var x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l3 = r4 * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l3 / l01, t21 = l3 / l21;
      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }
      this._ += "A" + r4 + "," + r4 + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function(x4, y4, r4, a0, a1, ccw) {
    x4 = +x4, y4 = +y4, r4 = +r4, ccw = !!ccw;
    var dx = r4 * Math.cos(a0), dy = r4 * Math.sin(a0), x0 = x4 + dx, y0 = y4 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
    if (r4 < 0)
      throw new Error("negative radius: " + r4);
    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    }
    if (!r4)
      return;
    if (da < 0)
      da = da % tau + tau;
    if (da > tauEpsilon) {
      this._ += "A" + r4 + "," + r4 + ",0,1," + cw + "," + (x4 - dx) + "," + (y4 - dy) + "A" + r4 + "," + r4 + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } else if (da > epsilon) {
      this._ += "A" + r4 + "," + r4 + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x4 + r4 * Math.cos(a1)) + "," + (this._y1 = y4 + r4 * Math.sin(a1));
    }
  },
  rect: function(x4, y4, w2, h2) {
    this._ += "M" + (this._x0 = this._x1 = +x4) + "," + (this._y0 = this._y1 = +y4) + "h" + +w2 + "v" + +h2 + "h" + -w2 + "Z";
  },
  toString: function() {
    return this._;
  }
};
var path_default = path;

// ../node_modules/d3-shape/src/constant.js
function constant_default4(x4) {
  return function constant() {
    return x4;
  };
}

// ../node_modules/d3-shape/src/math.js
var abs = Math.abs;
var atan2 = Math.atan2;
var cos = Math.cos;
var max2 = Math.max;
var min2 = Math.min;
var sin = Math.sin;
var sqrt2 = Math.sqrt;
var epsilon3 = 1e-12;
var pi2 = Math.PI;
var halfPi = pi2 / 2;
var tau2 = 2 * pi2;
function acos(x4) {
  return x4 > 1 ? 0 : x4 < -1 ? pi2 : Math.acos(x4);
}
function asin(x4) {
  return x4 >= 1 ? halfPi : x4 <= -1 ? -halfPi : Math.asin(x4);
}

// ../node_modules/d3-shape/src/arc.js
function arcInnerRadius(d2) {
  return d2.innerRadius;
}
function arcOuterRadius(d2) {
  return d2.outerRadius;
}
function arcStartAngle(d2) {
  return d2.startAngle;
}
function arcEndAngle(d2) {
  return d2.endAngle;
}
function arcPadAngle(d2) {
  return d2 && d2.padAngle;
}
function intersect(x0, y0, x1, y1, x22, y22, x32, y32) {
  var x10 = x1 - x0, y10 = y1 - y0, x322 = x32 - x22, y322 = y32 - y22, t6 = y322 * x10 - x322 * y10;
  if (t6 * t6 < epsilon3)
    return;
  t6 = (x322 * (y0 - y22) - y322 * (x0 - x22)) / t6;
  return [x0 + t6 * x10, y0 + t6 * y10];
}
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1, y01 = y0 - y1, lo = (cw ? rc : -rc) / sqrt2(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x11 = x0 + ox, y11 = y0 + oy, x10 = x1 + ox, y10 = y1 + oy, x00 = (x11 + x10) / 2, y00 = (y11 + y10) / 2, dx = x10 - x11, dy = y10 - y11, d2 = dx * dx + dy * dy, r4 = r1 - rc, D3 = x11 * y10 - x10 * y11, d3 = (dy < 0 ? -1 : 1) * sqrt2(max2(0, r4 * r4 * d2 - D3 * D3)), cx0 = (D3 * dy - dx * d3) / d2, cy0 = (-D3 * dx - dy * d3) / d2, cx1 = (D3 * dy + dx * d3) / d2, cy1 = (-D3 * dx + dy * d3) / d2, dx0 = cx0 - x00, dy0 = cy0 - y00, dx1 = cx1 - x00, dy1 = cy1 - y00;
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1)
    cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r4 - 1),
    y11: cy0 * (r1 / r4 - 1)
  };
}
function arc_default() {
  var innerRadius = arcInnerRadius, outerRadius = arcOuterRadius, cornerRadius = constant_default4(0), padRadius = null, startAngle = arcStartAngle, endAngle = arcEndAngle, padAngle = arcPadAngle, context = null;
  function arc() {
    var buffer, r4, r0 = +innerRadius.apply(this, arguments), r1 = +outerRadius.apply(this, arguments), a0 = startAngle.apply(this, arguments) - halfPi, a1 = endAngle.apply(this, arguments) - halfPi, da = abs(a1 - a0), cw = a1 > a0;
    if (!context)
      context = buffer = path_default();
    if (r1 < r0)
      r4 = r1, r1 = r0, r0 = r4;
    if (!(r1 > epsilon3))
      context.moveTo(0, 0);
    else if (da > tau2 - epsilon3) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon3) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } else {
      var a01 = a0, a11 = a1, a00 = a0, a10 = a1, da0 = da, da1 = da, ap = padAngle.apply(this, arguments) / 2, rp = ap > epsilon3 && (padRadius ? +padRadius.apply(this, arguments) : sqrt2(r0 * r0 + r1 * r1)), rc = min2(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)), rc0 = rc, rc1 = rc, t04, t14;
      if (rp > epsilon3) {
        var p0 = asin(rp / r0 * sin(ap)), p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon3)
          p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;
        else
          da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon3)
          p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;
        else
          da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }
      var x01 = r1 * cos(a01), y01 = r1 * sin(a01), x10 = r0 * cos(a10), y10 = r0 * sin(a10);
      if (rc > epsilon3) {
        var x11 = r1 * cos(a11), y11 = r1 * sin(a11), x00 = r0 * cos(a00), y00 = r0 * sin(a00), oc;
        if (da < pi2 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0], ay = y01 - oc[1], bx = x11 - oc[0], by = y11 - oc[1], kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt2(ax * ax + ay * ay) * sqrt2(bx * bx + by * by))) / 2), lc = sqrt2(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = min2(rc, (r0 - lc) / (kc - 1));
          rc1 = min2(rc, (r1 - lc) / (kc + 1));
        }
      }
      if (!(da1 > epsilon3))
        context.moveTo(x01, y01);
      else if (rc1 > epsilon3) {
        t04 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t14 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t04.cx + t04.x01, t04.cy + t04.y01);
        if (rc1 < rc)
          context.arc(t04.cx, t04.cy, rc1, atan2(t04.y01, t04.x01), atan2(t14.y01, t14.x01), !cw);
        else {
          context.arc(t04.cx, t04.cy, rc1, atan2(t04.y01, t04.x01), atan2(t04.y11, t04.x11), !cw);
          context.arc(0, 0, r1, atan2(t04.cy + t04.y11, t04.cx + t04.x11), atan2(t14.cy + t14.y11, t14.cx + t14.x11), !cw);
          context.arc(t14.cx, t14.cy, rc1, atan2(t14.y11, t14.x11), atan2(t14.y01, t14.x01), !cw);
        }
      } else
        context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);
      if (!(r0 > epsilon3) || !(da0 > epsilon3))
        context.lineTo(x10, y10);
      else if (rc0 > epsilon3) {
        t04 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t14 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t04.cx + t04.x01, t04.cy + t04.y01);
        if (rc0 < rc)
          context.arc(t04.cx, t04.cy, rc0, atan2(t04.y01, t04.x01), atan2(t14.y01, t14.x01), !cw);
        else {
          context.arc(t04.cx, t04.cy, rc0, atan2(t04.y01, t04.x01), atan2(t04.y11, t04.x11), !cw);
          context.arc(0, 0, r0, atan2(t04.cy + t04.y11, t04.cx + t04.x11), atan2(t14.cy + t14.y11, t14.cx + t14.x11), cw);
          context.arc(t14.cx, t14.cy, rc0, atan2(t14.y11, t14.x11), atan2(t14.y01, t14.x01), !cw);
        }
      } else
        context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer)
      return context = null, buffer + "" || null;
  }
  arc.centroid = function() {
    var r4 = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a3 = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi2 / 2;
    return [cos(a3) * r4, sin(a3) * r4];
  };
  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant_default4(+_), arc) : innerRadius;
  };
  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant_default4(+_), arc) : outerRadius;
  };
  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant_default4(+_), arc) : cornerRadius;
  };
  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant_default4(+_), arc) : padRadius;
  };
  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default4(+_), arc) : startAngle;
  };
  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default4(+_), arc) : endAngle;
  };
  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default4(+_), arc) : padAngle;
  };
  arc.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };
  return arc;
}

// ../node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x4, y4);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// ../node_modules/d3-shape/src/point.js
function x(p2) {
  return p2[0];
}
function y(p2) {
  return p2[1];
}

// ../node_modules/d3-shape/src/line.js
function line_default() {
  var x4 = x, y4 = y, defined = constant_default4(true), context = null, curve = linear_default, output = null;
  function line(data) {
    var i3, n3 = data.length, d2, defined0 = false, buffer;
    if (context == null)
      output = curve(buffer = path_default());
    for (i3 = 0; i3 <= n3; ++i3) {
      if (!(i3 < n3 && defined(d2 = data[i3], i3, data)) === defined0) {
        if (defined0 = !defined0)
          output.lineStart();
        else
          output.lineEnd();
      }
      if (defined0)
        output.point(+x4(d2, i3, data), +y4(d2, i3, data));
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  line.x = function(_) {
    return arguments.length ? (x4 = typeof _ === "function" ? _ : constant_default4(+_), line) : x4;
  };
  line.y = function(_) {
    return arguments.length ? (y4 = typeof _ === "function" ? _ : constant_default4(+_), line) : y4;
  };
  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default4(!!_), line) : defined;
  };
  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };
  return line;
}

// ../node_modules/d3-shape/src/area.js
function area_default() {
  var x0 = x, x1 = null, y0 = constant_default4(0), y1 = y, defined = constant_default4(true), context = null, curve = linear_default, output = null;
  function area(data) {
    var i3, j2, k3, n3 = data.length, d2, defined0 = false, buffer, x0z = new Array(n3), y0z = new Array(n3);
    if (context == null)
      output = curve(buffer = path_default());
    for (i3 = 0; i3 <= n3; ++i3) {
      if (!(i3 < n3 && defined(d2 = data[i3], i3, data)) === defined0) {
        if (defined0 = !defined0) {
          j2 = i3;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k3 = i3 - 1; k3 >= j2; --k3) {
            output.point(x0z[k3], y0z[k3]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i3] = +x0(d2, i3, data), y0z[i3] = +y0(d2, i3, data);
        output.point(x1 ? +x1(d2, i3, data) : x0z[i3], y1 ? +y1(d2, i3, data) : y0z[i3]);
      }
    }
    if (buffer)
      return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default4(+_), x1 = null, area) : x0;
  };
  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default4(+_), area) : x0;
  };
  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default4(+_), area) : x1;
  };
  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default4(+_), y1 = null, area) : y0;
  };
  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default4(+_), area) : y0;
  };
  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default4(+_), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant_default4(!!_), area) : defined;
  };
  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };
  return area;
}

// ../node_modules/d3-shape/src/descending.js
function descending_default2(a3, b3) {
  return b3 < a3 ? -1 : b3 > a3 ? 1 : b3 >= a3 ? 0 : NaN;
}

// ../node_modules/d3-shape/src/identity.js
function identity_default3(d2) {
  return d2;
}

// ../node_modules/d3-shape/src/pie.js
function pie_default() {
  var value = identity_default3, sortValues = descending_default2, sort2 = null, startAngle = constant_default4(0), endAngle = constant_default4(tau2), padAngle = constant_default4(0);
  function pie(data) {
    var i3, n3 = data.length, j2, k3, sum3 = 0, index2 = new Array(n3), arcs = new Array(n3), a0 = +startAngle.apply(this, arguments), da = Math.min(tau2, Math.max(-tau2, endAngle.apply(this, arguments) - a0)), a1, p2 = Math.min(Math.abs(da) / n3, padAngle.apply(this, arguments)), pa = p2 * (da < 0 ? -1 : 1), v3;
    for (i3 = 0; i3 < n3; ++i3) {
      if ((v3 = arcs[index2[i3] = i3] = +value(data[i3], i3, data)) > 0) {
        sum3 += v3;
      }
    }
    if (sortValues != null)
      index2.sort(function(i4, j3) {
        return sortValues(arcs[i4], arcs[j3]);
      });
    else if (sort2 != null)
      index2.sort(function(i4, j3) {
        return sort2(data[i4], data[j3]);
      });
    for (i3 = 0, k3 = sum3 ? (da - n3 * pa) / sum3 : 0; i3 < n3; ++i3, a0 = a1) {
      j2 = index2[i3], v3 = arcs[j2], a1 = a0 + (v3 > 0 ? v3 * k3 : 0) + pa, arcs[j2] = {
        data: data[j2],
        index: i3,
        value: v3,
        startAngle: a0,
        endAngle: a1,
        padAngle: p2
      };
    }
    return arcs;
  }
  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant_default4(+_), pie) : value;
  };
  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort2 = null, pie) : sortValues;
  };
  pie.sort = function(_) {
    return arguments.length ? (sort2 = _, sortValues = null, pie) : sort2;
  };
  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant_default4(+_), pie) : startAngle;
  };
  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant_default4(+_), pie) : endAngle;
  };
  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant_default4(+_), pie) : padAngle;
  };
  return pie;
}

// ../node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a3, r4) {
    this._curve.point(r4 * Math.sin(a3), r4 * -Math.cos(a3));
  }
};
function curveRadial(curve) {
  function radial2(context) {
    return new Radial(curve(context));
  }
  radial2._curve = curve;
  return radial2;
}

// ../node_modules/d3-shape/src/array.js
var slice2 = Array.prototype.slice;

// ../node_modules/d3-shape/src/symbol/diamond.js
var tan30 = Math.sqrt(1 / 3);
var tan30_2 = tan30 * 2;

// ../node_modules/d3-shape/src/symbol/star.js
var kr = Math.sin(pi2 / 10) / Math.sin(7 * pi2 / 10);
var kx = Math.sin(tau2 / 10) * kr;
var ky = -Math.cos(tau2 / 10) * kr;

// ../node_modules/d3-shape/src/symbol/triangle.js
var sqrt3 = Math.sqrt(3);

// ../node_modules/d3-shape/src/symbol/wye.js
var s = Math.sqrt(3) / 2;
var k = 1 / Math.sqrt(12);
var a = (k / 2 + 1) * 3;

// ../node_modules/d3-shape/src/noop.js
function noop_default() {
}

// ../node_modules/d3-shape/src/curve/basis.js
function point2(that, x4, y4) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x4) / 6,
    (that._y0 + 4 * that._y1 + y4) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point2(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point2(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x4;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basis_default3(context) {
  return new Basis(context);
}

// ../node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x4, this._y2 = y4;
        break;
      case 1:
        this._point = 2;
        this._x3 = x4, this._y3 = y4;
        break;
      case 2:
        this._point = 3;
        this._x4 = x4, this._y4 = y4;
        this._context.moveTo((this._x0 + 4 * this._x1 + x4) / 6, (this._y0 + 4 * this._y1 + y4) / 6);
        break;
      default:
        point2(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x4;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basisClosed_default3(context) {
  return new BasisClosed(context);
}

// ../node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x4) / 6, y0 = (this._y0 + 4 * this._y1 + y4) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x4;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basisOpen_default(context) {
  return new BasisOpen(context);
}

// ../node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x4 = this._x, y4 = this._y, j2 = x4.length - 1;
    if (j2 > 0) {
      var x0 = x4[0], y0 = y4[0], dx = x4[j2] - x0, dy = y4[j2] - y0, i3 = -1, t6;
      while (++i3 <= j2) {
        t6 = i3 / j2;
        this._basis.point(
          this._beta * x4[i3] + (1 - this._beta) * (x0 + t6 * dx),
          this._beta * y4[i3] + (1 - this._beta) * (y0 + t6 * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x4, y4) {
    this._x.push(+x4);
    this._y.push(+y4);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// ../node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x4, y4) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x4),
    that._y2 + that._k * (that._y1 - y4),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point3(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
        this._x1 = x4, this._y1 = y4;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// ../node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x4, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x4, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x4, this._y5 = y4;
        break;
      default:
        point3(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// ../node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// ../node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x4, y4) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon3) {
    var a3 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n3 = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a3 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n3;
    y1 = (y1 * a3 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n3;
  }
  if (that._l23_a > epsilon3) {
    var b3 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m3 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b3 + that._x1 * that._l23_2a - x4 * that._l12_2a) / m3;
    y22 = (y22 * b3 + that._y1 * that._l23_2a - y4 * that._l12_2a) / m3;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x4, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point4(this, x4, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// ../node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x4, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x4, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x4, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x4, this._y5 = y4;
        break;
      default:
        point4(this, x4, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// ../node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x4, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point4(this, x4, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// ../node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point)
      this._context.closePath();
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    if (this._point)
      this._context.lineTo(x4, y4);
    else
      this._point = 1, this._context.moveTo(x4, y4);
  }
};
function linearClosed_default(context) {
  return new LinearClosed(context);
}

// ../node_modules/d3-shape/src/curve/monotone.js
function sign(x4) {
  return x4 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p2 = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p2)) || 0;
}
function slope2(that, t6) {
  var h2 = that._x1 - that._x0;
  return h2 ? (3 * (that._y1 - that._y0) / h2 - t6) / 2 : t6;
}
function point5(that, t04, t14) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t04, x1 - dx, y1 - dx * t14, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point5(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    var t14 = NaN;
    x4 = +x4, y4 = +y4;
    if (x4 === this._x1 && y4 === this._y1)
      return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point5(this, slope2(this, t14 = slope3(this, x4, y4)), t14);
        break;
      default:
        point5(this, this._t0, t14 = slope3(this, x4, y4));
        break;
    }
    this._x0 = this._x1, this._x1 = x4;
    this._y0 = this._y1, this._y1 = y4;
    this._t0 = t14;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x4, y4) {
  MonotoneX.prototype.point.call(this, y4, x4);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x4, y4) {
    this._context.moveTo(y4, x4);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x4, y4) {
    this._context.lineTo(y4, x4);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x4, y4) {
    this._context.bezierCurveTo(y1, x1, y22, x22, y4, x4);
  }
};
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}

// ../node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x4 = this._x, y4 = this._y, n3 = x4.length;
    if (n3) {
      this._line ? this._context.lineTo(x4[0], y4[0]) : this._context.moveTo(x4[0], y4[0]);
      if (n3 === 2) {
        this._context.lineTo(x4[1], y4[1]);
      } else {
        var px = controlPoints(x4), py = controlPoints(y4);
        for (var i0 = 0, i1 = 1; i1 < n3; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x4[i1], y4[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n3 === 1)
      this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x4, y4) {
    this._x.push(+x4);
    this._y.push(+y4);
  }
};
function controlPoints(x4) {
  var i3, n3 = x4.length - 1, m3, a3 = new Array(n3), b3 = new Array(n3), r4 = new Array(n3);
  a3[0] = 0, b3[0] = 2, r4[0] = x4[0] + 2 * x4[1];
  for (i3 = 1; i3 < n3 - 1; ++i3)
    a3[i3] = 1, b3[i3] = 4, r4[i3] = 4 * x4[i3] + 2 * x4[i3 + 1];
  a3[n3 - 1] = 2, b3[n3 - 1] = 7, r4[n3 - 1] = 8 * x4[n3 - 1] + x4[n3];
  for (i3 = 1; i3 < n3; ++i3)
    m3 = a3[i3] / b3[i3 - 1], b3[i3] -= m3, r4[i3] -= m3 * r4[i3 - 1];
  a3[n3 - 1] = r4[n3 - 1] / b3[n3 - 1];
  for (i3 = n3 - 2; i3 >= 0; --i3)
    a3[i3] = (r4[i3] - a3[i3 + 1]) / b3[i3];
  b3[n3 - 1] = (x4[n3] + a3[n3 - 1]) / 2;
  for (i3 = 0; i3 < n3 - 1; ++i3)
    b3[i3] = 2 * x4[i3 + 1] - a3[i3 + 1];
  return [a3, b3];
}
function natural_default(context) {
  return new Natural(context);
}

// ../node_modules/d3-shape/src/curve/step.js
function Step(context, t6) {
  this._context = context;
  this._t = t6;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2)
      this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1)
      this._context.closePath();
    if (this._line >= 0)
      this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y4);
          this._context.lineTo(x4, y4);
        } else {
          var x1 = this._x * (1 - this._t) + x4 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y4);
        }
        break;
      }
    }
    this._x = x4, this._y = y4;
  }
};
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}

// ../node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n3 = series.length) > 1))
    return;
  for (var i3 = 1, j2, s0, s1 = series[order[0]], n3, m3 = s1.length; i3 < n3; ++i3) {
    s0 = s1, s1 = series[order[i3]];
    for (j2 = 0; j2 < m3; ++j2) {
      s1[j2][1] += s1[j2][0] = isNaN(s0[j2][1]) ? s0[j2][0] : s0[j2][1];
    }
  }
}

// ../node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n3 = series.length, o3 = new Array(n3);
  while (--n3 >= 0)
    o3[n3] = n3;
  return o3;
}

// ../node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var i3, n3, j2 = 0, m3 = series[0].length, y4; j2 < m3; ++j2) {
    for (y4 = i3 = 0; i3 < n3; ++i3)
      y4 += series[i3][j2][1] || 0;
    if (y4)
      for (i3 = 0; i3 < n3; ++i3)
        series[i3][j2][1] /= y4;
  }
  none_default(series, order);
}

// ../node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var i3, j2 = 0, d2, dy, yp, yn, n3, m3 = series[order[0]].length; j2 < m3; ++j2) {
    for (yp = yn = 0, i3 = 0; i3 < n3; ++i3) {
      if ((dy = (d2 = series[order[i3]][j2])[1] - d2[0]) > 0) {
        d2[0] = yp, d2[1] = yp += dy;
      } else if (dy < 0) {
        d2[1] = yn, d2[0] = yn += dy;
      } else {
        d2[0] = 0, d2[1] = dy;
      }
    }
  }
}

// ../node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n3 = series.length) > 0))
    return;
  for (var j2 = 0, s0 = series[order[0]], n3, m3 = s0.length; j2 < m3; ++j2) {
    for (var i3 = 0, y4 = 0; i3 < n3; ++i3)
      y4 += series[i3][j2][1] || 0;
    s0[j2][1] += s0[j2][0] = -y4 / 2;
  }
  none_default(series, order);
}

// ../node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n3 = series.length) > 0) || !((m3 = (s0 = series[order[0]]).length) > 0))
    return;
  for (var y4 = 0, j2 = 1, s0, m3, n3; j2 < m3; ++j2) {
    for (var i3 = 0, s1 = 0, s22 = 0; i3 < n3; ++i3) {
      var si2 = series[order[i3]], sij0 = si2[j2][1] || 0, sij1 = si2[j2 - 1][1] || 0, s3 = (sij0 - sij1) / 2;
      for (var k3 = 0; k3 < i3; ++k3) {
        var sk = series[order[k3]], skj0 = sk[j2][1] || 0, skj1 = sk[j2 - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s22 += s3 * sij0;
    }
    s0[j2 - 1][1] += s0[j2 - 1][0] = y4;
    if (s1)
      y4 -= s22 / s1;
  }
  s0[j2 - 1][1] += s0[j2 - 1][0] = y4;
  none_default(series, order);
}

// ../node_modules/d3-shape/src/order/appearance.js
function appearance_default(series) {
  var peaks = series.map(peak);
  return none_default2(series).sort(function(a3, b3) {
    return peaks[a3] - peaks[b3];
  });
}
function peak(series) {
  var i3 = -1, j2 = 0, n3 = series.length, vi, vj = -Infinity;
  while (++i3 < n3)
    if ((vi = +series[i3][1]) > vj)
      vj = vi, j2 = i3;
  return j2;
}

// ../node_modules/d3-shape/src/order/ascending.js
function ascending_default2(series) {
  var sums = series.map(sum2);
  return none_default2(series).sort(function(a3, b3) {
    return sums[a3] - sums[b3];
  });
}
function sum2(series) {
  var s3 = 0, i3 = -1, n3 = series.length, v3;
  while (++i3 < n3)
    if (v3 = +series[i3][1])
      s3 += v3;
  return s3;
}

// ../node_modules/d3-shape/src/order/descending.js
function descending_default3(series) {
  return ascending_default2(series).reverse();
}

// ../node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n3 = series.length, i3, j2, sums = series.map(sum2), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
  for (i3 = 0; i3 < n3; ++i3) {
    j2 = order[i3];
    if (top < bottom) {
      top += sums[j2];
      tops.push(j2);
    } else {
      bottom += sums[j2];
      bottoms.push(j2);
    }
  }
  return bottoms.reverse().concat(tops);
}

// ../node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}

// ../node_modules/@nivo/recompose/dist/nivo-recompose.es.js
var import_react7 = __toESM(require_react());

// ../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js
function componentWillMount() {
  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
  if (state !== null && state !== void 0) {
    this.setState(state);
  }
}
function componentWillReceiveProps(nextProps) {
  function updater(prevState) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
    return state !== null && state !== void 0 ? state : null;
  }
  this.setState(updater.bind(this));
}
function componentWillUpdate(nextProps, nextState) {
  try {
    var prevProps = this.props;
    var prevState = this.state;
    this.props = nextProps;
    this.state = nextState;
    this.__reactInternalSnapshotFlag = true;
    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
      prevProps,
      prevState
    );
  } finally {
    this.props = prevProps;
    this.state = prevState;
  }
}
componentWillMount.__suppressDeprecationWarning = true;
componentWillReceiveProps.__suppressDeprecationWarning = true;
componentWillUpdate.__suppressDeprecationWarning = true;

// ../node_modules/@nivo/core/dist/nivo-core.es.js
var import_isEqual = __toESM(require_isEqual());
var import_isPlainObject = __toESM(require_isPlainObject());
var import_pick = __toESM(require_pick());
function Gr() {
  return Gr = Object.assign || function(e4) {
    for (var r4 = 1; r4 < arguments.length; r4++) {
      var t6 = arguments[r4];
      for (var i3 in t6)
        Object.prototype.hasOwnProperty.call(t6, i3) && (e4[i3] = t6[i3]);
    }
    return e4;
  }, Gr.apply(this, arguments);
}
function Br(e4, r4) {
  return Br = Object.setPrototypeOf || function(e6, r5) {
    return e6.__proto__ = r5, e6;
  }, Br(e4, r4);
}
function Lr(e4, r4) {
  if (null == e4)
    return {};
  var t6, i3, n3 = {}, o3 = Object.keys(e4);
  for (i3 = 0; i3 < o3.length; i3++)
    t6 = o3[i3], r4.indexOf(t6) >= 0 || (n3[t6] = e4[t6]);
  return n3;
}
var Ir = { fill: import_prop_types.default.string, fontSize: import_prop_types.default.number, fontFamily: import_prop_types.default.string };
var Yr = import_prop_types.default.shape({ domain: import_prop_types.default.shape({ line: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, strokeDasharray: import_prop_types.default.string }).isRequired }).isRequired, ticks: import_prop_types.default.shape({ line: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, strokeDasharray: import_prop_types.default.string }).isRequired, text: import_prop_types.default.shape(Gr({}, Ir)).isRequired }).isRequired, legend: import_prop_types.default.shape({ text: import_prop_types.default.shape(Gr({}, Ir)).isRequired }).isRequired });
var Ar = import_prop_types.default.shape({ line: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, strokeDasharray: import_prop_types.default.string }).isRequired });
var Fr = import_prop_types.default.shape({ hidden: import_prop_types.default.shape({ symbol: import_prop_types.default.shape({ fill: import_prop_types.default.string.isRequired, opacity: import_prop_types.default.number }).isRequired, text: import_prop_types.default.shape(Gr({}, Ir, { opacity: import_prop_types.default.number })).isRequired }).isRequired, text: import_prop_types.default.shape(Gr({}, Ir)).isRequired });
var Er = import_prop_types.default.shape({ text: import_prop_types.default.shape(Gr({}, Ir)).isRequired });
var Ur = import_prop_types.default.shape({ text: import_prop_types.default.shape(Gr({}, Ir)).isRequired });
var Xr = import_prop_types.default.shape({ text: import_prop_types.default.shape(Gr({}, Ir)).isRequired });
var Kr = import_prop_types.default.shape({ line: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, strokeDasharray: import_prop_types.default.string }).isRequired });
var Hr = import_prop_types.default.shape({ text: import_prop_types.default.shape(Gr({}, Ir, { outlineWidth: import_prop_types.default.number.isRequired, outlineColor: import_prop_types.default.string.isRequired })).isRequired, link: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, outlineWidth: import_prop_types.default.number.isRequired, outlineColor: import_prop_types.default.string.isRequired }).isRequired, outline: import_prop_types.default.shape({ stroke: import_prop_types.default.string.isRequired, strokeWidth: import_prop_types.default.number.isRequired, outlineWidth: import_prop_types.default.number.isRequired, outlineColor: import_prop_types.default.string.isRequired }).isRequired, symbol: import_prop_types.default.shape({ fill: import_prop_types.default.string.isRequired, outlineWidth: import_prop_types.default.number.isRequired, outlineColor: import_prop_types.default.string.isRequired }).isRequired });
var Nr = import_prop_types.default.shape({ background: import_prop_types.default.string.isRequired, fontFamily: import_prop_types.default.string.isRequired, fontSize: import_prop_types.default.number.isRequired, textColor: import_prop_types.default.string.isRequired, axis: Yr.isRequired, grid: Ar.isRequired, legends: Fr.isRequired, labels: Er.isRequired, dots: Ur.isRequired, markers: Xr, crosshair: Kr.isRequired, annotations: Hr.isRequired });
var Vr = { background: "transparent", fontFamily: "sans-serif", fontSize: 11, textColor: "#333333", axis: { domain: { line: { stroke: "transparent", strokeWidth: 1 } }, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: {} }, legend: { text: { fontSize: 12 } } }, grid: { line: { stroke: "#dddddd", strokeWidth: 1 } }, legends: { hidden: { symbol: { fill: "#333333", opacity: 0.6 }, text: { fill: "#333333", opacity: 0.6 } }, text: {}, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: { fontSize: 10 } }, title: { text: {} } }, labels: { text: {} }, markers: { lineColor: "#000000", lineStrokeWidth: 1, text: {} }, dots: { text: {} }, tooltip: { container: { background: "white", color: "inherit", fontSize: "inherit", borderRadius: "2px", boxShadow: "0 1px 2px rgba(0, 0, 0, 0.25)", padding: "5px 9px" }, basic: { whiteSpace: "pre", display: "flex", alignItems: "center" }, chip: { marginRight: 7 }, table: {}, tableCell: { padding: "3px 5px" }, tableCellValue: { fontWeight: "bold" } }, crosshair: { line: { stroke: "#000000", strokeWidth: 1, strokeOpacity: 0.75, strokeDasharray: "6 6" } }, annotations: { text: { fontSize: 13, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, link: { stroke: "#000000", strokeWidth: 1, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, outline: { fill: "none", stroke: "#000000", strokeWidth: 2, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, symbol: { fill: "#000000", outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 } } };
var Jr = ["axis.ticks.text", "axis.legend.text", "legends.title.text", "legends.text", "legends.ticks.text", "legends.title.text", "labels.text", "dots.text", "markers.text", "annotations.text"];
var Qr = function(e4, r4) {
  var t6 = (0, import_merge2.default)({}, e4, r4);
  return Jr.forEach(function(e6) {
    void 0 === (0, import_get.default)(t6, e6 + ".fontFamily") && (0, import_set2.default)(t6, e6 + ".fontFamily", t6.fontFamily), void 0 === (0, import_get.default)(t6, e6 + ".fontSize") && (0, import_set2.default)(t6, e6 + ".fontSize", t6.fontSize), void 0 === (0, import_get.default)(t6, e6 + ".fill") && (0, import_set2.default)(t6, e6 + ".fill", t6.textColor);
  }), t6;
};
var Zr = (0, import_react8.createContext)();
var $r = function(e4) {
  var t6 = e4.children, i3 = e4.animate, n3 = e4.stiffness, o3 = e4.damping, a3 = e4.config, s3 = (0, import_react8.useMemo)(function() {
    var e6 = (0, import_isString.default)(a3) ? config2[a3] : a3;
    return { animate: i3, springConfig: { stiffness: n3, damping: o3 }, config: e6 };
  }, [i3, n3, o3, a3]);
  return (0, import_jsx_runtime.jsx)(Zr.Provider, { value: s3, children: t6 });
};
var et = { animate: import_prop_types.default.bool, motionStiffness: import_prop_types.default.number, motionDamping: import_prop_types.default.number, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(Object.keys(config2)), import_prop_types.default.shape({ mass: import_prop_types.default.number, tension: import_prop_types.default.number, friction: import_prop_types.default.number, clamp: import_prop_types.default.bool, precision: import_prop_types.default.number, velocity: import_prop_types.default.number, duration: import_prop_types.default.number, easing: import_prop_types.default.func })]) };
$r.propTypes = { children: import_prop_types.default.node.isRequired, animate: et.animate, stiffness: et.motionStiffness, damping: et.motionDamping, config: et.motionConfig };
var rt = { animate: true, stiffness: 90, damping: 15, config: "default" };
$r.defaultProps = rt;
var tt = function() {
  return (0, import_react8.useContext)(Zr);
};
var it = function(e4) {
  var t6 = tt(), o3 = t6.animate, a3 = t6.config, s3 = function(e6) {
    var r4 = (0, import_react8.useRef)();
    return (0, import_react8.useEffect)(function() {
      r4.current = e6;
    }, [e6]), r4.current;
  }(e4), l3 = (0, import_react8.useMemo)(function() {
    return string_default(s3, e4);
  }, [s3, e4]), d2 = useSpring2({ from: { value: 0 }, to: { value: 1 }, reset: true, config: a3, immediate: !o3 }).value;
  return to4(d2, l3);
};
var nt = { nivo: ["#d76445", "#f47560", "#e8c1a0", "#97e3d5", "#61cdbb", "#00b0a7"], BrBG: (0, import_last.default)(scheme), PRGn: (0, import_last.default)(scheme2), PiYG: (0, import_last.default)(scheme3), PuOr: (0, import_last.default)(scheme4), RdBu: (0, import_last.default)(scheme5), RdGy: (0, import_last.default)(scheme6), RdYlBu: (0, import_last.default)(scheme7), RdYlGn: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), BuGn: (0, import_last.default)(scheme10), BuPu: (0, import_last.default)(scheme11), GnBu: (0, import_last.default)(scheme12), OrRd: (0, import_last.default)(scheme13), PuBuGn: (0, import_last.default)(scheme14), PuBu: (0, import_last.default)(scheme15), PuRd: (0, import_last.default)(scheme16), RdPu: (0, import_last.default)(scheme17), YlGnBu: (0, import_last.default)(scheme18), YlGn: (0, import_last.default)(scheme19), YlOrBr: (0, import_last.default)(scheme20), YlOrRd: (0, import_last.default)(scheme21) };
var ot = Object.keys(nt);
var st = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default, brown_blueGreen: (0, import_last.default)(scheme), purpleRed_green: (0, import_last.default)(scheme2), pink_yellowGreen: (0, import_last.default)(scheme3), purple_orange: (0, import_last.default)(scheme4), red_blue: (0, import_last.default)(scheme5), red_grey: (0, import_last.default)(scheme6), red_yellow_blue: (0, import_last.default)(scheme7), red_yellow_green: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), blue_green: (0, import_last.default)(scheme10), blue_purple: (0, import_last.default)(scheme11), green_blue: (0, import_last.default)(scheme12), orange_red: (0, import_last.default)(scheme13), purple_blue_green: (0, import_last.default)(scheme14), purple_blue: (0, import_last.default)(scheme15), purple_red: (0, import_last.default)(scheme16), red_purple: (0, import_last.default)(scheme17), yellow_green_blue: (0, import_last.default)(scheme18), yellow_green: (0, import_last.default)(scheme19), yellow_orange_brown: (0, import_last.default)(scheme20), yellow_orange_red: (0, import_last.default)(scheme21) };
var pt = import_prop_types.default.oneOfType([import_prop_types.default.oneOf(ot), import_prop_types.default.func, import_prop_types.default.arrayOf(import_prop_types.default.string)]);
var ht = { basis: basis_default3, basisClosed: basisClosed_default3, basisOpen: basisOpen_default, bundle: bundle_default, cardinal: cardinal_default, cardinalClosed: cardinalClosed_default, cardinalOpen: cardinalOpen_default, catmullRom: catmullRom_default, catmullRomClosed: catmullRomClosed_default, catmullRomOpen: catmullRomOpen_default, linear: linear_default, linearClosed: linearClosed_default, monotoneX, monotoneY, natural: natural_default, step: step_default, stepAfter, stepBefore };
var gt = Object.keys(ht);
var mt = import_prop_types.default.oneOf(gt);
var bt = gt.filter(function(e4) {
  return e4.endsWith("Closed");
});
var yt = (0, import_without.default)(gt, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var vt = (0, import_without.default)(gt, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var Rt = import_prop_types.default.oneOf(vt);
var qt = function(e4) {
  if (!ht[e4])
    throw new TypeError("'" + e4 + "', is not a valid curve interpolator identifier.");
  return ht[e4];
};
var kt = { defs: import_prop_types.default.arrayOf(import_prop_types.default.shape({ id: import_prop_types.default.string.isRequired })).isRequired, fill: import_prop_types.default.arrayOf(import_prop_types.default.shape({ id: import_prop_types.default.string.isRequired, match: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["*"]), import_prop_types.default.object, import_prop_types.default.func]).isRequired })).isRequired };
var _t = { ascending: ascending_default2, descending: descending_default3, insideOut: insideOut_default, none: none_default2, reverse: reverse_default };
var wt = Object.keys(_t);
var xt = import_prop_types.default.oneOf(wt);
var Ct = { expand: expand_default, diverging: diverging_default, none: none_default, silhouette: silhouette_default, wiggle: wiggle_default };
var Wt = Object.keys(Ct);
var St = import_prop_types.default.oneOf(Wt);
var Pt = import_prop_types.default.shape({ top: import_prop_types.default.number, right: import_prop_types.default.number, bottom: import_prop_types.default.number, left: import_prop_types.default.number }).isRequired;
var Tt = ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
var Mt = import_prop_types.default.oneOf(Tt);
var It = ordinal(Set3_default);
var Yt = { top: 0, right: 0, bottom: 0, left: 0 };
var At = function(e4, t6, i3) {
  return void 0 === i3 && (i3 = {}), (0, import_react8.useMemo)(function() {
    var r4 = Gr({}, Yt, i3);
    return { margin: r4, innerWidth: e4 - r4.left - r4.right, innerHeight: t6 - r4.top - r4.bottom, outerWidth: e4, outerHeight: t6 };
  }, [e4, t6, i3.top, i3.right, i3.bottom, i3.left]);
};
var Ft = function() {
  var e4 = (0, import_react8.useRef)(null), r4 = (0, import_react8.useState)({ left: 0, top: 0, width: 0, height: 0 }), t6 = r4[0], a3 = r4[1], s3 = (0, import_react8.useState)(function() {
    return new ResizeObserver(function(e6) {
      var r5 = e6[0];
      return a3(r5.contentRect);
    });
  })[0];
  return (0, import_react8.useEffect)(function() {
    return e4.current && s3.observe(e4.current), function() {
      return s3.disconnect();
    };
  }, []), [e4, t6];
};
var Et = function(e4) {
  return (0, import_react8.useMemo)(function() {
    return Qr(Vr, e4);
  }, [e4]);
};
var Ut = function(e4) {
  return "function" == typeof e4 ? e4 : "string" == typeof e4 ? 0 === e4.indexOf("time:") ? timeFormat(e4.slice("5")) : format(e4) : function(e6) {
    return "" + e6;
  };
};
var Xt = function(e4) {
  return (0, import_react8.useMemo)(function() {
    return Ut(e4);
  }, [e4]);
};
var Kt = (0, import_react8.createContext)();
var Ht = {};
var Nt = function(e4) {
  var r4 = e4.theme, t6 = void 0 === r4 ? Ht : r4, i3 = e4.children, n3 = Et(t6);
  return (0, import_jsx_runtime.jsx)(Kt.Provider, { value: n3, children: i3 });
};
Nt.propTypes = { children: import_prop_types.default.node.isRequired, theme: import_prop_types.default.object };
var Vt = function() {
  return (0, import_react8.useContext)(Kt);
};
var Jt = function(e4) {
  var r4 = e4.children, t6 = e4.condition, i3 = e4.wrapper;
  return t6 ? (0, import_react8.cloneElement)(i3, {}, r4) : r4;
};
Jt.propTypes = { children: import_prop_types.default.node.isRequired, condition: import_prop_types.default.bool.isRequired, wrapper: import_prop_types.default.element.isRequired };
var Qt = { position: "relative" };
var Zt = function(e4) {
  var r4 = e4.children, t6 = e4.theme, n3 = e4.renderWrapper, o3 = void 0 === n3 || n3, a3 = e4.isInteractive, s3 = void 0 === a3 || a3, l3 = e4.animate, d2 = e4.motionStiffness, u2 = e4.motionDamping, c8 = e4.motionConfig, h2 = (0, import_react8.useRef)(null);
  return (0, import_jsx_runtime.jsx)(Nt, { theme: t6, children: (0, import_jsx_runtime.jsx)($r, { animate: l3, stiffness: d2, damping: u2, config: c8, children: (0, import_jsx_runtime.jsx)(M, { container: h2, children: (0, import_jsx_runtime.jsxs)(Jt, { condition: o3, wrapper: (0, import_jsx_runtime.jsx)("div", { style: Qt, ref: h2 }), children: [r4, s3 && (0, import_jsx_runtime.jsx)(F, {})] }) }) }) });
};
Zt.propTypes = { children: import_prop_types.default.element.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object, animate: import_prop_types.default.bool, motionStiffness: import_prop_types.default.number, motionDamping: import_prop_types.default.number, motionConfig: import_prop_types.default.string };
var $t = function() {
};
var ei = { position: "relative" };
var ri = function(e4) {
  var t6 = e4.children, n3 = e4.theme, o3 = e4.isInteractive, a3 = void 0 === o3 || o3, l3 = e4.renderWrapper, d2 = void 0 === l3 || l3, u2 = e4.animate, c8 = e4.motionStiffness, f2 = e4.motionDamping, b3 = e4.motionConfig, y4 = (0, import_react8.useRef)(null), v3 = O(y4), R = v3.actions, q = v3.state, k3 = (0, import_react8.useCallback)(function(e6, r4) {
    return R.showTooltipFromEvent(e6, r4);
  }, [R.showTooltipFromEvent]), _ = (0, import_react8.useMemo)(function() {
    return { showTooltip: a3 ? k3 : $t, hideTooltip: a3 ? R.hideTooltip : $t };
  }, [R.hideTooltip, a3, k3]);
  return (0, import_jsx_runtime.jsx)(Nt, { theme: n3, children: (0, import_jsx_runtime.jsx)($r, { animate: u2, stiffness: c8, damping: f2, config: b3, children: (0, import_jsx_runtime.jsx)(N.Provider, { value: R, children: (0, import_jsx_runtime.jsx)(j.Provider, { value: q, children: (0, import_jsx_runtime.jsxs)(Jt, { condition: d2, wrapper: (0, import_jsx_runtime.jsx)("div", { style: ei, ref: y4 }), children: [t6(_), a3 && (0, import_jsx_runtime.jsx)(F, {})] }) }) }) }) });
};
ri.propTypes = { children: import_prop_types.default.func.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object.isRequired, animate: import_prop_types.default.bool.isRequired, motionStiffness: import_prop_types.default.number, motionDamping: import_prop_types.default.number, motionConfig: import_prop_types.default.string };
var ti = function(e4) {
  var r4 = e4.children, t6 = Ft(), i3 = t6[0], n3 = t6[1], o3 = n3.width > 0 && n3.height > 0;
  return (0, import_jsx_runtime.jsx)("div", { ref: i3, style: { width: "100%", height: "100%" }, children: o3 && r4({ width: n3.width, height: n3.height }) });
};
ti.propTypes = { children: import_prop_types.default.func.isRequired };
var ii = ["id", "colors"];
var ni = function(e4) {
  var r4 = e4.id, t6 = e4.colors, i3 = Lr(e4, ii);
  return (0, import_jsx_runtime.jsx)("linearGradient", Gr({ id: r4, x1: 0, x2: 0, y1: 0, y2: 1 }, i3, { children: t6.map(function(e6) {
    var r5 = e6.offset, t7 = e6.color, i4 = e6.opacity;
    return (0, import_jsx_runtime.jsx)("stop", { offset: r5 + "%", stopColor: t7, stopOpacity: void 0 !== i4 ? i4 : 1 }, r5);
  }) }));
};
ni.propTypes = { id: import_prop_types.default.string.isRequired, colors: import_prop_types.default.arrayOf(import_prop_types.default.shape({ offset: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, opacity: import_prop_types.default.number })).isRequired, gradientTransform: import_prop_types.default.string };
var ai = { linearGradient: ni };
var si = (0, import_react8.memo)(function(e4) {
  var r4 = e4.id, t6 = e4.background, i3 = e4.color, n3 = e4.size, o3 = e4.padding, a3 = e4.stagger, s3 = n3 + o3, l3 = n3 / 2, d2 = o3 / 2;
  return true === a3 && (s3 = 2 * n3 + 2 * o3), (0, import_jsx_runtime.jsxs)("pattern", { id: r4, width: s3, height: s3, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime.jsx)("rect", { width: s3, height: s3, fill: t6 }), (0, import_jsx_runtime.jsx)("circle", { cx: d2 + l3, cy: d2 + l3, r: l3, fill: i3 }), a3 && (0, import_jsx_runtime.jsx)("circle", { cx: 1.5 * o3 + n3 + l3, cy: 1.5 * o3 + n3 + l3, r: l3, fill: i3 })] });
});
si.displayName = "PatternDots", si.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired }, si.defaultProps = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
var di = 2 * Math.PI;
var ui = function(e4) {
  return e4 * Math.PI / 180;
};
var ci = function(e4) {
  return 180 * e4 / Math.PI;
};
var fi = function(e4) {
  return e4.startAngle + (e4.endAngle - e4.startAngle) / 2;
};
var pi3 = function(e4, r4) {
  return { x: Math.cos(e4) * r4, y: Math.sin(e4) * r4 };
};
var yi = { svg: { align: { left: "start", center: "middle", right: "end", start: "start", middle: "middle", end: "end" }, baseline: { top: "text-before-edge", center: "central", bottom: "alphabetic" } }, canvas: { align: { left: "left", center: "center", right: "right", start: "left", middle: "center", end: "right" }, baseline: { top: "top", center: "middle", bottom: "bottom" } } };
var Ri = (0, import_react8.memo)(function(e4) {
  var r4 = e4.id, t6 = e4.spacing, i3 = e4.rotation, n3 = e4.background, o3 = e4.color, a3 = e4.lineWidth, s3 = Math.round(i3) % 360, l3 = Math.abs(t6);
  s3 > 180 ? s3 -= 360 : s3 > 90 ? s3 -= 180 : s3 < -180 ? s3 += 360 : s3 < -90 && (s3 += 180);
  var d2, u2 = l3, c8 = l3;
  return 0 === s3 ? d2 = "\n                M 0 0 L " + u2 + " 0\n                M 0 " + c8 + " L " + u2 + " " + c8 + "\n            " : 90 === s3 ? d2 = "\n                M 0 0 L 0 " + c8 + "\n                M " + u2 + " 0 L " + u2 + " " + c8 + "\n            " : (u2 = Math.abs(l3 / Math.sin(ui(s3))), c8 = l3 / Math.sin(ui(90 - s3)), d2 = s3 > 0 ? "\n                    M 0 " + -c8 + " L " + 2 * u2 + " " + c8 + "\n                    M " + -u2 + " " + -c8 + " L " + u2 + " " + c8 + "\n                    M " + -u2 + " 0 L " + u2 + " " + 2 * c8 + "\n                " : "\n                    M " + -u2 + " " + c8 + " L " + u2 + " " + -c8 + "\n                    M " + -u2 + " " + 2 * c8 + " L " + 2 * u2 + " " + -c8 + "\n                    M 0 " + 2 * c8 + " L " + 2 * u2 + " 0\n                "), (0, import_jsx_runtime.jsxs)("pattern", { id: r4, width: u2, height: c8, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime.jsx)("rect", { width: u2, height: c8, fill: n3, stroke: "rgba(255, 0, 0, 0.1)", strokeWidth: 0 }), (0, import_jsx_runtime.jsx)("path", { d: d2, strokeWidth: a3, stroke: o3, strokeLinecap: "square" })] });
});
Ri.displayName = "PatternLines", Ri.propTypes = { id: import_prop_types.default.string.isRequired, spacing: import_prop_types.default.number.isRequired, rotation: import_prop_types.default.number.isRequired, background: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, lineWidth: import_prop_types.default.number.isRequired }, Ri.defaultProps = { spacing: 5, rotation: 0, color: "#000000", background: "#ffffff", lineWidth: 2 };
var ki = (0, import_react8.memo)(function(e4) {
  var r4 = e4.id, t6 = e4.background, i3 = e4.color, n3 = e4.size, o3 = e4.padding, a3 = e4.stagger, s3 = n3 + o3, l3 = o3 / 2;
  return true === a3 && (s3 = 2 * n3 + 2 * o3), (0, import_jsx_runtime.jsxs)("pattern", { id: r4, width: s3, height: s3, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime.jsx)("rect", { width: s3, height: s3, fill: t6 }), (0, import_jsx_runtime.jsx)("rect", { x: l3, y: l3, width: n3, height: n3, fill: i3 }), a3 && (0, import_jsx_runtime.jsx)("rect", { x: 1.5 * o3 + n3, y: 1.5 * o3 + n3, width: n3, height: n3, fill: i3 })] });
});
ki.displayName = "PatternSquares", ki.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired }, ki.defaultProps = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
var wi = { patternDots: si, patternLines: Ri, patternSquares: ki };
var xi = ["type"];
var Oi = Gr({}, ai, wi);
var Ci = function(e4) {
  var r4 = e4.defs;
  return !r4 || r4.length < 1 ? null : (0, import_jsx_runtime.jsx)("defs", { "aria-hidden": true, children: r4.map(function(e6) {
    var r5 = e6.type, t6 = Lr(e6, xi);
    return Oi[r5] ? (0, import_react8.createElement)(Oi[r5], Gr({ key: t6.id }, t6)) : null;
  }) });
};
Ci.propTypes = { defs: import_prop_types.default.arrayOf(import_prop_types.default.shape({ type: import_prop_types.default.oneOf(Object.keys(Oi)).isRequired, id: import_prop_types.default.string.isRequired })) };
var Wi = (0, import_react8.memo)(Ci);
var Si = function(e4) {
  var r4 = e4.width, t6 = e4.height, i3 = e4.margin, n3 = e4.defs, o3 = e4.children, a3 = e4.role, s3 = e4.ariaLabel, l3 = e4.ariaLabelledBy, d2 = e4.ariaDescribedBy, u2 = e4.isFocusable, c8 = Vt();
  return (0, import_jsx_runtime.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: r4, height: t6, role: a3, "aria-label": s3, "aria-labelledby": l3, "aria-describedby": d2, focusable: u2, tabIndex: u2 ? 0 : void 0, children: [(0, import_jsx_runtime.jsx)(Wi, { defs: n3 }), (0, import_jsx_runtime.jsx)("rect", { width: r4, height: t6, fill: c8.background }), (0, import_jsx_runtime.jsx)("g", { transform: "translate(" + i3.left + "," + i3.top + ")", children: o3 })] });
};
Si.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, margin: import_prop_types.default.shape({ top: import_prop_types.default.number.isRequired, left: import_prop_types.default.number.isRequired }).isRequired, defs: import_prop_types.default.array, children: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.node), import_prop_types.default.node]).isRequired, role: import_prop_types.default.string, isFocusable: import_prop_types.default.bool, ariaLabel: import_prop_types.default.string, ariaLabelledBy: import_prop_types.default.string, ariaDescribedBy: import_prop_types.default.string };
var zi = function(e4) {
  var r4 = e4.size, t6 = e4.color, i3 = e4.borderWidth, n3 = e4.borderColor;
  return (0, import_jsx_runtime.jsx)("circle", { r: r4 / 2, fill: t6, stroke: n3, strokeWidth: i3, style: { pointerEvents: "none" } });
};
zi.propTypes = { size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired };
var Pi = (0, import_react8.memo)(zi);
var Ti = function(e4) {
  var r4 = e4.x, t6 = e4.y, i3 = e4.symbol, n3 = void 0 === i3 ? Pi : i3, o3 = e4.size, a3 = e4.datum, s3 = e4.color, l3 = e4.borderWidth, u2 = e4.borderColor, c8 = e4.label, f2 = e4.labelTextAnchor, p2 = void 0 === f2 ? "middle" : f2, h2 = e4.labelYOffset, g2 = void 0 === h2 ? -12 : h2, m3 = Vt(), b3 = tt(), y4 = b3.animate, v3 = b3.config, R = useSpring2({ transform: "translate(" + r4 + ", " + t6 + ")", config: v3, immediate: !y4 });
  return (0, import_jsx_runtime.jsxs)(animated2.g, { transform: R.transform, style: { pointerEvents: "none" }, children: [(0, import_react8.createElement)(n3, { size: o3, color: s3, datum: a3, borderWidth: l3, borderColor: u2 }), c8 && (0, import_jsx_runtime.jsx)("text", { textAnchor: p2, y: g2, style: m3.dots.text, children: c8 })] });
};
Ti.propTypes = { x: import_prop_types.default.number.isRequired, y: import_prop_types.default.number.isRequired, datum: import_prop_types.default.object.isRequired, size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired, symbol: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]), label: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]), labelTextAnchor: import_prop_types.default.oneOf(["start", "middle", "end"]), labelYOffset: import_prop_types.default.number.isRequired };
var Mi = (0, import_react8.memo)(Ti);
var ji = function(e4) {
  var r4 = e4.width, t6 = e4.height, i3 = e4.axis, n3 = e4.scale, o3 = e4.value, a3 = e4.lineStyle, s3 = e4.textStyle, l3 = e4.legend, d2 = e4.legendPosition, u2 = e4.legendOffsetX, c8 = e4.legendOffsetY, f2 = e4.legendOrientation, p2 = Vt(), h2 = 0, g2 = 0, m3 = 0, b3 = 0;
  "y" === i3 ? (m3 = n3(o3), g2 = r4) : (h2 = n3(o3), b3 = t6);
  var y4 = null;
  if (l3) {
    var v3 = function(e6) {
      var r5 = e6.axis, t7 = e6.width, i4 = e6.height, n4 = e6.position, o4 = e6.offsetX, a4 = e6.offsetY, s4 = e6.orientation, l4 = 0, d3 = 0, u3 = "vertical" === s4 ? -90 : 0, c9 = "start";
      if ("x" === r5)
        switch (n4) {
          case "top-left":
            l4 = -o4, d3 = a4, c9 = "end";
            break;
          case "top":
            d3 = -a4, c9 = "horizontal" === s4 ? "middle" : "start";
            break;
          case "top-right":
            l4 = o4, d3 = a4, c9 = "horizontal" === s4 ? "start" : "end";
            break;
          case "right":
            l4 = o4, d3 = i4 / 2, c9 = "horizontal" === s4 ? "start" : "middle";
            break;
          case "bottom-right":
            l4 = o4, d3 = i4 - a4, c9 = "start";
            break;
          case "bottom":
            d3 = i4 + a4, c9 = "horizontal" === s4 ? "middle" : "end";
            break;
          case "bottom-left":
            d3 = i4 - a4, l4 = -o4, c9 = "horizontal" === s4 ? "end" : "start";
            break;
          case "left":
            l4 = -o4, d3 = i4 / 2, c9 = "horizontal" === s4 ? "end" : "middle";
        }
      else
        switch (n4) {
          case "top-left":
            l4 = o4, d3 = -a4, c9 = "start";
            break;
          case "top":
            l4 = t7 / 2, d3 = -a4, c9 = "horizontal" === s4 ? "middle" : "start";
            break;
          case "top-right":
            l4 = t7 - o4, d3 = -a4, c9 = "horizontal" === s4 ? "end" : "start";
            break;
          case "right":
            l4 = t7 + o4, c9 = "horizontal" === s4 ? "start" : "middle";
            break;
          case "bottom-right":
            l4 = t7 - o4, d3 = a4, c9 = "end";
            break;
          case "bottom":
            l4 = t7 / 2, d3 = a4, c9 = "horizontal" === s4 ? "middle" : "end";
            break;
          case "bottom-left":
            l4 = o4, d3 = a4, c9 = "horizontal" === s4 ? "start" : "end";
            break;
          case "left":
            l4 = -o4, c9 = "horizontal" === s4 ? "end" : "middle";
        }
      return { x: l4, y: d3, rotation: u3, textAnchor: c9 };
    }({ axis: i3, width: r4, height: t6, position: d2, offsetX: u2, offsetY: c8, orientation: f2 });
    y4 = (0, import_jsx_runtime.jsx)("text", { transform: "translate(" + v3.x + ", " + v3.y + ") rotate(" + v3.rotation + ")", textAnchor: v3.textAnchor, dominantBaseline: "central", style: s3, children: l3 });
  }
  return (0, import_jsx_runtime.jsxs)("g", { transform: "translate(" + h2 + ", " + m3 + ")", children: [(0, import_jsx_runtime.jsx)("line", { x1: 0, x2: g2, y1: 0, y2: b3, stroke: p2.markers.lineColor, strokeWidth: p2.markers.lineStrokeWidth, style: a3 }), y4] });
};
ji.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, scale: import_prop_types.default.func.isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object, legend: import_prop_types.default.string, legendPosition: import_prop_types.default.oneOf(["top-left", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left"]), legendOffsetX: import_prop_types.default.number.isRequired, legendOffsetY: import_prop_types.default.number.isRequired, legendOrientation: import_prop_types.default.oneOf(["horizontal", "vertical"]).isRequired }, ji.defaultProps = { legendPosition: "top-right", legendOffsetX: 14, legendOffsetY: 14, legendOrientation: "horizontal" };
var Di = (0, import_react8.memo)(ji);
var Gi = function(e4) {
  var r4 = e4.markers, t6 = e4.width, i3 = e4.height, n3 = e4.xScale, o3 = e4.yScale;
  return r4 && 0 !== r4.length ? r4.map(function(e6, r5) {
    return (0, import_jsx_runtime.jsx)(Di, Gr({}, e6, { width: t6, height: i3, scale: "y" === e6.axis ? o3 : n3 }), r5);
  }) : null;
};
Gi.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, xScale: import_prop_types.default.func.isRequired, yScale: import_prop_types.default.func.isRequired, markers: import_prop_types.default.arrayOf(import_prop_types.default.shape({ axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object })) };
var Bi = (0, import_react8.memo)(Gi);
var Ai = ["theme", "renderWrapper", "animate", "motionStiffness", "motionDamping", "motionConfig"];
var Fi = function(e4) {
  return function(r4) {
    var t6, i3;
    function n3() {
      return r4.apply(this, arguments) || this;
    }
    return i3 = r4, (t6 = n3).prototype = Object.create(i3.prototype), t6.prototype.constructor = t6, Br(t6, i3), n3.prototype.render = function() {
      var r5 = this.props, t7 = r5.theme, i4 = r5.renderWrapper, n4 = r5.animate, o3 = r5.motionStiffness, a3 = r5.motionDamping, s3 = r5.motionConfig, l3 = Lr(r5, Ai);
      return (0, import_jsx_runtime.jsx)(Zt, { theme: t7, renderWrapper: i4, isInteractive: l3.isInteractive, animate: n4, motionStiffness: o3, motionDamping: a3, motionConfig: s3, children: (0, import_jsx_runtime.jsx)(e4, Gr({}, l3)) });
    }, n3;
  }(import_react8.Component);
};
var Ei = function(e4, r4) {
  var t6, i3 = (0, import_isFunction.default)(e4) ? e4 : function(r5) {
    return (0, import_get.default)(r5, e4);
  };
  return r4 && (t6 = (0, import_isFunction.default)(r4) ? r4 : format(r4)), t6 ? function(e6) {
    return t6(i3(e6));
  } : i3;
};
var Ui = function(e4) {
  return (0, import_isFunction.default)(e4) ? e4 : function(r4) {
    return (0, import_get.default)(r4, e4);
  };
};
var Xi = function(e4) {
  return (0, import_react8.useMemo)(function() {
    return Ui(e4);
  }, [e4]);
};
var Ni = function(e4, r4, t6, i3) {
  var n3 = t6 - e4, o3 = i3 - r4;
  return n3 *= n3, o3 *= o3, Math.sqrt(n3 + o3);
};
var Vi = function(e4, r4, t6, i3) {
  var n3 = Math.atan2(i3 - r4, t6 - e4) - Math.PI / 2;
  return n3 > 0 ? n3 : 2 * Math.PI + n3;
};
var Ji = function(e4, r4, t6, i3, n3, o3) {
  return e4 <= n3 && n3 <= e4 + t6 && r4 <= o3 && o3 <= r4 + i3;
};
var Qi = function(e4, r4) {
  var t6 = r4.clientX, i3 = r4.clientY, n3 = e4.getBoundingClientRect();
  return [t6 - n3.left, i3 - n3.top];
};
var Zi = Object.keys(ai);
var $i = Object.keys(wi);
var en = function(e4, r4, t6) {
  if ("*" === e4)
    return true;
  if ((0, import_isFunction.default)(e4))
    return e4(r4);
  if ((0, import_isPlainObject.default)(e4)) {
    var i3 = t6 ? (0, import_get.default)(r4, t6) : r4;
    return (0, import_isEqual.default)((0, import_pick.default)(i3, Object.keys(e4)), e4);
  }
  return false;
};
var rn = function(e4, r4, t6, i3) {
  var n3 = void 0 === i3 ? {} : i3, o3 = n3.dataKey, a3 = n3.colorKey, s3 = void 0 === a3 ? "color" : a3, l3 = n3.targetKey, d2 = void 0 === l3 ? "fill" : l3, u2 = [], c8 = {};
  return e4.length && r4.length && (u2 = [].concat(e4), r4.forEach(function(r5) {
    for (var i4 = function(i5) {
      var n5 = t6[i5], a4 = n5.id, l4 = n5.match;
      if (en(l4, r5, o3)) {
        var f2 = e4.find(function(e6) {
          return e6.id === a4;
        });
        if (f2) {
          if ($i.includes(f2.type))
            if ("inherit" === f2.background || "inherit" === f2.color) {
              var p2 = (0, import_get.default)(r5, s3), h2 = f2.background, g2 = f2.color, m3 = a4;
              "inherit" === f2.background && (m3 = m3 + ".bg." + p2, h2 = p2), "inherit" === f2.color && (m3 = m3 + ".fg." + p2, g2 = p2), (0, import_set2.default)(r5, d2, "url(#" + m3 + ")"), c8[m3] || (u2.push(Gr({}, f2, { id: m3, background: h2, color: g2 })), c8[m3] = 1);
            } else
              (0, import_set2.default)(r5, d2, "url(#" + a4 + ")");
          else if (Zi.includes(f2.type)) {
            if (f2.colors.map(function(e6) {
              return e6.color;
            }).includes("inherit")) {
              var b3 = (0, import_get.default)(r5, s3), R = a4, q = Gr({}, f2, { colors: f2.colors.map(function(e6, r6) {
                return "inherit" !== e6.color ? e6 : (R = R + "." + r6 + "." + b3, Gr({}, e6, { color: "inherit" === e6.color ? b3 : e6.color }));
              }) });
              q.id = R, (0, import_set2.default)(r5, d2, "url(#" + R + ")"), c8[R] || (u2.push(q), c8[R] = 1);
            } else
              (0, import_set2.default)(r5, d2, "url(#" + a4 + ")");
          }
        }
        return "break";
      }
    }, n4 = 0; n4 < t6.length; n4++) {
      if ("break" === i4(n4))
        break;
    }
  })), u2;
};

// ../node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
function v2() {
  return v2 = Object.assign || function(t6) {
    for (var i3 = 1; i3 < arguments.length; i3++) {
      var o3 = arguments[i3];
      for (var n3 in o3)
        Object.prototype.hasOwnProperty.call(o3, n3) && (t6[n3] = o3[n3]);
    }
    return t6;
  }, v2.apply(this, arguments);
}
var x3 = { pointerEvents: "none", position: "absolute", zIndex: 10, top: 0, left: 0 };
var m2 = function(t6, i3) {
  return "translate(" + t6 + "px, " + i3 + "px)";
};
var g = (0, import_react9.memo)(function(t6) {
  var o3, n3 = t6.position, r4 = t6.anchor, e4 = t6.children, l3 = Vt(), u2 = tt(), p2 = u2.animate, f2 = u2.config, g2 = Ft(), b3 = g2[0], w2 = g2[1], T2 = (0, import_react9.useRef)(false), C5 = void 0, E4 = false, P3 = w2.width > 0 && w2.height > 0, N2 = Math.round(n3[0]), V2 = Math.round(n3[1]);
  P3 && ("top" === r4 ? (N2 -= w2.width / 2, V2 -= w2.height + 14) : "right" === r4 ? (N2 += 14, V2 -= w2.height / 2) : "bottom" === r4 ? (N2 -= w2.width / 2, V2 += 14) : "left" === r4 ? (N2 -= w2.width + 14, V2 -= w2.height / 2) : "center" === r4 && (N2 -= w2.width / 2, V2 -= w2.height / 2), C5 = { transform: m2(N2, V2) }, T2.current || (E4 = true), T2.current = [N2, V2]);
  var j2 = useSpring({ to: C5, config: f2, immediate: !p2 || E4 }), O4 = v2({}, x3, l3.tooltip, { transform: null != (o3 = j2.transform) ? o3 : m2(N2, V2) });
  return (0, import_jsx_runtime2.jsx)(animated.div, { ref: b3, style: O4, children: e4 });
});
g.displayName = "TooltipWrapper";
var b2 = (0, import_react9.memo)(function(t6) {
  var i3 = t6.size, o3 = void 0 === i3 ? 12 : i3, n3 = t6.color, r4 = t6.style;
  return (0, import_jsx_runtime2.jsx)("span", { style: v2({ display: "block", width: o3, height: o3, background: n3 }, void 0 === r4 ? {} : r4) });
});
var w = (0, import_react9.memo)(function(t6) {
  var i3, o3 = t6.id, n3 = t6.value, r4 = t6.format, e4 = t6.enableChip, l3 = void 0 !== e4 && e4, a3 = t6.color, c8 = t6.renderContent, s3 = Vt(), d2 = Xt(r4);
  if ("function" == typeof c8)
    i3 = c8();
  else {
    var f2 = n3;
    void 0 !== d2 && void 0 !== f2 && (f2 = d2(f2)), i3 = (0, import_jsx_runtime2.jsxs)("div", { style: s3.tooltip.basic, children: [l3 && (0, import_jsx_runtime2.jsx)(b2, { color: a3, style: s3.tooltip.chip }), void 0 !== f2 ? (0, import_jsx_runtime2.jsxs)("span", { children: [o3, ": ", (0, import_jsx_runtime2.jsx)("strong", { children: "" + f2 })] }) : o3] });
  }
  return (0, import_jsx_runtime2.jsx)("div", { style: s3.tooltip.container, children: i3 });
});
var T = { width: "100%", borderCollapse: "collapse" };
var C4 = (0, import_react9.memo)(function(t6) {
  var i3, o3 = t6.title, n3 = t6.rows, r4 = void 0 === n3 ? [] : n3, e4 = t6.renderContent, l3 = Vt();
  return r4.length ? (i3 = "function" == typeof e4 ? e4() : (0, import_jsx_runtime2.jsxs)("div", { children: [o3 && o3, (0, import_jsx_runtime2.jsx)("table", { style: v2({}, T, l3.tooltip.table), children: (0, import_jsx_runtime2.jsx)("tbody", { children: r4.map(function(t7, i4) {
    return (0, import_jsx_runtime2.jsx)("tr", { children: t7.map(function(t8, i5) {
      return (0, import_jsx_runtime2.jsx)("td", { style: l3.tooltip.tableCell, children: t8 }, i5);
    }) }, i4);
  }) }) })] }), (0, import_jsx_runtime2.jsx)("div", { style: l3.tooltip.container, children: i3 })) : null;
});
C4.displayName = "TableTooltip";
var E3 = (0, import_react9.memo)(function(t6) {
  var i3 = t6.x0, n3 = t6.x1, r4 = t6.y0, e4 = t6.y1, l3 = Vt(), d2 = tt(), u2 = d2.animate, p2 = d2.config, f2 = (0, import_react9.useMemo)(function() {
    return v2({}, l3.crosshair.line, { pointerEvents: "none" });
  }, [l3.crosshair.line]), x4 = useSpring({ x1: i3, x2: n3, y1: r4, y2: e4, config: p2, immediate: !u2 });
  return (0, import_jsx_runtime2.jsx)(animated.line, v2({}, x4, { fill: "none", style: f2 }));
});
E3.displayName = "CrosshairLine";
var P2 = (0, import_react9.memo)(function(t6) {
  var i3, o3, n3 = t6.width, r4 = t6.height, e4 = t6.type, l3 = t6.x, a3 = t6.y;
  return "cross" === e4 ? (i3 = { x0: l3, x1: l3, y0: 0, y1: r4 }, o3 = { x0: 0, x1: n3, y0: a3, y1: a3 }) : "top-left" === e4 ? (i3 = { x0: l3, x1: l3, y0: 0, y1: a3 }, o3 = { x0: 0, x1: l3, y0: a3, y1: a3 }) : "top" === e4 ? i3 = { x0: l3, x1: l3, y0: 0, y1: a3 } : "top-right" === e4 ? (i3 = { x0: l3, x1: l3, y0: 0, y1: a3 }, o3 = { x0: l3, x1: n3, y0: a3, y1: a3 }) : "right" === e4 ? o3 = { x0: l3, x1: n3, y0: a3, y1: a3 } : "bottom-right" === e4 ? (i3 = { x0: l3, x1: l3, y0: a3, y1: r4 }, o3 = { x0: l3, x1: n3, y0: a3, y1: a3 }) : "bottom" === e4 ? i3 = { x0: l3, x1: l3, y0: a3, y1: r4 } : "bottom-left" === e4 ? (i3 = { x0: l3, x1: l3, y0: a3, y1: r4 }, o3 = { x0: 0, x1: l3, y0: a3, y1: a3 }) : "left" === e4 ? o3 = { x0: 0, x1: l3, y0: a3, y1: a3 } : "x" === e4 ? i3 = { x0: l3, x1: l3, y0: 0, y1: r4 } : "y" === e4 && (o3 = { x0: 0, x1: n3, y0: a3, y1: a3 }), (0, import_jsx_runtime2.jsxs)(import_jsx_runtime2.Fragment, { children: [i3 && (0, import_jsx_runtime2.jsx)(E3, { x0: i3.x0, x1: i3.x1, y0: i3.y0, y1: i3.y1 }), o3 && (0, import_jsx_runtime2.jsx)(E3, { x0: o3.x0, x1: o3.x1, y0: o3.y0, y1: o3.y1 })] });
});
P2.displayName = "Crosshair";
var N = (0, import_react9.createContext)({ showTooltipAt: function() {
}, showTooltipFromEvent: function() {
}, hideTooltip: function() {
} });
var V = { isVisible: false, position: [null, null], content: null, anchor: null };
var j = (0, import_react9.createContext)(V);
var O = function(t6) {
  var i3 = (0, import_react9.useState)(V), n3 = i3[0], l3 = i3[1], a3 = (0, import_react9.useCallback)(function(t7, i4, o3) {
    var n4 = i4[0], r4 = i4[1];
    void 0 === o3 && (o3 = "top"), l3({ isVisible: true, position: [n4, r4], anchor: o3, content: t7 });
  }, [l3]), c8 = (0, import_react9.useCallback)(function(i4, o3, n4) {
    void 0 === n4 && (n4 = "top");
    var r4 = t6.current.getBoundingClientRect(), e4 = t6.current.offsetWidth, a4 = e4 === r4.width ? 1 : e4 / r4.width, c9 = (o3.clientX - r4.left) * a4, h3 = (o3.clientY - r4.top) * a4;
    "left" !== n4 && "right" !== n4 || (n4 = c9 < r4.width / 2 ? "right" : "left"), l3({ isVisible: true, position: [c9, h3], anchor: n4, content: i4 });
  }, [t6, l3]), h2 = (0, import_react9.useCallback)(function() {
    l3(V);
  }, [l3]);
  return { actions: (0, import_react9.useMemo)(function() {
    return { showTooltipAt: a3, showTooltipFromEvent: c8, hideTooltip: h2 };
  }, [a3, c8, h2]), state: n3 };
};
var k2 = function() {
  var t6 = (0, import_react9.useContext)(N);
  if (void 0 === t6)
    throw new Error("useTooltip must be used within a TooltipProvider");
  return t6;
};
var z = function() {
  var t6 = (0, import_react9.useContext)(j);
  if (void 0 === t6)
    throw new Error("useTooltipState must be used within a TooltipProvider");
  return t6;
};
var A3 = function(t6) {
  return t6.isVisible;
};
var F = function() {
  var t6 = z();
  return A3(t6) ? (0, import_jsx_runtime2.jsx)(g, { position: t6.position, anchor: t6.anchor, children: t6.content }) : null;
};
var M = function(t6) {
  var i3 = t6.container, o3 = t6.children, n3 = O(i3), r4 = n3.actions, e4 = n3.state;
  return (0, import_jsx_runtime2.jsx)(N.Provider, { value: r4, children: (0, import_jsx_runtime2.jsx)(j.Provider, { value: e4, children: o3 }) });
};

export {
  useTransition,
  to2 as to,
  animated,
  w,
  k2 as k,
  require_isPlainObject,
  require_baseRest,
  require_isIterateeCall,
  require_last,
  ordinal,
  band,
  point,
  rgbBasis2 as rgbBasis,
  cubehelixLong2 as cubehelixLong,
  format,
  linear4 as linear,
  log,
  symlog,
  timeFormat,
  timeParse,
  utcParse,
  time,
  utcTime,
  require_arrayIncludes,
  require_arrayIncludesWith,
  arc_default,
  line_default,
  area_default,
  pie_default,
  require_baseFlatten,
  et,
  tt,
  it,
  Rt,
  qt,
  kt,
  Mt,
  At,
  Ft,
  Xt,
  Vt,
  Zt,
  ti,
  ui,
  ci,
  fi,
  pi3 as pi,
  yi,
  Si,
  Mi,
  Bi,
  Fi,
  Ei,
  Xi,
  Ni,
  Vi,
  Ji,
  Qi,
  rn
};
//# sourceMappingURL=chunk-P4JLQBDW.js.map
